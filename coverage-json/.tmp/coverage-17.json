{"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts","statementMap":{"0":{"start":{"line":2,"column":35},"end":{"line":15,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/error.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const ErrorResponseSchema = z.object({\n  success: z.literal(false),\n  error: z.string().openapi({\n    example: 'Bad Request',\n    description: 'エラーの種類'\n  }),\n  message: z.string().openapi({\n    example: '無効なリクエストパラメータです',\n    description: 'エラーの詳細メッセージ'\n  }),\n  details: z.any().optional().openapi({\n    description: 'エラーの詳細情報'\n  })\n})\n\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,SAAS,EAAE,QAAQ,KAAK;AAAA,EACxB,OAAO,EAAE,OAAO,EAAE,QAAQ;AAAA,IACxB,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,QAAQ;AAAA,IAC1B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6a63d60aa5985710aa1a5dd58befc74fd0f881d"},"c:/Users/mtama/node/vector-db/src/schemas/embedding.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/embedding.schema.ts","statementMap":{"0":{"start":{"line":2,"column":39},"end":{"line":11,"column":2}},"1":{"start":{"line":12,"column":47},"end":{"line":20,"column":2}},"2":{"start":{"line":21,"column":36},"end":{"line":29,"column":2}},"3":{"start":{"line":30,"column":44},"end":{"line":39,"column":2}},"4":{"start":{"line":40,"column":44},"end":{"line":42,"column":2}},"5":{"start":{"line":43,"column":43},"end":{"line":52,"column":2}},"6":{"start":{"line":53,"column":31},"end":{"line":59,"column":2}},"7":{"start":{"line":60,"column":40},"end":{"line":63,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/embedding.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\n// 埋め込み生成スキーマ\nexport const GenerateEmbeddingSchema = z.object({\n  text: z.string().min(1).openapi({\n    example: 'This is a sample text to generate embeddings',\n    description: '埋め込みを生成するテキスト'\n  }),\n  model: z.string().optional().openapi({\n    example: '@cf/baai/bge-base-en-v1.5',\n    description: '使用するモデル名'\n  })\n})\n\nexport const GenerateEmbeddingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string()\n  }),\n  message: z.string()\n})\n\n// バッチ埋め込み生成スキーマ\nexport const BatchEmbeddingSchema = z.object({\n  texts: z.array(z.string()).min(1).openapi({\n    example: ['Text 1', 'Text 2', 'Text 3'],\n    description: '埋め込みを生成するテキストの配列'\n  }),\n  model: z.string().optional(),\n  batchSize: z.number().int().min(1).max(100).optional(),\n  saveToVectorize: z.boolean().optional()\n})\n\nexport const BatchEmbeddingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    textsCount: z.number()\n  }),\n  message: z.string()\n})\n\n// スケジュールバッチ埋め込みスキーマ\nexport const ScheduleBatchEmbeddingSchema = BatchEmbeddingSchema.extend({\n  delayMs: z.number().int().min(0).optional()\n})\n\nexport const ScheduleBatchResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string().optional(),\n    status: z.string(),\n    textsCount: z.number()\n  }),\n  message: z.string()\n})\n\n// モデル情報スキーマ\nexport const ModelInfoSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  dimensions: z.number(),\n  maxTokens: z.number(),\n  recommended: z.boolean()\n})\n\nexport const ListModelsResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.array(ModelInfoSchema)\n})\n\n// 型定義のエクスポート\nexport type GenerateEmbedding = z.infer<typeof GenerateEmbeddingSchema>\nexport type GenerateEmbeddingResponse = z.infer<typeof GenerateEmbeddingResponseSchema>\nexport type BatchEmbedding = z.infer<typeof BatchEmbeddingSchema>\nexport type BatchEmbeddingResponse = z.infer<typeof BatchEmbeddingResponseSchema>\nexport type ScheduleBatchEmbedding = z.infer<typeof ScheduleBatchEmbeddingSchema>\nexport type ScheduleBatchResponse = z.infer<typeof ScheduleBatchResponseSchema>\nexport type ModelInfo = z.infer<typeof ModelInfoSchema>\nexport type ListModelsResponse = z.infer<typeof ListModelsResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAGX,aAAM,0BAA0B,EAAE,OAAO;AAAA,EAC9C,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC9B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACnC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,kCAAkC,EAAE,OAAO;AAAA,EACtD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,EACnB,CAAC;AAAA,EACD,SAAS,EAAE,OAAO;AACpB,CAAC;AAGM,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IACxC,SAAS,CAAC,UAAU,UAAU,QAAQ;AAAA,IACtC,aAAa;AAAA,EACf,CAAC;AAAA,EACD,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,SAAS;AAAA,EACrD,iBAAiB,EAAE,QAAQ,EAAE,SAAS;AACxC,CAAC;AAEM,aAAM,+BAA+B,EAAE,OAAO;AAAA,EACnD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,YAAY,EAAE,OAAO;AAAA,EACvB,CAAC;AAAA,EACD,SAAS,EAAE,OAAO;AACpB,CAAC;AAGM,aAAM,+BAA+B,qBAAqB,OAAO;AAAA,EACtE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,SAAS;AAC5C,CAAC;AAEM,aAAM,8BAA8B,EAAE,OAAO;AAAA,EAClD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO,EAAE,SAAS;AAAA,IAChC,QAAQ,EAAE,OAAO;AAAA,IACjB,YAAY,EAAE,OAAO;AAAA,EACvB,CAAC;AAAA,EACD,SAAS,EAAE,OAAO;AACpB,CAAC;AAGM,aAAM,kBAAkB,EAAE,OAAO;AAAA,EACtC,MAAM,EAAE,OAAO;AAAA,EACf,aAAa,EAAE,OAAO;AAAA,EACtB,YAAY,EAAE,OAAO;AAAA,EACrB,WAAW,EAAE,OAAO;AAAA,EACpB,aAAa,EAAE,QAAQ;AACzB,CAAC;AAEM,aAAM,2BAA2B,EAAE,OAAO;AAAA,EAC/C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,MAAM,eAAe;AAC/B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"286b2567c213386e5f4a34b368118ca0a79a91a0"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/generate.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/generate.ts","statementMap":{"0":{"start":{"line":8,"column":17},"end":{"line":8,"column":80}},"1":{"start":{"line":9,"column":2},"end":{"line":13,"column":4}},"2":{"start":{"line":15,"column":38},"end":{"line":56,"column":2}},"3":{"start":{"line":57,"column":40},"end":{"line":72,"column":1}},"4":{"start":{"line":58,"column":2},"end":{"line":71,"column":3}},"5":{"start":{"line":59,"column":17},"end":{"line":59,"column":36}},"6":{"start":{"line":60,"column":27},"end":{"line":60,"column":68}},"7":{"start":{"line":61,"column":25},"end":{"line":61,"column":64}},"8":{"start":{"line":62,"column":21},"end":{"line":62,"column":64}},"9":{"start":{"line":63,"column":4},"end":{"line":63,"column":33}},"10":{"start":{"line":65,"column":4},"end":{"line":65,"column":56}},"11":{"start":{"line":66,"column":4},"end":{"line":70,"column":12}}},"fnMap":{"0":{"name":"generateEmbedding","decl":{"start":{"line":7,"column":22},"end":{"line":7,"column":39}},"loc":{"start":{"line":7,"column":62},"end":{"line":14,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":57,"column":40},"end":{"line":57,"column":41}},"loc":{"start":{"line":57,"column":53},"end":{"line":72,"column":1}},"line":57}},"branchMap":{"0":{"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":76}},"type":"cond-expr","locations":[{"start":{"line":69,"column":40},"end":{"line":69,"column":53}},{"start":{"line":69,"column":56},"end":{"line":69,"column":76}}],"line":69}},"s":{"0":0,"1":0,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"f":{"0":0,"1":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/generate.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  GenerateEmbeddingSchema,\n  GenerateEmbeddingResponseSchema,\n  type GenerateEmbedding,\n  type GenerateEmbeddingResponse\n} from '../../../schemas/embedding.schema'\nimport { AIEmbeddings } from '@/durable-objects'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// 埋め込み生成ロジック\nexport async function generateEmbedding(\n  params: GenerateEmbedding,\n  aiEmbeddings: DurableObjectStub<AIEmbeddings>\n): Promise<GenerateEmbeddingResponse> {\n  const result = await aiEmbeddings.generateEmbedding(params.text, params.model)\n  \n  return {\n    success: true,\n    data: result,\n    message: 'テキストの処理を開始しました'\n  }\n}\n\n// 埋め込み生成ルート\nexport const generateEmbeddingRoute = createRoute({\n  method: 'post',\n  path: '/embeddings',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: GenerateEmbeddingSchema\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: GenerateEmbeddingResponseSchema\n        }\n      },\n      description: '処理が開始されました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: 'テキスト埋め込み生成',\n  description: 'Workers AIを使用してテキストの埋め込みベクトルを非同期で生成します。処理状況はWorkflow IDで確認できます。'\n})\n\n// 埋め込み生成ハンドラー\nexport const generateEmbeddingHandler: RouteHandler<typeof generateEmbeddingRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n\n    // Durable Objectを使用\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n\n    const response = await generateEmbedding(body, aiEmbeddings)\n    return c.json(response, 200)\n  } catch (error) {\n    console.error('Embedding generation error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '埋め込み生成中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,EACA;AAAA,OAGK;AASP,sBAAsB,kBACpB,QACA,cACoC;AACpC,QAAM,SAAS,MAAM,aAAa,kBAAkB,OAAO,MAAM,OAAO,KAAK;AAE7E,SAAO;AAAA,IACL,SAAS;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF;AAGO,aAAM,yBAAyB,YAAY;AAAA,EAChD,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,2BAAiF,OAAO,MAAM;AACzG,MAAI;AACF,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,WAAW,MAAM,kBAAkB,MAAM,YAAY;AAC3D,WAAO,EAAE,KAAK,UAAU,GAAG;AAAA,EAC7B,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cd457445b91e81f0ce8fd99f53037d6939f68cac"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/batch.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/batch.ts","statementMap":{"0":{"start":{"line":7,"column":35},"end":{"line":48,"column":2}},"1":{"start":{"line":49,"column":37},"end":{"line":75,"column":1}},"2":{"start":{"line":50,"column":2},"end":{"line":74,"column":3}},"3":{"start":{"line":51,"column":17},"end":{"line":51,"column":36}},"4":{"start":{"line":52,"column":27},"end":{"line":52,"column":68}},"5":{"start":{"line":53,"column":25},"end":{"line":53,"column":64}},"6":{"start":{"line":54,"column":19},"end":{"line":61,"column":5}},"7":{"start":{"line":62,"column":4},"end":{"line":66,"column":12}},"8":{"start":{"line":68,"column":4},"end":{"line":68,"column":62}},"9":{"start":{"line":69,"column":4},"end":{"line":73,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":49,"column":37},"end":{"line":49,"column":38}},"loc":{"start":{"line":49,"column":50},"end":{"line":75,"column":1}},"line":49}},"branchMap":{"0":{"loc":{"start":{"line":72,"column":15},"end":{"line":72,"column":79}},"type":"cond-expr","locations":[{"start":{"line":72,"column":40},"end":{"line":72,"column":53}},{"start":{"line":72,"column":56},"end":{"line":72,"column":79}}],"line":72}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/batch.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  BatchEmbeddingSchema,\n  BatchEmbeddingResponseSchema\n} from '../../../schemas/embedding.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// バッチ埋め込み生成ルート\nexport const batchEmbeddingRoute = createRoute({\n  method: 'post',\n  path: '/embeddings/batch',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: BatchEmbeddingSchema\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: BatchEmbeddingResponseSchema\n        }\n      },\n      description: 'バッチ処理が開始されました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: 'バッチテキスト埋め込み生成',\n  description: '複数のテキストの埋め込みベクトルを非同期で一括生成します。処理状況はWorkflow IDで確認できます。'\n})\n\n// バッチ埋め込み生成ハンドラー\nexport const batchEmbeddingHandler: RouteHandler<typeof batchEmbeddingRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n    \n    // Durable Objectを使用\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n    \n    const result = await aiEmbeddings.generateBatchEmbeddings(\n      body.texts,\n      body.model,\n      {\n        batchSize: body.batchSize,\n        saveToVectorize: body.saveToVectorize\n      }\n    )\n    \n    return c.json({\n      success: true,\n      data: result,\n      message: `${result.textsCount}件のテキストの処理を開始しました`\n    }, 200)\n  } catch (error) {\n    console.error('Batch embedding generation error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'バッチ埋め込み生成中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAQA,aAAM,sBAAsB,YAAY;AAAA,EAC7C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,wBAA2E,OAAO,MAAM;AACnG,MAAI;AACF,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,SAAS,MAAM,aAAa;AAAA,MAChC,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,QACE,WAAW,KAAK;AAAA,QAChB,iBAAiB,KAAK;AAAA,MACxB;AAAA,IACF;AAEA,WAAO,EAAE,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS,GAAG,OAAO,UAAU;AAAA,IAC/B,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AACxD,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bf10cdd4a17440fdb0d53dc8372f667fe5b9b40d"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/schedule.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/schedule.ts","statementMap":{"0":{"start":{"line":7,"column":43},"end":{"line":48,"column":2}},"1":{"start":{"line":49,"column":45},"end":{"line":76,"column":1}},"2":{"start":{"line":50,"column":2},"end":{"line":75,"column":3}},"3":{"start":{"line":51,"column":17},"end":{"line":51,"column":36}},"4":{"start":{"line":52,"column":27},"end":{"line":52,"column":68}},"5":{"start":{"line":53,"column":25},"end":{"line":53,"column":64}},"6":{"start":{"line":54,"column":19},"end":{"line":62,"column":5}},"7":{"start":{"line":63,"column":4},"end":{"line":67,"column":12}},"8":{"start":{"line":69,"column":4},"end":{"line":69,"column":60}},"9":{"start":{"line":70,"column":4},"end":{"line":74,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":49,"column":45},"end":{"line":49,"column":46}},"loc":{"start":{"line":49,"column":58},"end":{"line":76,"column":1}},"line":49}},"branchMap":{"0":{"loc":{"start":{"line":73,"column":15},"end":{"line":73,"column":82}},"type":"cond-expr","locations":[{"start":{"line":73,"column":40},"end":{"line":73,"column":53}},{"start":{"line":73,"column":56},"end":{"line":73,"column":82}}],"line":73}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/schedule.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  ScheduleBatchEmbeddingSchema,\n  ScheduleBatchResponseSchema\n} from '../../../schemas/embedding.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// スケジュールバッチ埋め込みルート\nexport const scheduleBatchEmbeddingRoute = createRoute({\n  method: 'post',\n  path: '/embeddings/schedule',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: ScheduleBatchEmbeddingSchema\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: ScheduleBatchResponseSchema\n        }\n      },\n      description: 'バッチ処理がスケジュールされました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: 'バッチ埋め込み生成のスケジュール',\n  description: 'バッチ埋め込み生成を非同期でスケジュールします'\n})\n\n// スケジュールバッチ埋め込みハンドラー\nexport const scheduleBatchEmbeddingHandler: RouteHandler<typeof scheduleBatchEmbeddingRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n    \n    // Durable Objectを使用\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n    \n    const result = await aiEmbeddings.scheduleBatchEmbeddings(\n      body.texts,\n      body.model,\n      {\n        batchSize: body.batchSize,\n        saveToVectorize: body.saveToVectorize,\n        delayMs: body.delayMs\n      }\n    )\n    \n    return c.json({\n      success: true,\n      data: result,\n      message: `${result.textsCount}件のテキストの処理がスケジュールされました`\n    }, 200)\n  } catch (error) {\n    console.error('Schedule batch embedding error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'バッチ処理のスケジュール中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAQA,aAAM,8BAA8B,YAAY;AAAA,EACrD,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,gCAA2F,OAAO,MAAM;AACnH,MAAI;AACF,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,SAAS,MAAM,aAAa;AAAA,MAChC,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,QACE,WAAW,KAAK;AAAA,QAChB,iBAAiB,KAAK;AAAA,QACtB,SAAS,KAAK;AAAA,MAChB;AAAA,IACF;AAEA,WAAO,EAAE,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS,GAAG,OAAO,UAAU;AAAA,IAC/B,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AACtD,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6cd264b8abcd8c50fc320162eeb7abc6a26962ca"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/models.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/models.ts","statementMap":{"0":{"start":{"line":6,"column":31},"end":{"line":30,"column":2}},"1":{"start":{"line":31,"column":33},"end":{"line":48,"column":1}},"2":{"start":{"line":32,"column":2},"end":{"line":47,"column":3}},"3":{"start":{"line":33,"column":27},"end":{"line":33,"column":68}},"4":{"start":{"line":34,"column":25},"end":{"line":34,"column":64}},"5":{"start":{"line":35,"column":19},"end":{"line":35,"column":58}},"6":{"start":{"line":36,"column":4},"end":{"line":39,"column":12}},"7":{"start":{"line":41,"column":4},"end":{"line":41,"column":47}},"8":{"start":{"line":42,"column":4},"end":{"line":46,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":31,"column":33},"end":{"line":31,"column":34}},"loc":{"start":{"line":31,"column":46},"end":{"line":48,"column":1}},"line":31}},"branchMap":{"0":{"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":78}},"type":"cond-expr","locations":[{"start":{"line":45,"column":40},"end":{"line":45,"column":53}},{"start":{"line":45,"column":56},"end":{"line":45,"column":78}}],"line":45}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/models.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  ListModelsResponseSchema,\n  type ListModelsResponse\n} from '../../../schemas/embedding.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// 利用可能なモデル一覧ルート\nexport const listModelsRoute = createRoute({\n  method: 'get',\n  path: '/embeddings/models',\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: ListModelsResponseSchema\n        }\n      },\n      description: '利用可能なモデル一覧'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: '利用可能なモデル一覧',\n  description: '埋め込み生成に利用可能なモデルの一覧を取得します'\n})\n\n// 利用可能なモデル一覧ハンドラー\nexport const listModelsHandler: RouteHandler<typeof listModelsRoute, EnvType> = async (c) => {\n  try {\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n    \n    const models = await aiEmbeddings.getAvailableModels()\n    \n    return c.json<ListModelsResponse, 200>({\n      success: true,\n      data: models\n    }, 200)\n  } catch (error) {\n    console.error('List models error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'モデル一覧の取得中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,OAEK;AAQA,aAAM,kBAAkB,YAAY;AAAA,EACzC,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,oBAAmE,OAAO,MAAM;AAC3F,MAAI;AACF,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,SAAS,MAAM,aAAa,mBAAmB;AAErD,WAAO,EAAE,KAA8B;AAAA,MACrC,SAAS;AAAA,MACT,MAAM;AAAA,IACR,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,sBAAsB,KAAK;AACzC,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c29656ed22158313231357f74db97f7175e74b06"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/index.ts","statementMap":{"0":{"start":{"line":6,"column":2},"end":{"line":6,"column":64}},"1":{"start":{"line":7,"column":2},"end":{"line":7,"column":58}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":74}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":15},"end":{"line":5,"column":16}},"loc":{"start":{"line":5,"column":24},"end":{"line":10,"column":1}},"line":5}},"branchMap":{},"s":{"0":3,"1":3,"2":3,"3":3},"f":{"0":3},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/index.ts"],"sourcesContent":["import type { OpenAPIHono } from '@hono/zod-openapi'\nimport { generateEmbeddingRoute, generateEmbeddingHandler } from './generate'\nimport { batchEmbeddingRoute, batchEmbeddingHandler } from './batch'\nimport { scheduleBatchEmbeddingRoute, scheduleBatchEmbeddingHandler } from './schedule'\nimport { listModelsRoute, listModelsHandler } from './models'\n\n// エクスポート用関数\nexport default (app: OpenAPIHono<{ Bindings: Env }>) => {\n  app.openapi(generateEmbeddingRoute, generateEmbeddingHandler)\n  app.openapi(batchEmbeddingRoute, batchEmbeddingHandler)\n  app.openapi(scheduleBatchEmbeddingRoute, scheduleBatchEmbeddingHandler)\n  app.openapi(listModelsRoute, listModelsHandler)\n}"],"mappings":"AACA,SAAS,wBAAwB,gCAAgC;AACjE,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,6BAA6B,qCAAqC;AAC3E,SAAS,iBAAiB,yBAAyB;AAGnD,eAAe,CAAC,QAAwC;AACtD,MAAI,QAAQ,wBAAwB,wBAAwB;AAC5D,MAAI,QAAQ,qBAAqB,qBAAqB;AACtD,MAAI,QAAQ,6BAA6B,6BAA6B;AACtE,MAAI,QAAQ,iBAAiB,iBAAiB;AAChD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"26230add5a31eb1066ef4d7570276f101873ebf0"},"c:/Users/mtama/node/vector-db/src/schemas/vector.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/vector.schema.ts","statementMap":{"0":{"start":{"line":2,"column":36},"end":{"line":7,"column":16}},"1":{"start":{"line":8,"column":28},"end":{"line":28,"column":2}},"2":{"start":{"line":29,"column":34},"end":{"line":45,"column":2}},"3":{"start":{"line":46,"column":36},"end":{"line":50,"column":2}},"4":{"start":{"line":51,"column":40},"end":{"line":56,"column":2}},"5":{"start":{"line":57,"column":42},"end":{"line":61,"column":2}},"6":{"start":{"line":62,"column":50},"end":{"line":70,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/vector.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const VectorMetadataSchema = z.object({\n  title: z.string().optional(),\n  content: z.string().optional(),\n  url: z.string().url().optional(),\n  timestamp: z.string().datetime().optional(),\n}).passthrough()\n\nexport const VectorSchema = z.object({\n  id: z.string().min(1).openapi({\n    example: 'vec_123456',\n    description: 'ベクトルの一意識別子'\n  }),\n  values: z.union([\n    z.array(z.number()),\n    z.any() // VectorFloatArray (Float32Array)\n  ]).openapi({\n    example: [0.1, 0.2, 0.3],\n    description: 'ベクトルの数値配列またはFloat32Array'\n  }),\n  namespace: z.string().optional().openapi({\n    example: 'default',\n    description: 'ベクトルの名前空間'\n  }),\n  metadata: VectorMetadataSchema.optional().openapi({\n    description: 'ベクトルに関連付けられたメタデータ'\n  })\n})\n\nexport const CreateVectorSchema = z.object({\n  text: z.string().min(1).openapi({\n    example: 'これはサンプルテキストです',\n    description: 'ベクトル化するテキスト'\n  }),\n  model: z.string().optional().openapi({\n    example: '@cf/baai/bge-base-en-v1.5',\n    description: '使用するモデル名'\n  }),\n  namespace: z.string().optional().openapi({\n    example: 'default',\n    description: 'ベクトルの名前空間'\n  }),\n  metadata: VectorMetadataSchema.optional().openapi({\n    description: 'ベクトルに関連付けるメタデータ'\n  })\n})\n\nexport const VectorResponseSchema = z.object({\n  success: z.boolean(),\n  data: VectorSchema,\n  message: z.string().optional()\n})\n\nexport const VectorListResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.array(VectorSchema),\n  count: z.number(),\n  message: z.string().optional()\n})\n\nexport const DeleteVectorResponseSchema = z.object({\n  success: z.boolean(),\n  deletedCount: z.number(),\n  message: z.string().optional()\n})\n\n// 非同期操作レスポンススキーマ\nexport const AsyncVectorOperationResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    message: z.string()\n  })\n})\n\nexport type Vector = z.infer<typeof VectorSchema>\nexport type CreateVector = z.infer<typeof CreateVectorSchema>\nexport type VectorResponse = z.infer<typeof VectorResponseSchema>\nexport type VectorListResponse = z.infer<typeof VectorListResponseSchema>\nexport type DeleteVectorResponse = z.infer<typeof DeleteVectorResponseSchema>\nexport type VectorMetadata = z.infer<typeof VectorMetadataSchema>\nexport type AsyncVectorOperationResponse = z.infer<typeof AsyncVectorOperationResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,EAC7B,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS;AAAA,EAC/B,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAC5C,CAAC,EAAE,YAAY;AAER,aAAM,eAAe,EAAE,OAAO;AAAA,EACnC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC5B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,QAAQ,EAAE,MAAM;AAAA,IACd,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,IAClB,EAAE,IAAI;AAAA;AAAA,EACR,CAAC,EAAE,QAAQ;AAAA,IACT,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,IACvB,aAAa;AAAA,EACf,CAAC;AAAA,EACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,UAAU,qBAAqB,SAAS,EAAE,QAAQ;AAAA,IAChD,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,qBAAqB,EAAE,OAAO;AAAA,EACzC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC9B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACnC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,UAAU,qBAAqB,SAAS,EAAE,QAAQ;AAAA,IAChD,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM;AAAA,EACN,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAEM,aAAM,2BAA2B,EAAE,OAAO;AAAA,EAC/C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,MAAM,YAAY;AAAA,EAC1B,OAAO,EAAE,OAAO;AAAA,EAChB,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAEM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,SAAS,EAAE,QAAQ;AAAA,EACnB,cAAc,EAAE,OAAO;AAAA,EACvB,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAGM,aAAM,qCAAqC,EAAE,OAAO;AAAA,EACzD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,SAAS,EAAE,OAAO;AAAA,EACpB,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2e3dc4b53178f16a9638cf10f62a78c104331f66"},"c:/Users/mtama/node/vector-db/src/schemas/search.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/search.schema.ts","statementMap":{"0":{"start":{"line":3,"column":33},"end":{"line":28,"column":2}},"1":{"start":{"line":29,"column":33},"end":{"line":37,"column":2}},"2":{"start":{"line":38,"column":36},"end":{"line":50,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/search.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\nimport { VectorSchema } from './vector.schema'\nimport { type VectorizeMatch } from './cloudflare.schema'\n\nexport const SearchQuerySchema = z.object({\n  query: z.string().min(1).openapi({\n    example: '検索クエリテキスト',\n    description: '検索するテキストクエリ'\n  }),\n  topK: z.number().int().min(1).max(100).default(10).openapi({\n    example: 10,\n    description: '返す結果の最大数'\n  }),\n  namespace: z.string().optional().openapi({\n    example: 'default',\n    description: '検索する名前空間'\n  }),\n  filter: z.record(z.string(), z.any()).optional().openapi({\n    example: { category: 'technology' },\n    description: 'メタデータフィルター'\n  }),\n  includeMetadata: z.boolean().default(true).openapi({\n    example: true,\n    description: 'メタデータを結果に含めるか'\n  }),\n  includeValues: z.boolean().default(false).openapi({\n    example: false,\n    description: 'ベクトル値を結果に含めるか'\n  })\n})\n\nexport const SearchMatchSchema = z.object({\n  id: z.string(),\n  score: z.number().min(0).max(1).openapi({\n    example: 0.95,\n    description: '類似度スコア（0-1）'\n  }),\n  vector: VectorSchema.optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n})\n\nexport const SearchResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    matches: z.array(SearchMatchSchema),\n    query: z.string(),\n    namespace: z.string().optional(),\n    processingTime: z.number().openapi({\n      example: 123.45,\n      description: '処理時間（ミリ秒）'\n    })\n  }),\n  message: z.string().optional()\n})\n\nexport type SearchQuery = z.infer<typeof SearchQuerySchema>\nexport type SearchMatch = z.infer<typeof SearchMatchSchema>\nexport type SearchResponse = z.infer<typeof SearchResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAClB,SAAS,oBAAoB;AAGtB,aAAM,oBAAoB,EAAE,OAAO;AAAA,EACxC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC/B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE,EAAE,QAAQ;AAAA,IACzD,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,QAAQ,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvD,SAAS,EAAE,UAAU,aAAa;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AAAA,EACD,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,IACjD,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,eAAe,EAAE,QAAQ,EAAE,QAAQ,KAAK,EAAE,QAAQ;AAAA,IAChD,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,oBAAoB,EAAE,OAAO;AAAA,EACxC,IAAI,EAAE,OAAO;AAAA,EACb,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IACtC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,QAAQ,aAAa,SAAS;AAAA,EAC9B,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AACnD,CAAC;AAEM,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,SAAS,EAAE,MAAM,iBAAiB;AAAA,IAClC,OAAO,EAAE,OAAO;AAAA,IAChB,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,IAC/B,gBAAgB,EAAE,OAAO,EAAE,QAAQ;AAAA,MACjC,SAAS;AAAA,MACT,aAAa;AAAA,IACf,CAAC;AAAA,EACH,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b22c0df2afba2a7d7c31e39c1717d5616f01c63f"},"c:/Users/mtama/node/vector-db/src/services/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/services/index.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/services/index.ts"],"sourcesContent":["export { VectorizeService } from './vectorize.service'"],"mappings":"AAAA,SAAS,wBAAwB;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"33bd27971c59391fb8b63f0ed73e8bafba247bc9"},"c:/Users/mtama/node/vector-db/src/services/vectorize.service.ts":{"path":"c:/Users/mtama/node/vector-db/src/services/vectorize.service.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":19}},"1":{"start":{"line":6,"column":4},"end":{"line":6,"column":51}},"2":{"start":{"line":9,"column":4},"end":{"line":9,"column":51}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":65}},"4":{"start":{"line":15,"column":4},"end":{"line":15,"column":56}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":59}},"6":{"start":{"line":21,"column":20},"end":{"line":21,"column":51}},"7":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"8":{"start":{"line":23,"column":6},"end":{"line":23,"column":54}},"9":{"start":{"line":25,"column":25},"end":{"line":30,"column":5}},"10":{"start":{"line":31,"column":20},"end":{"line":31,"column":69}},"11":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"12":{"start":{"line":33,"column":6},"end":{"line":33,"column":110}},"13":{"start":{"line":33,"column":58},"end":{"line":33,"column":79}},"14":{"start":{"line":35,"column":4},"end":{"line":35,"column":19}},"15":{"start":{"line":38,"column":22},"end":{"line":38,"column":32}},"16":{"start":{"line":39,"column":22},"end":{"line":39,"column":61}},"17":{"start":{"line":40,"column":4},"end":{"line":40,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":19},"end":{"line":4,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":24},"end":{"line":7,"column":3}},"line":5},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":2},"end":{"line":8,"column":3}},"loc":{"start":{"line":8,"column":24},"end":{"line":10,"column":3}},"line":8},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":31},"end":{"line":13,"column":3}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":22},"end":{"line":16,"column":3}},"line":14},"5":{"name":"(anonymous_5)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":3}},"loc":{"start":{"line":17,"column":25},"end":{"line":19,"column":3}},"line":17},"6":{"name":"(anonymous_6)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":39},"end":{"line":36,"column":3}},"line":20},"7":{"name":"(anonymous_7)","decl":{"start":{"line":33,"column":47},"end":{"line":33,"column":48}},"loc":{"start":{"line":33,"column":58},"end":{"line":33,"column":79}},"line":33},"8":{"name":"(anonymous_8)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":35},"end":{"line":41,"column":3}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},{"start":{},"end":{}}],"line":22},"1":{"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":40}},"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":16}},{"start":{"line":22,"column":20},"end":{"line":22,"column":40}}],"line":22},"2":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":81}},"type":"cond-expr","locations":[{"start":{"line":26,"column":35},"end":{"line":26,"column":59}},{"start":{"line":26,"column":62},"end":{"line":26,"column":81}}],"line":26},"3":{"loc":{"start":{"line":26,"column":36},"end":{"line":26,"column":54}},"type":"binary-expr","locations":[{"start":{"line":26,"column":36},"end":{"line":26,"column":48}},{"start":{"line":26,"column":52},"end":{"line":26,"column":54}}],"line":26},"4":{"loc":{"start":{"line":26,"column":62},"end":{"line":26,"column":81}},"type":"binary-expr","locations":[{"start":{"line":26,"column":62},"end":{"line":26,"column":75}},{"start":{"line":26,"column":79},"end":{"line":26,"column":81}}],"line":26},"5":{"loc":{"start":{"line":27,"column":17},"end":{"line":27,"column":59}},"type":"binary-expr","locations":[{"start":{"line":27,"column":17},"end":{"line":27,"column":35}},{"start":{"line":27,"column":39},"end":{"line":27,"column":59}}],"line":27},"6":{"loc":{"start":{"line":28,"column":22},"end":{"line":28,"column":53}},"type":"binary-expr","locations":[{"start":{"line":28,"column":22},"end":{"line":28,"column":45}},{"start":{"line":28,"column":49},"end":{"line":28,"column":53}}],"line":28},"7":{"loc":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},{"start":{},"end":{}}],"line":32},"8":{"loc":{"start":{"line":33,"column":90},"end":{"line":33,"column":108}},"type":"binary-expr","locations":[{"start":{"line":33,"column":90},"end":{"line":33,"column":102}},{"start":{"line":33,"column":106},"end":{"line":33,"column":108}}],"line":33},"9":{"loc":{"start":{"line":37,"column":19},"end":{"line":37,"column":33}},"type":"default-arg","locations":[{"start":{"line":37,"column":28},"end":{"line":37,"column":33}}],"line":37}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/services/vectorize.service.ts"],"sourcesContent":["export class VectorizeService {\n  constructor(\n    private env: Env\n  ) {}\n\n  async insert(vectors: VectorizeVector[]): Promise<void> {\n    await this.env.VECTORIZE_INDEX.insert(vectors)\n  }\n\n  async upsert(vectors: VectorizeVector[]): Promise<void> {\n    await this.env.VECTORIZE_INDEX.upsert(vectors)\n  }\n\n  async query(\n    vector: number[],\n    options?: VectorizeQueryOptions\n  ): Promise<VectorizeMatches> {\n    return await this.env.VECTORIZE_INDEX.query(vector, options)\n  }\n\n  async getByIds(ids: string[]): Promise<VectorizeVector[]> {\n    return await this.env.VECTORIZE_INDEX.getByIds(ids)\n  }\n\n  async deleteByIds(ids: string[]): Promise<{ count: number }> {\n    return await this.env.VECTORIZE_INDEX.deleteByIds(ids)\n  }\n\n  async findSimilar(\n    vectorId: string,\n    options?: VectorizeQueryOptions & { excludeSelf?: boolean }\n  ): Promise<VectorizeMatches> {\n    const vectors = await this.getByIds([vectorId])\n    if (!vectors || vectors.length === 0) {\n      throw new Error(`Vector ${vectorId} not found`)\n    }\n\n    const queryOptions: VectorizeQueryOptions = {\n      topK: options?.excludeSelf ? (options.topK || 10) + 1 : options?.topK || 10,\n      namespace: options?.namespace || vectors[0].namespace,\n      returnMetadata: options?.returnMetadata ?? true,\n      filter: options?.filter\n    }\n\n    const results = await this.query(vectors[0].values as number[], queryOptions)\n\n    if (options?.excludeSelf) {\n      results.matches = results.matches\n        .filter(match => match.id !== vectorId)\n        .slice(0, options.topK || 10)\n    }\n\n    return results\n  }\n\n  generateVectorId(prefix: string = 'vec'): string {\n    const timestamp = Date.now()\n    const randomStr = Math.random().toString(36).substr(2, 9)\n    return `${prefix}_${timestamp}_${randomStr}`\n  }\n}"],"mappings":"AAAO,aAAM,iBAAiB;AAAA,EAC5B,YACU,KACR;AADQ;AAAA,EACP;AAAA,EAEH,MAAM,OAAO,SAA2C;AACtD,UAAM,KAAK,IAAI,gBAAgB,OAAO,OAAO;AAAA,EAC/C;AAAA,EAEA,MAAM,OAAO,SAA2C;AACtD,UAAM,KAAK,IAAI,gBAAgB,OAAO,OAAO;AAAA,EAC/C;AAAA,EAEA,MAAM,MACJ,QACA,SAC2B;AAC3B,WAAO,MAAM,KAAK,IAAI,gBAAgB,MAAM,QAAQ,OAAO;AAAA,EAC7D;AAAA,EAEA,MAAM,SAAS,KAA2C;AACxD,WAAO,MAAM,KAAK,IAAI,gBAAgB,SAAS,GAAG;AAAA,EACpD;AAAA,EAEA,MAAM,YAAY,KAA2C;AAC3D,WAAO,MAAM,KAAK,IAAI,gBAAgB,YAAY,GAAG;AAAA,EACvD;AAAA,EAEA,MAAM,YACJ,UACA,SAC2B;AAC3B,UAAM,UAAU,MAAM,KAAK,SAAS,CAAC,QAAQ,CAAC;AAC9C,QAAI,CAAC,WAAW,QAAQ,WAAW,GAAG;AACpC,YAAM,IAAI,MAAM,UAAU,QAAQ,YAAY;AAAA,IAChD;AAEA,UAAM,eAAsC;AAAA,MAC1C,MAAM,SAAS,eAAe,QAAQ,QAAQ,MAAM,IAAI,SAAS,QAAQ;AAAA,MACzE,WAAW,SAAS,aAAa,QAAQ,CAAC,EAAE;AAAA,MAC5C,gBAAgB,SAAS,kBAAkB;AAAA,MAC3C,QAAQ,SAAS;AAAA,IACnB;AAEA,UAAM,UAAU,MAAM,KAAK,MAAM,QAAQ,CAAC,EAAE,QAAoB,YAAY;AAE5E,QAAI,SAAS,aAAa;AACxB,cAAQ,UAAU,QAAQ,QACvB,OAAO,WAAS,MAAM,OAAO,QAAQ,EACrC,MAAM,GAAG,QAAQ,QAAQ,EAAE;AAAA,IAChC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,iBAAiB,SAAiB,OAAe;AAC/C,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,YAAY,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AACxD,WAAO,GAAG,MAAM,IAAI,SAAS,IAAI,SAAS;AAAA,EAC5C;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e47a9f94def45419bccee3f206166ed2fc04d172"},"c:/Users/mtama/node/vector-db/src/routes/api/search/vectors.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/search/vectors.ts","statementMap":{"0":{"start":{"line":8,"column":34},"end":{"line":49,"column":2}},"1":{"start":{"line":50,"column":36},"end":{"line":100,"column":1}},"2":{"start":{"line":51,"column":2},"end":{"line":99,"column":3}},"3":{"start":{"line":52,"column":22},"end":{"line":52,"column":32}},"4":{"start":{"line":53,"column":17},"end":{"line":53,"column":36}},"5":{"start":{"line":54,"column":29},"end":{"line":54,"column":56}},"6":{"start":{"line":55,"column":21},"end":{"line":55,"column":92}},"7":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"8":{"start":{"line":57,"column":6},"end":{"line":57,"column":64}},"9":{"start":{"line":59,"column":22},"end":{"line":59,"column":38}},"10":{"start":{"line":60,"column":26},"end":{"line":68,"column":5}},"11":{"start":{"line":69,"column":20},"end":{"line":80,"column":6}},"12":{"start":{"line":70,"column":21},"end":{"line":73,"column":7}},"13":{"start":{"line":74,"column":6},"end":{"line":76,"column":7}},"14":{"start":{"line":75,"column":8},"end":{"line":75,"column":41}},"15":{"start":{"line":77,"column":6},"end":{"line":78,"column":7}},"16":{"start":{"line":79,"column":6},"end":{"line":79,"column":20}},"17":{"start":{"line":81,"column":27},"end":{"line":81,"column":49}},"18":{"start":{"line":82,"column":4},"end":{"line":91,"column":12}},"19":{"start":{"line":93,"column":4},"end":{"line":93,"column":42}},"20":{"start":{"line":94,"column":4},"end":{"line":98,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":50,"column":36},"end":{"line":50,"column":37}},"loc":{"start":{"line":50,"column":49},"end":{"line":100,"column":1}},"line":50},"1":{"name":"(anonymous_1)","decl":{"start":{"line":69,"column":46},"end":{"line":69,"column":47}},"loc":{"start":{"line":69,"column":57},"end":{"line":80,"column":5}},"line":69}},"branchMap":{"0":{"loc":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},{"start":{},"end":{}}],"line":56},"1":{"loc":{"start":{"line":56,"column":8},"end":{"line":56,"column":77}},"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":29}},{"start":{"line":56,"column":33},"end":{"line":56,"column":47}},{"start":{"line":56,"column":51},"end":{"line":56,"column":77}}],"line":56},"2":{"loc":{"start":{"line":74,"column":6},"end":{"line":76,"column":7}},"type":"if","locations":[{"start":{"line":74,"column":6},"end":{"line":76,"column":7}},{"start":{},"end":{}}],"line":74},"3":{"loc":{"start":{"line":74,"column":10},"end":{"line":74,"column":48}},"type":"binary-expr","locations":[{"start":{"line":74,"column":10},"end":{"line":74,"column":30}},{"start":{"line":74,"column":34},"end":{"line":74,"column":48}}],"line":74},"4":{"loc":{"start":{"line":77,"column":6},"end":{"line":78,"column":7}},"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":78,"column":7}},{"start":{},"end":{}}],"line":77},"5":{"loc":{"start":{"line":97,"column":15},"end":{"line":97,"column":72}},"type":"cond-expr","locations":[{"start":{"line":97,"column":40},"end":{"line":97,"column":53}},{"start":{"line":97,"column":56},"end":{"line":97,"column":72}}],"line":97}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/search/vectors.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { \n  SearchQuerySchema,\n  SearchResponseSchema,\n  type SearchResponse,\n  type SearchMatch\n} from '../../../schemas/search.schema'\nimport { type VectorizeMatch } from '../../../schemas/cloudflare.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport { VectorizeService } from '../../../services'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ベクトル検索ルート定義\nexport const searchVectorsRoute = createRoute({\n  method: 'post',\n  path: '/search',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: SearchQuerySchema\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: SearchResponseSchema\n        }\n      },\n      description: '検索結果'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Search'],\n  summary: 'ベクトル検索',\n  description: 'テキストクエリを使用してベクトルデータベースを検索します'\n})\n\n// ベクトル検索ハンドラー\nexport const searchVectorsHandler: RouteHandler<typeof searchVectorsRoute, EnvType> = async (c) => {\n  try {\n    const startTime = Date.now()\n    const body = c.req.valid('json')\n    \n    const vectorizeService = new VectorizeService(c.env)\n    \n    // Workers AIを直接使用してクエリテキストをベクトル化（同期的）\n    const aiResult = await c.env.AI.run(c.env.DEFAULT_EMBEDDING_MODEL as keyof AiModels, { text: body.query })\n    \n    if (!('data' in aiResult) || !aiResult.data || aiResult.data.length === 0) {\n      throw new Error('Failed to generate embedding for query')\n    }\n    const embedding = aiResult.data[0]\n    \n    // Vectorizeで検索\n    const searchResults = await vectorizeService.query(\n      embedding,\n      {\n        topK: body.topK,\n        namespace: body.namespace,\n        filter: body.filter,\n        returnMetadata: body.includeMetadata\n      }\n    )\n    \n    // 結果を整形\n    const matches = searchResults.matches.map((match: VectorizeMatch) => {\n      const result: SearchMatch = {\n        id: match.id,\n        score: match.score\n      }\n      \n      if (body.includeMetadata && match.metadata) {\n        result.metadata = match.metadata\n      }\n      \n      if (body.includeValues) {\n        // 値を含める場合は別途取得が必要\n        // ここでは簡略化のため省略\n      }\n      \n      return result\n    })\n    \n    const processingTime = Date.now() - startTime\n    \n    return c.json<SearchResponse, 200>({\n      success: true,\n      data: {\n        matches,\n        query: body.query,\n        namespace: body.namespace,\n        processingTime\n      },\n      message: `${matches.length}件の結果が見つかりました`\n    }, 200)\n  } catch (error) {\n    console.error('Search error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '検索中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C;AAAA,EACE;AAAA,EACA;AAAA,OAGK;AAEP,SAAS,2BAA+C;AACxD,SAAS,wBAAwB;AAQ1B,aAAM,qBAAqB,YAAY;AAAA,EAC5C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,QAAQ;AAAA,EACf,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,uBAAyE,OAAO,MAAM;AACjG,MAAI;AACF,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAE/B,UAAM,mBAAmB,IAAI,iBAAiB,EAAE,GAAG;AAGnD,UAAM,WAAW,MAAM,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,yBAA2C,EAAE,MAAM,KAAK,MAAM,CAAC;AAEzG,QAAI,EAAE,UAAU,aAAa,CAAC,SAAS,QAAQ,SAAS,KAAK,WAAW,GAAG;AACzE,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,UAAM,YAAY,SAAS,KAAK,CAAC;AAGjC,UAAM,gBAAgB,MAAM,iBAAiB;AAAA,MAC3C;AAAA,MACA;AAAA,QACE,MAAM,KAAK;AAAA,QACX,WAAW,KAAK;AAAA,QAChB,QAAQ,KAAK;AAAA,QACb,gBAAgB,KAAK;AAAA,MACvB;AAAA,IACF;AAGA,UAAM,UAAU,cAAc,QAAQ,IAAI,CAAC,UAA0B;AACnE,YAAM,SAAsB;AAAA,QAC1B,IAAI,MAAM;AAAA,QACV,OAAO,MAAM;AAAA,MACf;AAEA,UAAI,KAAK,mBAAmB,MAAM,UAAU;AAC1C,eAAO,WAAW,MAAM;AAAA,MAC1B;AAEA,UAAI,KAAK,eAAe;AAAA,MAGxB;AAEA,aAAO;AAAA,IACT,CAAC;AAED,UAAM,iBAAiB,KAAK,IAAI,IAAI;AAEpC,WAAO,EAAE,KAA0B;AAAA,MACjC,SAAS;AAAA,MACT,MAAM;AAAA,QACJ;AAAA,QACA,OAAO,KAAK;AAAA,QACZ,WAAW,KAAK;AAAA,QAChB;AAAA,MACF;AAAA,MACA,SAAS,GAAG,QAAQ,MAAM;AAAA,IAC5B,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,iBAAiB,KAAK;AACpC,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6c8415cec7de1e54ba7dc890e81ca155666a97bb"},"c:/Users/mtama/node/vector-db/src/routes/api/search/semantic.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/search/semantic.ts","statementMap":{"0":{"start":{"line":8,"column":35},"end":{"line":56,"column":2}},"1":{"start":{"line":17,"column":51},"end":{"line":17,"column":69}},"2":{"start":{"line":57,"column":37},"end":{"line":99,"column":1}},"3":{"start":{"line":58,"column":2},"end":{"line":98,"column":3}},"4":{"start":{"line":59,"column":22},"end":{"line":59,"column":32}},"5":{"start":{"line":60,"column":18},"end":{"line":60,"column":38}},"6":{"start":{"line":61,"column":29},"end":{"line":61,"column":56}},"7":{"start":{"line":62,"column":21},"end":{"line":62,"column":93}},"8":{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},"9":{"start":{"line":64,"column":6},"end":{"line":64,"column":64}},"10":{"start":{"line":66,"column":22},"end":{"line":66,"column":38}},"11":{"start":{"line":67,"column":26},"end":{"line":74,"column":5}},"12":{"start":{"line":75,"column":20},"end":{"line":79,"column":7}},"13":{"start":{"line":75,"column":58},"end":{"line":79,"column":5}},"14":{"start":{"line":80,"column":27},"end":{"line":80,"column":49}},"15":{"start":{"line":81,"column":4},"end":{"line":90,"column":12}},"16":{"start":{"line":92,"column":4},"end":{"line":92,"column":51}},"17":{"start":{"line":93,"column":4},"end":{"line":97,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":44},"end":{"line":17,"column":45}},"loc":{"start":{"line":17,"column":51},"end":{"line":17,"column":69}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":57,"column":37},"end":{"line":57,"column":38}},"loc":{"start":{"line":57,"column":50},"end":{"line":99,"column":1}},"line":57},"2":{"name":"(anonymous_2)","decl":{"start":{"line":75,"column":46},"end":{"line":75,"column":47}},"loc":{"start":{"line":75,"column":58},"end":{"line":79,"column":5}},"line":75}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":51},"end":{"line":17,"column":69}},"type":"cond-expr","locations":[{"start":{"line":17,"column":55},"end":{"line":17,"column":64}},{"start":{"line":17,"column":67},"end":{"line":17,"column":69}}],"line":17},"1":{"loc":{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},{"start":{},"end":{}}],"line":63},"2":{"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":77}},"type":"binary-expr","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":29}},{"start":{"line":63,"column":33},"end":{"line":63,"column":47}},{"start":{"line":63,"column":51},"end":{"line":63,"column":77}}],"line":63},"3":{"loc":{"start":{"line":96,"column":15},"end":{"line":96,"column":72}},"type":"cond-expr","locations":[{"start":{"line":96,"column":40},"end":{"line":96,"column":53}},{"start":{"line":96,"column":56},"end":{"line":96,"column":72}}],"line":96}},"s":{"0":1,"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0,0],"3":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/search/semantic.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport {\n  SearchQuerySchema,\n  SearchResponseSchema,\n  type SearchResponse\n} from '../../../schemas/search.schema'\nimport { type VectorizeMatch } from '../../../schemas/cloudflare.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport { VectorizeService } from '../../../services'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// セマンティック検索ルート定義（GET版）\nexport const semanticSearchRoute = createRoute({\n  method: 'get',\n  path: '/search/semantic',\n  request: {\n    query: z.object({\n      query: z.string().min(1).openapi({\n        example: '検索クエリテキスト',\n        description: '検索するテキストクエリ'\n      }),\n      topK: z.string().optional().transform(v => v ? Number(v) : 10).pipe(z.number().int().min(1).max(100)).openapi({\n        example: '10',\n        description: '返す結果の最大数'\n      }),\n      namespace: z.string().optional().openapi({\n        example: 'default',\n        description: '検索する名前空間'\n      })\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: SearchResponseSchema\n        }\n      },\n      description: '検索結果'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Search'],\n  summary: 'セマンティック検索（GET）',\n  description: 'クエリパラメータを使用した簡易セマンティック検索'\n})\n\n// セマンティック検索ハンドラー\nexport const semanticSearchHandler: RouteHandler<typeof semanticSearchRoute, EnvType> = async (c) => {\n  try {\n    const startTime = Date.now()\n    const query = c.req.valid('query')\n\n    const vectorizeService = new VectorizeService(c.env)\n\n    // Workers AIを直接使用してクエリテキストをベクトル化（同期的）\n    const aiResult = await c.env.AI.run(c.env.DEFAULT_EMBEDDING_MODEL as keyof AiModels, { text: query.query })\n\n    if (!('data' in aiResult) || !aiResult.data || aiResult.data.length === 0) {\n      throw new Error('Failed to generate embedding for query')\n    }\n    const embedding = aiResult.data[0]\n\n    // Vectorizeで検索\n    const searchResults = await vectorizeService.query(\n      embedding,\n      {\n        topK: query.topK,\n        namespace: query.namespace,\n        returnMetadata: true\n      }\n    )\n\n    // 結果を整形\n    const matches = searchResults.matches.map((match: VectorizeMatch) => ({\n      id: match.id,\n      score: match.score,\n      metadata: match.metadata\n    }))\n\n    const processingTime = Date.now() - startTime\n\n    return c.json<SearchResponse, 200>({\n      success: true,\n      data: {\n        matches,\n        query: query.query,\n        namespace: query.namespace,\n        processingTime\n      },\n      message: `${matches.length}件の結果が見つかりました`\n    }, 200)\n  } catch (error) {\n    console.error('Semantic search error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '検索中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB;AAAA,EAEE;AAAA,OAEK;AAEP,SAAS,2BAA+C;AACxD,SAAS,wBAAwB;AAQ1B,aAAM,sBAAsB,YAAY;AAAA,EAC7C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,OAAO,EAAE,OAAO;AAAA,MACd,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,QAC/B,SAAS;AAAA,QACT,aAAa;AAAA,MACf,CAAC;AAAA,MACD,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,OAAK,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,QAAQ;AAAA,QAC5G,SAAS;AAAA,QACT,aAAa;AAAA,MACf,CAAC;AAAA,MACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,QACvC,SAAS;AAAA,QACT,aAAa;AAAA,MACf,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,QAAQ;AAAA,EACf,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,wBAA2E,OAAO,MAAM;AACnG,MAAI;AACF,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,QAAQ,EAAE,IAAI,MAAM,OAAO;AAEjC,UAAM,mBAAmB,IAAI,iBAAiB,EAAE,GAAG;AAGnD,UAAM,WAAW,MAAM,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,yBAA2C,EAAE,MAAM,MAAM,MAAM,CAAC;AAE1G,QAAI,EAAE,UAAU,aAAa,CAAC,SAAS,QAAQ,SAAS,KAAK,WAAW,GAAG;AACzE,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,UAAM,YAAY,SAAS,KAAK,CAAC;AAGjC,UAAM,gBAAgB,MAAM,iBAAiB;AAAA,MAC3C;AAAA,MACA;AAAA,QACE,MAAM,MAAM;AAAA,QACZ,WAAW,MAAM;AAAA,QACjB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAGA,UAAM,UAAU,cAAc,QAAQ,IAAI,CAAC,WAA2B;AAAA,MACpE,IAAI,MAAM;AAAA,MACV,OAAO,MAAM;AAAA,MACb,UAAU,MAAM;AAAA,IAClB,EAAE;AAEF,UAAM,iBAAiB,KAAK,IAAI,IAAI;AAEpC,WAAO,EAAE,KAA0B;AAAA,MACjC,SAAS;AAAA,MACT,MAAM;AAAA,QACJ;AAAA,QACA,OAAO,MAAM;AAAA,QACb,WAAW,MAAM;AAAA,QACjB;AAAA,MACF;AAAA,MACA,SAAS,GAAG,QAAQ,MAAM;AAAA,IAC5B,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,0BAA0B,KAAK;AAC7C,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7b90bd4a8b58ba0247d14e0913e0db9b191562d5"},"c:/Users/mtama/node/vector-db/src/routes/api/search/similar.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/search/similar.ts","statementMap":{"0":{"start":{"line":6,"column":34},"end":{"line":57,"column":2}},"1":{"start":{"line":58,"column":36},"end":{"line":102,"column":1}},"2":{"start":{"line":59,"column":2},"end":{"line":101,"column":3}},"3":{"start":{"line":60,"column":22},"end":{"line":60,"column":32}},"4":{"start":{"line":61,"column":17},"end":{"line":61,"column":36}},"5":{"start":{"line":62,"column":29},"end":{"line":62,"column":56}},"6":{"start":{"line":63,"column":26},"end":{"line":71,"column":5}},"7":{"start":{"line":72,"column":27},"end":{"line":72,"column":49}},"8":{"start":{"line":73,"column":4},"end":{"line":86,"column":12}},"9":{"start":{"line":76,"column":55},"end":{"line":80,"column":9}},"10":{"start":{"line":88,"column":4},"end":{"line":88,"column":50}},"11":{"start":{"line":89,"column":4},"end":{"line":95,"column":5}},"12":{"start":{"line":90,"column":6},"end":{"line":94,"column":14}},"13":{"start":{"line":96,"column":4},"end":{"line":100,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":58,"column":36},"end":{"line":58,"column":37}},"loc":{"start":{"line":58,"column":49},"end":{"line":102,"column":1}},"line":58},"1":{"name":"(anonymous_1)","decl":{"start":{"line":76,"column":43},"end":{"line":76,"column":44}},"loc":{"start":{"line":76,"column":55},"end":{"line":80,"column":9}},"line":76}},"branchMap":{"0":{"loc":{"start":{"line":89,"column":4},"end":{"line":95,"column":5}},"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":95,"column":5}},{"start":{},"end":{}}],"line":89},"1":{"loc":{"start":{"line":89,"column":8},"end":{"line":89,"column":69}},"type":"binary-expr","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":30}},{"start":{"line":89,"column":34},"end":{"line":89,"column":69}}],"line":89},"2":{"loc":{"start":{"line":99,"column":15},"end":{"line":99,"column":74}},"type":"cond-expr","locations":[{"start":{"line":99,"column":40},"end":{"line":99,"column":53}},{"start":{"line":99,"column":56},"end":{"line":99,"column":74}}],"line":99}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/search/similar.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { SearchResponseSchema, type SearchResponse } from '../../../schemas/search.schema'\nimport { type VectorizeMatch } from '../../../schemas/cloudflare.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport { VectorizeService } from '../../../services'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// 類似検索ルート定義\nexport const similarSearchRoute = createRoute({\n  method: 'post',\n  path: '/search/similar',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: z.object({\n            vectorId: z.string().min(1).openapi({\n              example: 'vec_123456',\n              description: '類似検索の基準となるベクトルID'\n            }),\n            topK: z.number().int().min(1).max(100).default(10),\n            namespace: z.string().optional(),\n            excludeSelf: z.boolean().default(true).openapi({\n              description: '結果から自分自身を除外するか'\n            })\n          })\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: SearchResponseSchema\n        }\n      },\n      description: '類似検索結果'\n    },\n    404: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ベクトルが見つかりません'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Search'],\n  summary: '類似ベクトル検索',\n  description: '指定されたベクトルIDに類似するベクトルを検索します'\n})\n\n// 類似検索ハンドラー\nexport const similarSearchHandler: RouteHandler<typeof similarSearchRoute, EnvType> = async (c) => {\n  try {\n    const startTime = Date.now()\n    const body = c.req.valid('json')\n    \n    const vectorizeService = new VectorizeService(c.env)\n    \n    // 類似検索を実行\n    const searchResults = await vectorizeService.findSimilar(\n      body.vectorId,\n      {\n        topK: body.topK,\n        namespace: body.namespace,\n        excludeSelf: body.excludeSelf,\n        returnMetadata: true\n      }\n    )\n    \n    const processingTime = Date.now() - startTime\n    \n    return c.json<SearchResponse, 200>({\n      success: true,\n      data: {\n        matches: searchResults.matches.map((match: VectorizeMatch) => ({\n          id: match.id,\n          score: match.score,\n          metadata: match.metadata\n        })),\n        query: `Similar to ${body.vectorId}`,\n        namespace: body.namespace,\n        processingTime\n      },\n      message: `${searchResults.matches.length}件の類似ベクトルが見つかりました`\n    }, 200)\n  } catch (error) {\n    console.error('Similar search error:', error)\n    \n    if (error instanceof Error && error.message.includes('not found')) {\n      return c.json<ErrorResponse, 404>({\n        success: false,\n        error: 'Not Found',\n        message: error.message\n      }, 404)\n    }\n    \n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '類似検索中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB,SAAS,4BAAiD;AAE1D,SAAS,2BAA+C;AACxD,SAAS,wBAAwB;AAQ1B,aAAM,qBAAqB,YAAY;AAAA,EAC5C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,EAAE,OAAO;AAAA,YACf,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,cAClC,SAAS;AAAA,cACT,aAAa;AAAA,YACf,CAAC;AAAA,YACD,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE;AAAA,YACjD,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,YAC/B,aAAa,EAAE,QAAQ,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,cAC7C,aAAa;AAAA,YACf,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,QAAQ;AAAA,EACf,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,uBAAyE,OAAO,MAAM;AACjG,MAAI;AACF,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAE/B,UAAM,mBAAmB,IAAI,iBAAiB,EAAE,GAAG;AAGnD,UAAM,gBAAgB,MAAM,iBAAiB;AAAA,MAC3C,KAAK;AAAA,MACL;AAAA,QACE,MAAM,KAAK;AAAA,QACX,WAAW,KAAK;AAAA,QAChB,aAAa,KAAK;AAAA,QAClB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,iBAAiB,KAAK,IAAI,IAAI;AAEpC,WAAO,EAAE,KAA0B;AAAA,MACjC,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,SAAS,cAAc,QAAQ,IAAI,CAAC,WAA2B;AAAA,UAC7D,IAAI,MAAM;AAAA,UACV,OAAO,MAAM;AAAA,UACb,UAAU,MAAM;AAAA,QAClB,EAAE;AAAA,QACF,OAAO,cAAc,KAAK,QAAQ;AAAA,QAClC,WAAW,KAAK;AAAA,QAChB;AAAA,MACF;AAAA,MACA,SAAS,GAAG,cAAc,QAAQ,MAAM;AAAA,IAC1C,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAE5C,QAAI,iBAAiB,SAAS,MAAM,QAAQ,SAAS,WAAW,GAAG;AACjE,aAAO,EAAE,KAAyB;AAAA,QAChC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS,MAAM;AAAA,MACjB,GAAG,GAAG;AAAA,IACR;AAEA,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5b2b031fb46e7ca6fdc2be38415cf7cd1075bf99"},"c:/Users/mtama/node/vector-db/src/routes/api/search/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/search/index.ts","statementMap":{"0":{"start":{"line":5,"column":2},"end":{"line":5,"column":56}},"1":{"start":{"line":6,"column":2},"end":{"line":6,"column":58}},"2":{"start":{"line":7,"column":2},"end":{"line":7,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":15},"end":{"line":4,"column":16}},"loc":{"start":{"line":4,"column":24},"end":{"line":8,"column":1}},"line":4}},"branchMap":{},"s":{"0":2,"1":2,"2":2},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/search/index.ts"],"sourcesContent":["import type { OpenAPIHono } from '@hono/zod-openapi'\nimport { searchVectorsRoute, searchVectorsHandler } from './vectors'\nimport { semanticSearchRoute, semanticSearchHandler } from './semantic'\nimport { similarSearchRoute, similarSearchHandler } from './similar'\n\n// エクスポート用関数\nexport default (app: OpenAPIHono<{ Bindings: Env }>) => {\n  app.openapi(searchVectorsRoute, searchVectorsHandler)\n  app.openapi(semanticSearchRoute, semanticSearchHandler)\n  app.openapi(similarSearchRoute, similarSearchHandler)\n}"],"mappings":"AACA,SAAS,oBAAoB,4BAA4B;AACzD,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,oBAAoB,4BAA4B;AAGzD,eAAe,CAAC,QAAwC;AACtD,MAAI,QAAQ,oBAAoB,oBAAoB;AACpD,MAAI,QAAQ,qBAAqB,qBAAqB;AACtD,MAAI,QAAQ,oBAAoB,oBAAoB;AACtD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3643b0584ec259d481b3cc497114702b161ab9b5"},"c:/Users/mtama/node/vector-db/src/routes/api/vectors/create.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/vectors/create.ts","statementMap":{"0":{"start":{"line":7,"column":33},"end":{"line":48,"column":2}},"1":{"start":{"line":49,"column":35},"end":{"line":77,"column":1}},"2":{"start":{"line":50,"column":2},"end":{"line":76,"column":3}},"3":{"start":{"line":51,"column":17},"end":{"line":51,"column":36}},"4":{"start":{"line":52,"column":28},"end":{"line":52,"column":68}},"5":{"start":{"line":53,"column":26},"end":{"line":53,"column":65}},"6":{"start":{"line":54,"column":19},"end":{"line":59,"column":5}},"7":{"start":{"line":60,"column":4},"end":{"line":68,"column":12}},"8":{"start":{"line":70,"column":4},"end":{"line":70,"column":49}},"9":{"start":{"line":71,"column":4},"end":{"line":75,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":49,"column":35},"end":{"line":49,"column":36}},"loc":{"start":{"line":49,"column":48},"end":{"line":77,"column":1}},"line":49}},"branchMap":{"0":{"loc":{"start":{"line":74,"column":15},"end":{"line":74,"column":76}},"type":"cond-expr","locations":[{"start":{"line":74,"column":40},"end":{"line":74,"column":53}},{"start":{"line":74,"column":56},"end":{"line":74,"column":76}}],"line":74}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/vectors/create.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport {\n  CreateVectorSchema,\n  AsyncVectorOperationResponseSchema,\n  type AsyncVectorOperationResponse\n} from '../../../schemas/vector.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ベクトル作成ルート定義\nexport const createVectorRoute = createRoute({\n  method: 'post',\n  path: '/vectors',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: CreateVectorSchema\n        }\n      }\n    }\n  },\n  responses: {\n    202: {\n      content: {\n        'application/json': {\n          schema: AsyncVectorOperationResponseSchema\n        }\n      },\n      description: 'ベクトル作成処理が開始されました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Vectors'],\n  summary: 'ベクトル作成',\n  description: 'テキストから埋め込みベクトルを生成して保存します'\n})\n\n// ベクトル作成ハンドラー\nexport const createVectorHandler: RouteHandler<typeof createVectorRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n    \n    // VectorManager Durable Objectを使用\n    const vectorManagerId = c.env.VECTOR_CACHE.idFromName('default')\n    const vectorManager = c.env.VECTOR_CACHE.get(vectorManagerId)\n    \n    // 非同期でベクトルを作成\n    const result = await vectorManager.createVectorAsync(\n      body.text,\n      body.model,\n      body.namespace,\n      body.metadata\n    )\n    \n    return c.json<AsyncVectorOperationResponse, 202>({\n      success: true,\n      data: {\n        jobId: result.jobId,\n        workflowId: result.workflowId,\n        status: result.status,\n        message: 'ベクトルの作成を開始しました'\n      }\n    }, 202) // 202 Accepted for async operations\n  } catch (error) {\n    console.error('Create vector error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ベクトル作成中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C;AAAA,EACE;AAAA,EACA;AAAA,OAEK;AACP,SAAS,2BAA+C;AAQjD,aAAM,oBAAoB,YAAY;AAAA,EAC3C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,SAAS;AAAA,EAChB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,sBAAuE,OAAO,MAAM;AAC/F,MAAI;AACF,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,kBAAkB,EAAE,IAAI,aAAa,WAAW,SAAS;AAC/D,UAAM,gBAAgB,EAAE,IAAI,aAAa,IAAI,eAAe;AAG5D,UAAM,SAAS,MAAM,cAAc;AAAA,MACjC,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACP;AAEA,WAAO,EAAE,KAAwC;AAAA,MAC/C,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,OAAO,OAAO;AAAA,QACd,YAAY,OAAO;AAAA,QACnB,QAAQ,OAAO;AAAA,QACf,SAAS;AAAA,MACX;AAAA,IACF,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9a71c99a76040b5e3e8c13322604402b0e0f9fba"},"c:/Users/mtama/node/vector-db/src/routes/api/vectors/get.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/vectors/get.ts","statementMap":{"0":{"start":{"line":8,"column":30},"end":{"line":45,"column":2}},"1":{"start":{"line":46,"column":32},"end":{"line":71,"column":1}},"2":{"start":{"line":47,"column":2},"end":{"line":70,"column":3}},"3":{"start":{"line":48,"column":19},"end":{"line":48,"column":39}},"4":{"start":{"line":49,"column":29},"end":{"line":49,"column":56}},"5":{"start":{"line":50,"column":20},"end":{"line":50,"column":57}},"6":{"start":{"line":51,"column":4},"end":{"line":57,"column":5}},"7":{"start":{"line":52,"column":6},"end":{"line":56,"column":14}},"8":{"start":{"line":58,"column":4},"end":{"line":62,"column":12}},"9":{"start":{"line":64,"column":4},"end":{"line":64,"column":46}},"10":{"start":{"line":65,"column":4},"end":{"line":69,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":46,"column":32},"end":{"line":46,"column":33}},"loc":{"start":{"line":46,"column":45},"end":{"line":71,"column":1}},"line":46}},"branchMap":{"0":{"loc":{"start":{"line":51,"column":4},"end":{"line":57,"column":5}},"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":57,"column":5}},{"start":{},"end":{}}],"line":51},"1":{"loc":{"start":{"line":51,"column":8},"end":{"line":51,"column":40}},"type":"binary-expr","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":16}},{"start":{"line":51,"column":20},"end":{"line":51,"column":40}}],"line":51},"2":{"loc":{"start":{"line":68,"column":15},"end":{"line":68,"column":76}},"type":"cond-expr","locations":[{"start":{"line":68,"column":40},"end":{"line":68,"column":53}},{"start":{"line":68,"column":56},"end":{"line":68,"column":76}}],"line":68}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/vectors/get.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport {\n  VectorResponseSchema,\n  type VectorResponse\n} from '../../../schemas/vector.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport { VectorizeService } from '../../../services'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ベクトル取得ルート定義\nexport const getVectorRoute = createRoute({\n  method: 'get',\n  path: '/vectors/{id}',\n  request: {\n    params: z.object({\n      id: z.string().min(1)\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: VectorResponseSchema\n        }\n      },\n      description: 'ベクトル情報'\n    },\n    404: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ベクトルが見つかりません'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Vectors'],\n  summary: 'ベクトルの取得',\n  description: 'IDを指定してベクトルを取得します'\n})\n\n// ベクトル取得ハンドラー\nexport const getVectorHandler: RouteHandler<typeof getVectorRoute, EnvType> = async (c) => {\n  try {\n    const { id } = c.req.valid('param')\n    \n    const vectorizeService = new VectorizeService(c.env)\n    const vectors = await vectorizeService.getByIds([id])\n\n    if (!vectors || vectors.length === 0) {\n      return c.json<ErrorResponse, 404>({\n        success: false,\n        error: 'Not Found',\n        message: `ベクトル ${id} が見つかりません`\n      }, 404)\n    }\n\n    return c.json<VectorResponse, 200>({\n      success: true,\n      data: vectors[0],\n      message: 'ベクトルが見つかりました'\n    }, 200)\n  } catch (error) {\n    console.error('Get vector error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ベクトル取得中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB;AAAA,EACE;AAAA,OAEK;AACP,SAAS,2BAA+C;AACxD,SAAS,wBAAwB;AAQ1B,aAAM,iBAAiB,YAAY;AAAA,EACxC,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,QAAQ,EAAE,OAAO;AAAA,MACf,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,SAAS;AAAA,EAChB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,mBAAiE,OAAO,MAAM;AACzF,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,EAAE,IAAI,MAAM,OAAO;AAElC,UAAM,mBAAmB,IAAI,iBAAiB,EAAE,GAAG;AACnD,UAAM,UAAU,MAAM,iBAAiB,SAAS,CAAC,EAAE,CAAC;AAEpD,QAAI,CAAC,WAAW,QAAQ,WAAW,GAAG;AACpC,aAAO,EAAE,KAAyB;AAAA,QAChC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS,QAAQ,EAAE;AAAA,MACrB,GAAG,GAAG;AAAA,IACR;AAEA,WAAO,EAAE,KAA0B;AAAA,MACjC,SAAS;AAAA,MACT,MAAM,QAAQ,CAAC;AAAA,MACf,SAAS;AAAA,IACX,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,qBAAqB,KAAK;AACxC,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b225073526f8dbade29516678680e789600ce20c"},"c:/Users/mtama/node/vector-db/src/routes/api/vectors/list.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/vectors/list.ts","statementMap":{"0":{"start":{"line":7,"column":32},"end":{"line":38,"column":2}},"1":{"start":{"line":39,"column":34},"end":{"line":64,"column":1}},"2":{"start":{"line":40,"column":2},"end":{"line":63,"column":3}},"3":{"start":{"line":41,"column":41},"end":{"line":41,"column":61}},"4":{"start":{"line":42,"column":28},"end":{"line":42,"column":68}},"5":{"start":{"line":43,"column":26},"end":{"line":43,"column":65}},"6":{"start":{"line":44,"column":19},"end":{"line":48,"column":6}},"7":{"start":{"line":49,"column":4},"end":{"line":55,"column":12}},"8":{"start":{"line":57,"column":4},"end":{"line":57,"column":48}},"9":{"start":{"line":58,"column":4},"end":{"line":62,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":39,"column":34},"end":{"line":39,"column":35}},"loc":{"start":{"line":39,"column":47},"end":{"line":64,"column":1}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":51,"column":12},"end":{"line":51,"column":32}},"type":"binary-expr","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":26}},{"start":{"line":51,"column":30},"end":{"line":51,"column":32}}],"line":51},"1":{"loc":{"start":{"line":52,"column":13},"end":{"line":52,"column":30}},"type":"binary-expr","locations":[{"start":{"line":52,"column":13},"end":{"line":52,"column":25}},{"start":{"line":52,"column":29},"end":{"line":52,"column":30}}],"line":52},"2":{"loc":{"start":{"line":61,"column":15},"end":{"line":61,"column":79}},"type":"cond-expr","locations":[{"start":{"line":61,"column":40},"end":{"line":61,"column":53}},{"start":{"line":61,"column":56},"end":{"line":61,"column":79}}],"line":61}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/vectors/list.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport {\n  VectorListResponseSchema,\n  type VectorListResponse\n} from '../../../schemas/vector.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ベクトル一覧取得ルート定義\nexport const listVectorsRoute = createRoute({\n  method: 'get',\n  path: '/vectors',\n  request: {\n    query: z.object({\n      namespace: z.string().optional(),\n      limit: z.string().transform(Number).pipe(z.number().int().min(1).max(100)).default(10),\n      cursor: z.string().optional()\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: VectorListResponseSchema\n        }\n      },\n      description: 'ベクトル一覧'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Vectors'],\n  summary: 'ベクトル一覧の取得',\n  description: 'ベクトルの一覧を取得します'\n})\n\n// ベクトル一覧取得ハンドラー\nexport const listVectorsHandler: RouteHandler<typeof listVectorsRoute, EnvType> = async (c) => {\n  try {\n    const { namespace, limit, cursor } = c.req.valid('query')\n    \n    // VectorManager Durable Objectを使用して一覧を取得\n    const vectorManagerId = c.env.VECTOR_CACHE.idFromName('default')\n    const vectorManager = c.env.VECTOR_CACHE.get(vectorManagerId)\n    \n    // ベクトル一覧を取得\n    const result = await vectorManager.listVectors({\n      namespace,\n      limit,\n      cursor\n    })\n    \n    return c.json<VectorListResponse, 200>({\n      success: true,\n      data: result.vectors || [],\n      count: result.count || 0,\n      cursor: result.nextCursor,\n      message: 'ベクトル一覧を取得しました'\n    }, 200)\n  } catch (error) {\n    console.error('List vectors error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ベクトル一覧の取得中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB;AAAA,EACE;AAAA,OAEK;AACP,SAAS,2BAA+C;AAQjD,aAAM,mBAAmB,YAAY;AAAA,EAC1C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,OAAO,EAAE,OAAO;AAAA,MACd,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,MAC/B,OAAO,EAAE,OAAO,EAAE,UAAU,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,QAAQ,EAAE;AAAA,MACrF,QAAQ,EAAE,OAAO,EAAE,SAAS;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,SAAS;AAAA,EAChB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,qBAAqE,OAAO,MAAM;AAC7F,MAAI;AACF,UAAM,EAAE,WAAW,OAAO,OAAO,IAAI,EAAE,IAAI,MAAM,OAAO;AAGxD,UAAM,kBAAkB,EAAE,IAAI,aAAa,WAAW,SAAS;AAC/D,UAAM,gBAAgB,EAAE,IAAI,aAAa,IAAI,eAAe;AAG5D,UAAM,SAAS,MAAM,cAAc,YAAY;AAAA,MAC7C;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,WAAO,EAAE,KAA8B;AAAA,MACrC,SAAS;AAAA,MACT,MAAM,OAAO,WAAW,CAAC;AAAA,MACzB,OAAO,OAAO,SAAS;AAAA,MACvB,QAAQ,OAAO;AAAA,MACf,SAAS;AAAA,IACX,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,uBAAuB,KAAK;AAC1C,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"73293fce9413266e4f9543ec1b3b9d6eac5716ea"},"c:/Users/mtama/node/vector-db/src/routes/api/vectors/delete.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/vectors/delete.ts","statementMap":{"0":{"start":{"line":7,"column":33},"end":{"line":44,"column":2}},"1":{"start":{"line":45,"column":35},"end":{"line":68,"column":1}},"2":{"start":{"line":46,"column":2},"end":{"line":67,"column":3}},"3":{"start":{"line":47,"column":19},"end":{"line":47,"column":39}},"4":{"start":{"line":48,"column":28},"end":{"line":48,"column":68}},"5":{"start":{"line":49,"column":26},"end":{"line":49,"column":65}},"6":{"start":{"line":50,"column":19},"end":{"line":50,"column":63}},"7":{"start":{"line":51,"column":4},"end":{"line":59,"column":12}},"8":{"start":{"line":61,"column":4},"end":{"line":61,"column":49}},"9":{"start":{"line":62,"column":4},"end":{"line":66,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":45,"column":35},"end":{"line":45,"column":36}},"loc":{"start":{"line":45,"column":48},"end":{"line":68,"column":1}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":65,"column":15},"end":{"line":65,"column":77}},"type":"cond-expr","locations":[{"start":{"line":65,"column":40},"end":{"line":65,"column":53}},{"start":{"line":65,"column":56},"end":{"line":65,"column":77}}],"line":65}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/vectors/delete.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport {\n  AsyncVectorOperationResponseSchema,\n  type AsyncVectorOperationResponse\n} from '../../../schemas/vector.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ベクトル削除ルート定義\nexport const deleteVectorRoute = createRoute({\n  method: 'delete',\n  path: '/vectors/{id}',\n  request: {\n    params: z.object({\n      id: z.string().min(1)\n    })\n  },\n  responses: {\n    202: {\n      content: {\n        'application/json': {\n          schema: AsyncVectorOperationResponseSchema\n        }\n      },\n      description: 'ベクトル削除処理が開始されました'\n    },\n    404: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ベクトルが見つかりません'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Vectors'],\n  summary: 'ベクトルの削除',\n  description: 'IDを指定してベクトルを削除します'\n})\n\n// ベクトル削除ハンドラー\nexport const deleteVectorHandler: RouteHandler<typeof deleteVectorRoute, EnvType> = async (c) => {\n  try {\n    const { id } = c.req.valid('param')\n    \n    // VectorManager Durable Objectを使用\n    const vectorManagerId = c.env.VECTOR_CACHE.idFromName('default')\n    const vectorManager = c.env.VECTOR_CACHE.get(vectorManagerId)\n    \n    // 非同期でベクトルを削除\n    const result = await vectorManager.deleteVectorsAsync([id])\n    \n    return c.json<AsyncVectorOperationResponse, 202>({\n      success: true,\n      data: {\n        jobId: result.jobId,\n        workflowId: result.workflowId,\n        status: result.status,\n        message: 'ベクトルの削除を開始しました'\n      }\n    }, 202) // 202 Accepted for async operations\n  } catch (error) {\n    console.error('Delete vector error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ベクトルの削除中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB;AAAA,EACE;AAAA,OAEK;AACP,SAAS,2BAA+C;AAQjD,aAAM,oBAAoB,YAAY;AAAA,EAC3C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,QAAQ,EAAE,OAAO;AAAA,MACf,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,SAAS;AAAA,EAChB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,sBAAuE,OAAO,MAAM;AAC/F,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,EAAE,IAAI,MAAM,OAAO;AAGlC,UAAM,kBAAkB,EAAE,IAAI,aAAa,WAAW,SAAS;AAC/D,UAAM,gBAAgB,EAAE,IAAI,aAAa,IAAI,eAAe;AAG5D,UAAM,SAAS,MAAM,cAAc,mBAAmB,CAAC,EAAE,CAAC;AAE1D,WAAO,EAAE,KAAwC;AAAA,MAC/C,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,OAAO,OAAO;AAAA,QACd,YAAY,OAAO;AAAA,QACnB,QAAQ,OAAO;AAAA,QACf,SAAS;AAAA,MACX;AAAA,IACF,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5e22685ccfa66c4f3a3d1677b2ab443343577c0e"},"c:/Users/mtama/node/vector-db/src/routes/api/vectors/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/vectors/index.ts","statementMap":{"0":{"start":{"line":6,"column":2},"end":{"line":6,"column":54}},"1":{"start":{"line":7,"column":2},"end":{"line":7,"column":48}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":52}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":54}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":15},"end":{"line":5,"column":16}},"loc":{"start":{"line":5,"column":24},"end":{"line":10,"column":1}},"line":5}},"branchMap":{},"s":{"0":2,"1":2,"2":2,"3":2},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/vectors/index.ts"],"sourcesContent":["import type { OpenAPIHono } from '@hono/zod-openapi'\nimport { createVectorRoute, createVectorHandler } from './create'\nimport { getVectorRoute, getVectorHandler } from './get'\nimport { listVectorsRoute, listVectorsHandler } from './list'\nimport { deleteVectorRoute, deleteVectorHandler } from './delete'\n\n// エクスポート用関数\nexport default (app: OpenAPIHono<{ Bindings: Env }>) => {\n  app.openapi(createVectorRoute, createVectorHandler)\n  app.openapi(getVectorRoute, getVectorHandler)\n  app.openapi(listVectorsRoute, listVectorsHandler)\n  app.openapi(deleteVectorRoute, deleteVectorHandler)\n}"],"mappings":"AACA,SAAS,mBAAmB,2BAA2B;AACvD,SAAS,gBAAgB,wBAAwB;AACjD,SAAS,kBAAkB,0BAA0B;AACrD,SAAS,mBAAmB,2BAA2B;AAGvD,eAAe,CAAC,QAAwC;AACtD,MAAI,QAAQ,mBAAmB,mBAAmB;AAClD,MAAI,QAAQ,gBAAgB,gBAAgB;AAC5C,MAAI,QAAQ,kBAAkB,kBAAkB;AAChD,MAAI,QAAQ,mBAAmB,mBAAmB;AACpD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ab503495f7a3b0b2a9f0741c7e7129bc426042da"},"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts","statementMap":{"0":{"start":{"line":2,"column":34},"end":{"line":2,"column":115}},"1":{"start":{"line":3,"column":32},"end":{"line":12,"column":2}},"2":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"3":{"start":{"line":13,"column":44},"end":{"line":26,"column":2}},"4":{"start":{"line":27,"column":42},"end":{"line":38,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":0,"3":1,"4":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\nimport { VectorMetadataSchema } from './vector.schema'\n\n// サポートするファイルタイプ\nexport const SupportedFileTypes = z.enum(['application/pdf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp'])\n\n// ファイルアップロードのフォームデータスキーマ\nexport const FileUploadSchema = z.object({\n  file: z.instanceof(File).refine(\n    (file) => file.size <= 10 * 1024 * 1024, // 10MB max\n    { message: 'ファイルサイズは10MB以下にしてください' }\n  ),\n  namespace: z.string().optional(),\n  metadata: z.string().optional() // JSON string として受け取る\n})\n\n// ファイル処理レスポンススキーマ\nexport const FileProcessingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    fileInfo: z.object({\n      name: z.string(),\n      type: z.string(),\n      size: z.number()\n    }),\n    message: z.string()\n  })\n})\n\n// ファイル処理結果スキーマ\nexport const FileProcessingResultSchema = z.object({\n  type: z.enum(['pdf', 'image']),\n  success: z.boolean(),\n  content: z.object({\n    text: z.string().optional(),\n    description: z.string().optional(),\n    extractedPages: z.number().optional(),\n    metadata: z.record(z.string(), z.any()).optional()\n  }),\n  vectorIds: z.array(z.string()),\n  error: z.string().optional()\n})\n\nexport type SupportedFileType = z.infer<typeof SupportedFileTypes>\nexport type FileUpload = z.infer<typeof FileUploadSchema>\nexport type FileProcessingResponse = z.infer<typeof FileProcessingResponseSchema>\nexport type FileProcessingResult = z.infer<typeof FileProcessingResultSchema>"],"mappings":"AAAA,SAAS,SAAS;AAIX,aAAM,qBAAqB,EAAE,KAAK,CAAC,mBAAmB,cAAc,aAAa,aAAa,YAAY,CAAC;AAG3G,aAAM,mBAAmB,EAAE,OAAO;AAAA,EACvC,MAAM,EAAE,WAAW,IAAI,EAAE;AAAA,IACvB,CAAC,SAAS,KAAK,QAAQ,KAAK,OAAO;AAAA;AAAA,IACnC,EAAE,SAAS,wBAAwB;AAAA,EACrC;AAAA,EACA,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA;AAChC,CAAC;AAGM,aAAM,+BAA+B,EAAE,OAAO;AAAA,EACnD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,UAAU,EAAE,OAAO;AAAA,MACjB,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,IACjB,CAAC;AAAA,IACD,SAAS,EAAE,OAAO;AAAA,EACpB,CAAC;AACH,CAAC;AAGM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,MAAM,EAAE,KAAK,CAAC,OAAO,OAAO,CAAC;AAAA,EAC7B,SAAS,EAAE,QAAQ;AAAA,EACnB,SAAS,EAAE,OAAO;AAAA,IAChB,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,IAC1B,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,IACjC,gBAAgB,EAAE,OAAO,EAAE,SAAS;AAAA,IACpC,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,EACnD,CAAC;AAAA,EACD,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC7B,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6e626a4d2276b65170457ff69db0772446520387"},"c:/Users/mtama/node/vector-db/src/routes/api/files/upload.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/files/upload.ts","statementMap":{"0":{"start":{"line":7,"column":23},"end":{"line":18,"column":2}},"1":{"start":{"line":8,"column":2},"end":{"line":8,"column":22}},"2":{"start":{"line":8,"column":12},"end":{"line":8,"column":22}},"3":{"start":{"line":9,"column":2},"end":{"line":17,"column":3}},"4":{"start":{"line":10,"column":4},"end":{"line":10,"column":27}},"5":{"start":{"line":12,"column":4},"end":{"line":15,"column":7}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":19}},"7":{"start":{"line":19,"column":31},"end":{"line":81,"column":2}},"8":{"start":{"line":82,"column":33},"end":{"line":148,"column":1}},"9":{"start":{"line":83,"column":2},"end":{"line":147,"column":3}},"10":{"start":{"line":84,"column":21},"end":{"line":84,"column":43}},"11":{"start":{"line":85,"column":17},"end":{"line":85,"column":37}},"12":{"start":{"line":86,"column":22},"end":{"line":86,"column":47}},"13":{"start":{"line":87,"column":24},"end":{"line":87,"column":48}},"14":{"start":{"line":88,"column":4},"end":{"line":94,"column":5}},"15":{"start":{"line":89,"column":6},"end":{"line":93,"column":14}},"16":{"start":{"line":95,"column":21},"end":{"line":95,"column":30}},"17":{"start":{"line":96,"column":27},"end":{"line":96,"column":100}},"18":{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},"19":{"start":{"line":98,"column":6},"end":{"line":102,"column":14}},"20":{"start":{"line":104,"column":24},"end":{"line":104,"column":61}},"21":{"start":{"line":105,"column":4},"end":{"line":112,"column":5}},"22":{"start":{"line":106,"column":25},"end":{"line":106,"column":54}},"23":{"start":{"line":107,"column":6},"end":{"line":111,"column":14}},"24":{"start":{"line":113,"column":30},"end":{"line":113,"column":46}},"25":{"start":{"line":114,"column":24},"end":{"line":114,"column":48}},"26":{"start":{"line":115,"column":27},"end":{"line":115,"column":84}},"27":{"start":{"line":116,"column":28},"end":{"line":116,"column":67}},"28":{"start":{"line":117,"column":26},"end":{"line":117,"column":65}},"29":{"start":{"line":118,"column":19},"end":{"line":125,"column":5}},"30":{"start":{"line":126,"column":4},"end":{"line":139,"column":12}},"31":{"start":{"line":141,"column":4},"end":{"line":141,"column":47}},"32":{"start":{"line":142,"column":4},"end":{"line":146,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":66},"end":{"line":7,"column":67}},"loc":{"start":{"line":7,"column":80},"end":{"line":18,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":82,"column":33},"end":{"line":82,"column":34}},"loc":{"start":{"line":82,"column":46},"end":{"line":148,"column":1}},"line":82}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":2},"end":{"line":8,"column":22}},"type":"if","locations":[{"start":{"line":8,"column":2},"end":{"line":8,"column":22}},{"start":{},"end":{}}],"line":8},"1":{"loc":{"start":{"line":88,"column":4},"end":{"line":94,"column":5}},"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":94,"column":5}},{"start":{},"end":{}}],"line":88},"2":{"loc":{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},{"start":{},"end":{}}],"line":97},"3":{"loc":{"start":{"line":105,"column":4},"end":{"line":112,"column":5}},"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":112,"column":5}},{"start":{},"end":{}}],"line":105},"4":{"loc":{"start":{"line":110,"column":17},"end":{"line":110,"column":62}},"type":"binary-expr","locations":[{"start":{"line":110,"column":17},"end":{"line":110,"column":36}},{"start":{"line":110,"column":40},"end":{"line":110,"column":62}}],"line":110},"5":{"loc":{"start":{"line":123,"column":6},"end":{"line":123,"column":25}},"type":"binary-expr","locations":[{"start":{"line":123,"column":6},"end":{"line":123,"column":15}},{"start":{"line":123,"column":19},"end":{"line":123,"column":25}}],"line":123},"6":{"loc":{"start":{"line":145,"column":15},"end":{"line":145,"column":80}},"type":"cond-expr","locations":[{"start":{"line":145,"column":40},"end":{"line":145,"column":53}},{"start":{"line":145,"column":56},"end":{"line":145,"column":80}}],"line":145}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/files/upload.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport {\n  FileProcessingResponseSchema,\n  SupportedFileTypes,\n  type FileProcessingResponse\n} from '../../../schemas/file-upload.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// メタデータのバリデーションスキーマ\nconst MetadataSchema = z.string().nullable().optional().transform((val, ctx) => {\n  if (!val) return {}\n  try {\n    return JSON.parse(val)\n  } catch {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: 'メタデータのJSON形式が不正です'\n    })\n    return z.NEVER\n  }\n})\n\n// ファイルアップロードルート定義\nexport const uploadFileRoute = createRoute({\n  method: 'post',\n  path: '/files/upload',\n  request: {\n    body: {\n      content: {\n        'multipart/form-data': {\n          schema: z.object({\n            file: z.instanceof(File),\n            namespace: z.string().optional(),\n            metadata: z.string().optional() // JSON string\n          })\n        }\n      }\n    }\n  },\n  responses: {\n    202: {\n      content: {\n        'application/json': {\n          schema: FileProcessingResponseSchema\n        }\n      },\n      description: 'ファイル処理が開始されました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    413: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ファイルサイズが大きすぎます'\n    },\n    415: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サポートされていないファイル形式'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Files'],\n  summary: 'ファイルアップロード',\n  description: 'PDFまたは画像ファイルをアップロードして、内容を抽出しベクトル化します'\n})\n\n// ファイルアップロードハンドラー\nexport const uploadFileHandler: RouteHandler<typeof uploadFileRoute, EnvType> = async (c) => {\n  try {\n    const formData = await c.req.formData()\n    const file = formData.get('file') as File\n    const namespace = formData.get('namespace') as string | null\n    const metadataStr = formData.get('metadata') as string | null\n\n    // ファイルサイズチェック (10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      return c.json<ErrorResponse, 413>({\n        success: false,\n        error: 'Payload Too Large',\n        message: 'ファイルサイズは10MB以下にしてください'\n      }, 413)\n    }\n\n    // ファイルタイプチェック\n    const fileType = file.type\n    const supportedTypes = ['application/pdf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp']\n    if (!supportedTypes.includes(fileType)) {\n      return c.json<ErrorResponse, 415>({\n        success: false,\n        error: 'Unsupported Media Type',\n        message: `サポートされていないファイル形式です: ${fileType}`\n      }, 415)\n    }\n\n    // メタデータのパースとバリデーション\n    const parseResult = MetadataSchema.safeParse(metadataStr)\n    if (!parseResult.success) {\n      const firstError = parseResult.error.errors?.[0]\n      return c.json<ErrorResponse, 400>({\n        success: false,\n        error: 'Bad Request',\n        message: firstError?.message || 'メタデータのバリデーションに失敗しました'\n      }, 400)\n    }\n    const validatedMetadata = parseResult.data\n\n    // ファイルをBase64エンコード\n    const arrayBuffer = await file.arrayBuffer()\n    const fileDataBase64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)))\n\n    // VectorManagerを使用してファイルを処理\n    const vectorManagerId = c.env.VECTOR_CACHE.idFromName('global')\n    const vectorManager = c.env.VECTOR_CACHE.get(vectorManagerId)\n    \n    const result = await vectorManager.processFileAsync(\n      fileDataBase64,\n      file.name,\n      file.type,\n      file.size,\n      namespace || undefined,\n      validatedMetadata\n    )\n\n    return c.json<FileProcessingResponse, 202>({\n      success: true,\n      data: {\n        jobId: result.jobId,\n        workflowId: result.workflowId,\n        status: result.status,\n        fileInfo: {\n          name: file.name,\n          type: file.type,\n          size: file.size\n        },\n        message: 'ファイルの処理を開始しました'\n      }\n    }, 202)\n  } catch (error) {\n    console.error('File upload error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ファイルアップロード中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c47cd2920d12da969b2867d3a6799bc6708f85ff"},"c:/Users/mtama/node/vector-db/src/routes/api/files/status.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/files/status.ts","statementMap":{"0":{"start":{"line":5,"column":31},"end":{"line":50,"column":2}},"1":{"start":{"line":51,"column":33},"end":{"line":99,"column":1}},"2":{"start":{"line":52,"column":2},"end":{"line":98,"column":3}},"3":{"start":{"line":53,"column":27},"end":{"line":53,"column":47}},"4":{"start":{"line":54,"column":28},"end":{"line":54,"column":67}},"5":{"start":{"line":55,"column":26},"end":{"line":55,"column":65}},"6":{"start":{"line":56,"column":16},"end":{"line":56,"column":68}},"7":{"start":{"line":57,"column":4},"end":{"line":63,"column":5}},"8":{"start":{"line":58,"column":6},"end":{"line":62,"column":14}},"9":{"start":{"line":64,"column":19},"end":{"line":64,"column":82}},"10":{"start":{"line":66,"column":4},"end":{"line":74,"column":5}},"11":{"start":{"line":67,"column":6},"end":{"line":67,"column":31}},"12":{"start":{"line":68,"column":11},"end":{"line":74,"column":5}},"13":{"start":{"line":69,"column":6},"end":{"line":69,"column":33}},"14":{"start":{"line":70,"column":11},"end":{"line":74,"column":5}},"15":{"start":{"line":71,"column":6},"end":{"line":71,"column":30}},"16":{"start":{"line":73,"column":6},"end":{"line":73,"column":31}},"17":{"start":{"line":75,"column":4},"end":{"line":83,"column":12}},"18":{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},"19":{"start":{"line":86,"column":6},"end":{"line":90,"column":14}},"20":{"start":{"line":92,"column":4},"end":{"line":92,"column":47}},"21":{"start":{"line":93,"column":4},"end":{"line":97,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":51,"column":33},"end":{"line":51,"column":34}},"loc":{"start":{"line":51,"column":46},"end":{"line":99,"column":1}},"line":51}},"branchMap":{"0":{"loc":{"start":{"line":57,"column":4},"end":{"line":63,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":63,"column":5}},{"start":{},"end":{}}],"line":57},"1":{"loc":{"start":{"line":66,"column":4},"end":{"line":74,"column":5}},"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":74,"column":5}},{"start":{"line":68,"column":11},"end":{"line":74,"column":5}}],"line":66},"2":{"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":66}},"type":"binary-expr","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":35}},{"start":{"line":66,"column":39},"end":{"line":66,"column":66}}],"line":66},"3":{"loc":{"start":{"line":68,"column":11},"end":{"line":74,"column":5}},"type":"if","locations":[{"start":{"line":68,"column":11},"end":{"line":74,"column":5}},{"start":{"line":70,"column":11},"end":{"line":74,"column":5}}],"line":68},"4":{"loc":{"start":{"line":68,"column":15},"end":{"line":68,"column":73}},"type":"binary-expr","locations":[{"start":{"line":68,"column":15},"end":{"line":68,"column":41}},{"start":{"line":68,"column":45},"end":{"line":68,"column":73}}],"line":68},"5":{"loc":{"start":{"line":70,"column":11},"end":{"line":74,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":11},"end":{"line":74,"column":5}},{"start":{"line":72,"column":11},"end":{"line":74,"column":5}}],"line":70},"6":{"loc":{"start":{"line":70,"column":15},"end":{"line":70,"column":69}},"type":"binary-expr","locations":[{"start":{"line":70,"column":15},"end":{"line":70,"column":38}},{"start":{"line":70,"column":42},"end":{"line":70,"column":69}}],"line":70},"7":{"loc":{"start":{"line":80,"column":16},"end":{"line":80,"column":88}},"type":"cond-expr","locations":[{"start":{"line":80,"column":32},"end":{"line":80,"column":79}},{"start":{"line":80,"column":82},"end":{"line":80,"column":88}}],"line":80},"8":{"loc":{"start":{"line":81,"column":15},"end":{"line":81,"column":50}},"type":"binary-expr","locations":[{"start":{"line":81,"column":15},"end":{"line":81,"column":24}},{"start":{"line":81,"column":28},"end":{"line":81,"column":40}},{"start":{"line":81,"column":44},"end":{"line":81,"column":50}}],"line":81},"9":{"loc":{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},{"start":{},"end":{}}],"line":85},"10":{"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":69}},"type":"binary-expr","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":30}},{"start":{"line":85,"column":34},"end":{"line":85,"column":69}}],"line":85},"11":{"loc":{"start":{"line":96,"column":15},"end":{"line":96,"column":74}},"type":"cond-expr","locations":[{"start":{"line":96,"column":40},"end":{"line":96,"column":53}},{"start":{"line":96,"column":56},"end":{"line":96,"column":74}}],"line":96}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/files/status.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { FileProcessingResultSchema } from '../../../schemas/file-upload.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ファイル処理状況確認ルート定義\nexport const fileStatusRoute = createRoute({\n  method: 'get',\n  path: '/files/status/{workflowId}',\n  request: {\n    params: z.object({\n      workflowId: z.string().min(1)\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: z.object({\n            success: z.boolean(),\n            data: z.object({\n              workflowId: z.string(),\n              status: z.enum(['running', 'completed', 'failed', 'unknown']),\n              result: FileProcessingResultSchema.optional(),\n              error: z.string().optional()\n            })\n          })\n        }\n      },\n      description: '処理状況'\n    },\n    404: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ワークフローが見つかりません'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Files'],\n  summary: 'ファイル処理状況確認',\n  description: 'アップロードされたファイルの処理状況を確認します'\n})\n\n// ファイル処理状況確認ハンドラー\nexport const fileStatusHandler: RouteHandler<typeof fileStatusRoute, EnvType> = async (c) => {\n  try {\n    const { workflowId } = c.req.valid('param')\n    \n    // VectorManagerからジョブ情報を取得\n    const vectorManagerId = c.env.VECTOR_CACHE.idFromName('global')\n    const vectorManager = c.env.VECTOR_CACHE.get(vectorManagerId)\n    \n    // ジョブ情報を取得\n    const job = await vectorManager.getFileProcessingJob(workflowId)\n    if (!job) {\n      return c.json<ErrorResponse, 404>({\n        success: false,\n        error: 'Not Found',\n        message: 'ジョブが見つかりません'\n      }, 404)\n    }\n    \n    // Workflowの状態を取得\n    const status = await vectorManager.getFileProcessingWorkflowStatus(workflowId)\n    \n    // ステータスをマッピング\n    let mappedStatus: 'running' | 'completed' | 'failed' | 'unknown'\n    if (job.status === 'processing' || status.status === 'running') {\n      mappedStatus = 'running'\n    } else if (job.status === 'completed' || status.status === 'complete') {\n      mappedStatus = 'completed'\n    } else if (job.status === 'failed' || status.status === 'errored') {\n      mappedStatus = 'failed'\n    } else {\n      mappedStatus = 'unknown'\n    }\n    \n    return c.json({\n      success: true,\n      data: {\n        workflowId,\n        status: mappedStatus,\n        result: status.output ? FileProcessingResultSchema.parse(status.output) : undefined,\n        error: job.error || status.error || undefined\n      }\n    }, 200)\n  } catch (error) {\n    // Workflowが見つからない場合\n    if (error instanceof Error && error.message.includes('not found')) {\n      return c.json<ErrorResponse, 404>({\n        success: false,\n        error: 'Not Found',\n        message: 'ワークフローが見つかりません'\n      }, 404)\n    }\n    \n    console.error('File status error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '状況確認中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB,SAAS,kCAAkC;AAC3C,SAAS,2BAA+C;AAQjD,aAAM,kBAAkB,YAAY;AAAA,EACzC,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,QAAQ,EAAE,OAAO;AAAA,MACf,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,EAAE,OAAO;AAAA,YACf,SAAS,EAAE,QAAQ;AAAA,YACnB,MAAM,EAAE,OAAO;AAAA,cACb,YAAY,EAAE,OAAO;AAAA,cACrB,QAAQ,EAAE,KAAK,CAAC,WAAW,aAAa,UAAU,SAAS,CAAC;AAAA,cAC5D,QAAQ,2BAA2B,SAAS;AAAA,cAC5C,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,YAC7B,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,OAAO;AAAA,EACd,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,oBAAmE,OAAO,MAAM;AAC3F,MAAI;AACF,UAAM,EAAE,WAAW,IAAI,EAAE,IAAI,MAAM,OAAO;AAG1C,UAAM,kBAAkB,EAAE,IAAI,aAAa,WAAW,QAAQ;AAC9D,UAAM,gBAAgB,EAAE,IAAI,aAAa,IAAI,eAAe;AAG5D,UAAM,MAAM,MAAM,cAAc,qBAAqB,UAAU;AAC/D,QAAI,CAAC,KAAK;AACR,aAAO,EAAE,KAAyB;AAAA,QAChC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,GAAG,GAAG;AAAA,IACR;AAGA,UAAM,SAAS,MAAM,cAAc,gCAAgC,UAAU;AAG7E,QAAI;AACJ,QAAI,IAAI,WAAW,gBAAgB,OAAO,WAAW,WAAW;AAC9D,qBAAe;AAAA,IACjB,WAAW,IAAI,WAAW,eAAe,OAAO,WAAW,YAAY;AACrE,qBAAe;AAAA,IACjB,WAAW,IAAI,WAAW,YAAY,OAAO,WAAW,WAAW;AACjE,qBAAe;AAAA,IACjB,OAAO;AACL,qBAAe;AAAA,IACjB;AAEA,WAAO,EAAE,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,QACJ;AAAA,QACA,QAAQ;AAAA,QACR,QAAQ,OAAO,SAAS,2BAA2B,MAAM,OAAO,MAAM,IAAI;AAAA,QAC1E,OAAO,IAAI,SAAS,OAAO,SAAS;AAAA,MACtC;AAAA,IACF,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AAEd,QAAI,iBAAiB,SAAS,MAAM,QAAQ,SAAS,WAAW,GAAG;AACjE,aAAO,EAAE,KAAyB;AAAA,QAChC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,GAAG,GAAG;AAAA,IACR;AAEA,YAAQ,MAAM,sBAAsB,KAAK;AACzC,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3000c7ac8c1acd740cddc1bfc82f2ec6a39af031"},"c:/Users/mtama/node/vector-db/src/routes/api/files/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/files/index.ts","statementMap":{"0":{"start":{"line":4,"column":2},"end":{"line":4,"column":50}},"1":{"start":{"line":5,"column":2},"end":{"line":5,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":15},"end":{"line":3,"column":16}},"loc":{"start":{"line":3,"column":24},"end":{"line":6,"column":1}},"line":3}},"branchMap":{},"s":{"0":2,"1":2},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/files/index.ts"],"sourcesContent":["import type { OpenAPIHono } from '@hono/zod-openapi'\nimport { uploadFileRoute, uploadFileHandler } from './upload'\nimport { fileStatusRoute, fileStatusHandler } from './status'\n\n// エクスポート用関数\nexport default (app: OpenAPIHono<{ Bindings: Env }>) => {\n  app.openapi(uploadFileRoute, uploadFileHandler)\n  app.openapi(fileStatusRoute, fileStatusHandler)\n}"],"mappings":"AACA,SAAS,iBAAiB,yBAAyB;AACnD,SAAS,iBAAiB,yBAAyB;AAGnD,eAAe,CAAC,QAAwC;AACtD,MAAI,QAAQ,iBAAiB,iBAAiB;AAC9C,MAAI,QAAQ,iBAAiB,iBAAiB;AAChD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6b5bc70a5160fedb3d64e81459959a03579c189d"},"c:/Users/mtama/node/vector-db/src/schemas/notion.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/notion.schema.ts","statementMap":{"0":{"start":{"line":2,"column":32},"end":{"line":5,"column":2}},"1":{"start":{"line":6,"column":34},"end":{"line":23,"column":2}},"2":{"start":{"line":24,"column":32},"end":{"line":39,"column":2}},"3":{"start":{"line":40,"column":37},"end":{"line":72,"column":2}},"4":{"start":{"line":73,"column":30},"end":{"line":91,"column":2}},"5":{"start":{"line":92,"column":33},"end":{"line":108,"column":16}},"6":{"start":{"line":109,"column":41},"end":{"line":111,"column":2}},"7":{"start":{"line":112,"column":49},"end":{"line":115,"column":2}},"8":{"start":{"line":116,"column":43},"end":{"line":121,"column":2}},"9":{"start":{"line":122,"column":40},"end":{"line":126,"column":2}},"10":{"start":{"line":127,"column":45},"end":{"line":135,"column":2}},"11":{"start":{"line":136,"column":40},"end":{"line":145,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/notion.schema.ts"],"sourcesContent":["import { z } from 'zod'\n\n// Notion User\nexport const NotionUserSchema = z.object({\n  object: z.literal('user'),\n  id: z.string()\n})\n\n// Notion Parent\nexport const NotionParentSchema = z.discriminatedUnion('type', [\n  z.object({\n    type: z.literal('database_id'),\n    database_id: z.string()\n  }),\n  z.object({\n    type: z.literal('page_id'),\n    page_id: z.string()\n  }),\n  z.object({\n    type: z.literal('workspace'),\n    workspace: z.literal(true)\n  }),\n  z.object({\n    type: z.literal('block_id'),\n    block_id: z.string()\n  })\n])\n\n// Notion Page\nexport const NotionPageSchema = z.object({\n  object: z.literal('page'),\n  id: z.string(),\n  created_time: z.string(),\n  last_edited_time: z.string(),\n  created_by: NotionUserSchema,\n  last_edited_by: NotionUserSchema,\n  cover: z.any().nullable(),\n  icon: z.any().nullable(),\n  parent: NotionParentSchema,\n  archived: z.boolean(),\n  in_trash: z.boolean(),\n  properties: z.record(z.string(), z.any()),\n  url: z.string(),\n  public_url: z.string().nullable().optional()\n})\n\n// Notion Block Types\nexport const NotionBlockTypeSchema = z.enum([\n  'paragraph',\n  'heading_1',\n  'heading_2', \n  'heading_3',\n  'bulleted_list_item',\n  'numbered_list_item',\n  'to_do',\n  'toggle',\n  'child_page',\n  'child_database',\n  'embed',\n  'image',\n  'video',\n  'file',\n  'pdf',\n  'bookmark',\n  'callout',\n  'quote',\n  'equation',\n  'divider',\n  'table_of_contents',\n  'column',\n  'column_list',\n  'link_preview',\n  'synced_block',\n  'template',\n  'link_to_page',\n  'table',\n  'table_row',\n  'code',\n  'unsupported'\n])\n\n// Rich Text\nexport const RichTextSchema = z.object({\n  type: z.enum(['text', 'mention', 'equation']),\n  text: z.object({\n    content: z.string(),\n    link: z.object({ url: z.string() }).nullable().optional()\n  }).optional(),\n  mention: z.any().optional(),\n  equation: z.any().optional(),\n  annotations: z.object({\n    bold: z.boolean(),\n    italic: z.boolean(),\n    strikethrough: z.boolean(),\n    underline: z.boolean(),\n    code: z.boolean(),\n    color: z.string()\n  }).optional(),\n  plain_text: z.string(),\n  href: z.string().nullable().optional()\n})\n\n// Notion Block\nexport const NotionBlockSchema = z.object({\n  object: z.literal('block'),\n  id: z.string(),\n  parent: z.object({\n    type: z.string(),\n    page_id: z.string().optional(),\n    block_id: z.string().optional()\n  }),\n  created_time: z.string(),\n  last_edited_time: z.string(),\n  created_by: NotionUserSchema,\n  last_edited_by: NotionUserSchema,\n  has_children: z.boolean(),\n  archived: z.boolean(),\n  in_trash: z.boolean(),\n  type: NotionBlockTypeSchema\n}).passthrough() // Allow block type specific properties\n\n// API Request Schemas\nexport const RetrievePageRequestSchema = z.object({\n  pageId: z.string()\n})\n\nexport const RetrievePagePropertyRequestSchema = z.object({\n  pageId: z.string(),\n  propertyId: z.string()\n})\n\nexport const SyncNotionPageRequestSchema = z.object({\n  pageId: z.string(),\n  includeBlocks: z.boolean().default(true),\n  includeProperties: z.boolean().default(true),\n  namespace: z.string().optional()\n})\n\n// Response Schemas\nexport const NotionPageResponseSchema = z.object({\n  success: z.boolean(),\n  data: NotionPageSchema.optional(),\n  message: z.string().optional()\n})\n\nexport const NotionBlockListResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    blocks: z.array(NotionBlockSchema),\n    has_more: z.boolean(),\n    next_cursor: z.string().nullable()\n  }).optional(),\n  message: z.string().optional()\n})\n\nexport const NotionSyncResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    pageId: z.string(),\n    status: z.string(),\n    message: z.string()\n  }).optional(),\n  message: z.string().optional()\n})\n\n// Types\nexport type NotionPage = z.infer<typeof NotionPageSchema>\nexport type NotionBlock = z.infer<typeof NotionBlockSchema>\nexport type NotionBlockType = z.infer<typeof NotionBlockTypeSchema>\nexport type RichText = z.infer<typeof RichTextSchema>\nexport type RetrievePageRequest = z.infer<typeof RetrievePageRequestSchema>\nexport type RetrievePagePropertyRequest = z.infer<typeof RetrievePagePropertyRequestSchema>\nexport type SyncNotionPageRequest = z.infer<typeof SyncNotionPageRequestSchema>\nexport type NotionPageResponse = z.infer<typeof NotionPageResponseSchema>\nexport type NotionBlockListResponse = z.infer<typeof NotionBlockListResponseSchema>\nexport type NotionSyncResponse = z.infer<typeof NotionSyncResponseSchema>"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"adac71fefec041c0084b2ab159f3d8e84205ee93"},"c:/Users/mtama/node/vector-db/src/db/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/db/index.ts","statementMap":{"0":{"start":{"line":4,"column":2},"end":{"line":4,"column":37}}},"fnMap":{"0":{"name":"getDb","decl":{"start":{"line":3,"column":16},"end":{"line":3,"column":21}},"loc":{"start":{"line":3,"column":27},"end":{"line":5,"column":1}},"line":3}},"branchMap":{},"s":{"0":0},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/db/index.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/d1'\nimport * as schema from './schema'\n\nexport function getDb(env: Env) {\n  return drizzle(env.DB, { schema })\n}\n\nexport * from './schema'"],"mappings":"AAAA,SAAS,eAAe;AACxB,YAAY,YAAY;AAEjB,gBAAS,MAAM,KAAU;AAC9B,SAAO,QAAQ,IAAI,IAAI,EAAE,OAAO,CAAC;AACnC;AAEA,cAAc;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"48baea72a02b2f0689a5432009802a96493c3fd3"},"c:/Users/mtama/node/vector-db/src/services/notion.service.ts":{"path":"c:/Users/mtama/node/vector-db/src/services/notion.service.ts","statementMap":{"0":{"start":{"line":11,"column":4},"end":{"line":11,"column":19}},"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":35}},"2":{"start":{"line":15,"column":4},"end":{"line":15,"column":27}},"3":{"start":{"line":19,"column":4},"end":{"line":34,"column":5}},"4":{"start":{"line":20,"column":23},"end":{"line":25,"column":8}},"5":{"start":{"line":26,"column":6},"end":{"line":29,"column":7}},"6":{"start":{"line":27,"column":8},"end":{"line":27,"column":49}},"7":{"start":{"line":27,"column":37},"end":{"line":27,"column":49}},"8":{"start":{"line":28,"column":8},"end":{"line":28,"column":64}},"9":{"start":{"line":30,"column":6},"end":{"line":30,"column":35}},"10":{"start":{"line":32,"column":6},"end":{"line":32,"column":64}},"11":{"start":{"line":33,"column":6},"end":{"line":33,"column":18}},"12":{"start":{"line":38,"column":19},"end":{"line":38,"column":21}},"13":{"start":{"line":39,"column":17},"end":{"line":39,"column":21}},"14":{"start":{"line":40,"column":4},"end":{"line":62,"column":5}},"15":{"start":{"line":41,"column":6},"end":{"line":57,"column":23}},"16":{"start":{"line":42,"column":20},"end":{"line":42,"column":82}},"17":{"start":{"line":43,"column":8},"end":{"line":43,"column":68}},"18":{"start":{"line":43,"column":20},"end":{"line":43,"column":68}},"19":{"start":{"line":44,"column":8},"end":{"line":44,"column":52}},"20":{"start":{"line":45,"column":25},"end":{"line":50,"column":10}},"21":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"22":{"start":{"line":52,"column":10},"end":{"line":52,"column":66}},"23":{"start":{"line":54,"column":21},"end":{"line":54,"column":42}},"24":{"start":{"line":55,"column":8},"end":{"line":55,"column":37}},"25":{"start":{"line":56,"column":8},"end":{"line":56,"column":57}},"26":{"start":{"line":58,"column":6},"end":{"line":58,"column":20}},"27":{"start":{"line":60,"column":6},"end":{"line":60,"column":66}},"28":{"start":{"line":61,"column":6},"end":{"line":61,"column":18}},"29":{"start":{"line":66,"column":4},"end":{"line":83,"column":5}},"30":{"start":{"line":67,"column":23},"end":{"line":75,"column":7}},"31":{"start":{"line":76,"column":6},"end":{"line":78,"column":7}},"32":{"start":{"line":77,"column":8},"end":{"line":77,"column":64}},"33":{"start":{"line":79,"column":6},"end":{"line":79,"column":35}},"34":{"start":{"line":81,"column":6},"end":{"line":81,"column":68}},"35":{"start":{"line":82,"column":6},"end":{"line":82,"column":18}},"36":{"start":{"line":87,"column":20},"end":{"line":102,"column":5}},"37":{"start":{"line":103,"column":4},"end":{"line":106,"column":7}},"38":{"start":{"line":110,"column":4},"end":{"line":110,"column":36}},"39":{"start":{"line":110,"column":29},"end":{"line":110,"column":36}},"40":{"start":{"line":111,"column":22},"end":{"line":128,"column":7}},"41":{"start":{"line":111,"column":52},"end":{"line":128,"column":5}},"42":{"start":{"line":129,"column":4},"end":{"line":134,"column":5}},"43":{"start":{"line":130,"column":6},"end":{"line":133,"column":9}},"44":{"start":{"line":138,"column":28},"end":{"line":138,"column":54}},"45":{"start":{"line":139,"column":4},"end":{"line":158,"column":5}},"46":{"start":{"line":140,"column":25},"end":{"line":140,"column":40}},"47":{"start":{"line":141,"column":27},"end":{"line":141,"column":44}},"48":{"start":{"line":142,"column":24},"end":{"line":142,"column":71}},"49":{"start":{"line":143,"column":26},"end":{"line":143,"column":80}},"50":{"start":{"line":144,"column":26},"end":{"line":153,"column":7}},"51":{"start":{"line":154,"column":6},"end":{"line":157,"column":9}},"52":{"start":{"line":162,"column":24},"end":{"line":168,"column":5}},"53":{"start":{"line":169,"column":4},"end":{"line":169,"column":68}},"54":{"start":{"line":173,"column":19},"end":{"line":173,"column":102}},"55":{"start":{"line":174,"column":4},"end":{"line":174,"column":29}},"56":{"start":{"line":178,"column":23},"end":{"line":178,"column":25}},"57":{"start":{"line":179,"column":4},"end":{"line":181,"column":5}},"58":{"start":{"line":180,"column":6},"end":{"line":180,"column":66}},"59":{"start":{"line":182,"column":22},"end":{"line":182,"column":92}},"60":{"start":{"line":183,"column":4},"end":{"line":189,"column":5}},"61":{"start":{"line":184,"column":29},"end":{"line":184,"column":59}},"62":{"start":{"line":185,"column":6},"end":{"line":187,"column":7}},"63":{"start":{"line":186,"column":8},"end":{"line":186,"column":57}},"64":{"start":{"line":188,"column":6},"end":{"line":188,"column":34}},"65":{"start":{"line":190,"column":4},"end":{"line":192,"column":5}},"66":{"start":{"line":191,"column":6},"end":{"line":191,"column":50}},"67":{"start":{"line":193,"column":4},"end":{"line":193,"column":27}},"68":{"start":{"line":197,"column":4},"end":{"line":233,"column":5}},"69":{"start":{"line":198,"column":25},"end":{"line":200,"column":7}},"70":{"start":{"line":201,"column":6},"end":{"line":203,"column":7}},"71":{"start":{"line":202,"column":8},"end":{"line":202,"column":55}},"72":{"start":{"line":204,"column":6},"end":{"line":211,"column":7}},"73":{"start":{"line":205,"column":8},"end":{"line":210,"column":10}},"74":{"start":{"line":212,"column":23},"end":{"line":220,"column":8}},"75":{"start":{"line":221,"column":6},"end":{"line":223,"column":7}},"76":{"start":{"line":222,"column":8},"end":{"line":222,"column":64}},"77":{"start":{"line":224,"column":19},"end":{"line":224,"column":40}},"78":{"start":{"line":225,"column":6},"end":{"line":229,"column":8}},"79":{"start":{"line":226,"column":47},"end":{"line":226,"column":69}},"80":{"start":{"line":231,"column":6},"end":{"line":231,"column":66}},"81":{"start":{"line":232,"column":6},"end":{"line":232,"column":18}},"82":{"start":{"line":237,"column":4},"end":{"line":237,"column":125}},"83":{"start":{"line":241,"column":4},"end":{"line":241,"column":31}},"84":{"start":{"line":241,"column":21},"end":{"line":241,"column":31}},"85":{"start":{"line":242,"column":4},"end":{"line":247,"column":5}},"86":{"start":{"line":243,"column":23},"end":{"line":243,"column":55}},"87":{"start":{"line":244,"column":6},"end":{"line":246,"column":7}},"88":{"start":{"line":245,"column":8},"end":{"line":245,"column":66}},"89":{"start":{"line":245,"column":36},"end":{"line":245,"column":55}},"90":{"start":{"line":248,"column":4},"end":{"line":256,"column":5}},"91":{"start":{"line":249,"column":28},"end":{"line":249,"column":33}},"92":{"start":{"line":250,"column":22},"end":{"line":250,"column":45}},"93":{"start":{"line":251,"column":6},"end":{"line":255,"column":7}},"94":{"start":{"line":252,"column":8},"end":{"line":254,"column":20}},"95":{"start":{"line":253,"column":20},"end":{"line":253,"column":66}},"96":{"start":{"line":253,"column":37},"end":{"line":253,"column":56}},"97":{"start":{"line":257,"column":4},"end":{"line":257,"column":14}},"98":{"start":{"line":261,"column":26},"end":{"line":273,"column":5}},"99":{"start":{"line":274,"column":4},"end":{"line":274,"column":46}},"100":{"start":{"line":278,"column":25},"end":{"line":278,"column":42}},"101":{"start":{"line":279,"column":4},"end":{"line":279,"column":82}},"102":{"start":{"line":283,"column":4},"end":{"line":283,"column":29}},"103":{"start":{"line":283,"column":19},"end":{"line":283,"column":29}},"104":{"start":{"line":284,"column":4},"end":{"line":304,"column":5}},"105":{"start":{"line":287,"column":8},"end":{"line":287,"column":88}},"106":{"start":{"line":287,"column":52},"end":{"line":287,"column":71}},"107":{"start":{"line":289,"column":8},"end":{"line":289,"column":49}},"108":{"start":{"line":291,"column":8},"end":{"line":291,"column":43}},"109":{"start":{"line":293,"column":8},"end":{"line":293,"column":74}},"110":{"start":{"line":293,"column":49},"end":{"line":293,"column":55}},"111":{"start":{"line":295,"column":8},"end":{"line":295,"column":42}},"112":{"start":{"line":297,"column":8},"end":{"line":297,"column":76}},"113":{"start":{"line":297,"column":43},"end":{"line":297,"column":57}},"114":{"start":{"line":301,"column":8},"end":{"line":301,"column":45}},"115":{"start":{"line":303,"column":8},"end":{"line":303,"column":18}},"116":{"start":{"line":308,"column":26},"end":{"line":310,"column":5}},"117":{"start":{"line":309,"column":16},"end":{"line":309,"column":37}},"118":{"start":{"line":311,"column":4},"end":{"line":313,"column":5}},"119":{"start":{"line":312,"column":6},"end":{"line":312,"column":24}},"120":{"start":{"line":314,"column":4},"end":{"line":314,"column":87}},"121":{"start":{"line":314,"column":43},"end":{"line":314,"column":62}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":2},"end":{"line":10,"column":3}},"loc":{"start":{"line":10,"column":32},"end":{"line":13,"column":3}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":11},"end":{"line":16,"column":3}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":2},"end":{"line":18,"column":3}},"loc":{"start":{"line":18,"column":36},"end":{"line":35,"column":3}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":38},"end":{"line":63,"column":3}},"line":37},"4":{"name":"(anonymous_4)","decl":{"start":{"line":65,"column":2},"end":{"line":65,"column":3}},"loc":{"start":{"line":65,"column":56},"end":{"line":84,"column":3}},"line":65},"5":{"name":"(anonymous_5)","decl":{"start":{"line":86,"column":2},"end":{"line":86,"column":3}},"loc":{"start":{"line":86,"column":23},"end":{"line":107,"column":3}},"line":86},"6":{"name":"(anonymous_6)","decl":{"start":{"line":109,"column":2},"end":{"line":109,"column":3}},"loc":{"start":{"line":109,"column":35},"end":{"line":135,"column":3}},"line":109},"7":{"name":"(anonymous_7)","decl":{"start":{"line":111,"column":33},"end":{"line":111,"column":34}},"loc":{"start":{"line":111,"column":52},"end":{"line":128,"column":5}},"line":111},"8":{"name":"(anonymous_8)","decl":{"start":{"line":137,"column":2},"end":{"line":137,"column":3}},"loc":{"start":{"line":137,"column":47},"end":{"line":159,"column":3}},"line":137},"9":{"name":"(anonymous_9)","decl":{"start":{"line":161,"column":2},"end":{"line":161,"column":3}},"loc":{"start":{"line":161,"column":96},"end":{"line":170,"column":3}},"line":161},"10":{"name":"(anonymous_10)","decl":{"start":{"line":172,"column":2},"end":{"line":172,"column":3}},"loc":{"start":{"line":172,"column":24},"end":{"line":175,"column":3}},"line":172},"11":{"name":"(anonymous_11)","decl":{"start":{"line":177,"column":2},"end":{"line":177,"column":3}},"loc":{"start":{"line":177,"column":43},"end":{"line":194,"column":3}},"line":177},"12":{"name":"(anonymous_12)","decl":{"start":{"line":196,"column":2},"end":{"line":196,"column":3}},"loc":{"start":{"line":196,"column":37},"end":{"line":234,"column":3}},"line":196},"13":{"name":"(anonymous_13)","decl":{"start":{"line":226,"column":37},"end":{"line":226,"column":38}},"loc":{"start":{"line":226,"column":47},"end":{"line":226,"column":69}},"line":226},"14":{"name":"(anonymous_14)","decl":{"start":{"line":236,"column":2},"end":{"line":236,"column":3}},"loc":{"start":{"line":236,"column":26},"end":{"line":238,"column":3}},"line":236},"15":{"name":"(anonymous_15)","decl":{"start":{"line":240,"column":2},"end":{"line":240,"column":3}},"loc":{"start":{"line":240,"column":35},"end":{"line":258,"column":3}},"line":240},"16":{"name":"(anonymous_16)","decl":{"start":{"line":245,"column":28},"end":{"line":245,"column":29}},"loc":{"start":{"line":245,"column":36},"end":{"line":245,"column":55}},"line":245},"17":{"name":"(anonymous_17)","decl":{"start":{"line":253,"column":10},"end":{"line":253,"column":11}},"loc":{"start":{"line":253,"column":20},"end":{"line":253,"column":66}},"line":253},"18":{"name":"(anonymous_18)","decl":{"start":{"line":253,"column":29},"end":{"line":253,"column":30}},"loc":{"start":{"line":253,"column":37},"end":{"line":253,"column":56}},"line":253},"19":{"name":"(anonymous_19)","decl":{"start":{"line":260,"column":2},"end":{"line":260,"column":3}},"loc":{"start":{"line":260,"column":21},"end":{"line":275,"column":3}},"line":260},"20":{"name":"(anonymous_20)","decl":{"start":{"line":277,"column":2},"end":{"line":277,"column":3}},"loc":{"start":{"line":277,"column":30},"end":{"line":280,"column":3}},"line":277},"21":{"name":"(anonymous_21)","decl":{"start":{"line":282,"column":2},"end":{"line":282,"column":3}},"loc":{"start":{"line":282,"column":41},"end":{"line":305,"column":3}},"line":282},"22":{"name":"(anonymous_22)","decl":{"start":{"line":287,"column":44},"end":{"line":287,"column":45}},"loc":{"start":{"line":287,"column":52},"end":{"line":287,"column":71}},"line":287},"23":{"name":"(anonymous_23)","decl":{"start":{"line":293,"column":42},"end":{"line":293,"column":43}},"loc":{"start":{"line":293,"column":49},"end":{"line":293,"column":55}},"line":293},"24":{"name":"(anonymous_24)","decl":{"start":{"line":297,"column":36},"end":{"line":297,"column":37}},"loc":{"start":{"line":297,"column":43},"end":{"line":297,"column":57}},"line":297},"25":{"name":"(anonymous_25)","decl":{"start":{"line":307,"column":2},"end":{"line":307,"column":3}},"loc":{"start":{"line":307,"column":31},"end":{"line":315,"column":3}},"line":307},"26":{"name":"(anonymous_26)","decl":{"start":{"line":309,"column":6},"end":{"line":309,"column":7}},"loc":{"start":{"line":309,"column":16},"end":{"line":309,"column":37}},"line":309},"27":{"name":"(anonymous_27)","decl":{"start":{"line":314,"column":35},"end":{"line":314,"column":36}},"loc":{"start":{"line":314,"column":43},"end":{"line":314,"column":62}},"line":314}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":6},"end":{"line":29,"column":7}},"type":"if","locations":[{"start":{"line":26,"column":6},"end":{"line":29,"column":7}},{"start":{},"end":{}}],"line":26},"1":{"loc":{"start":{"line":27,"column":8},"end":{"line":27,"column":49}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":49}},{"start":{},"end":{}}],"line":27},"2":{"loc":{"start":{"line":43,"column":8},"end":{"line":43,"column":68}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":68}},{"start":{},"end":{}}],"line":43},"3":{"loc":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},{"start":{},"end":{}}],"line":51},"4":{"loc":{"start":{"line":56,"column":17},"end":{"line":56,"column":56}},"type":"cond-expr","locations":[{"start":{"line":56,"column":33},"end":{"line":56,"column":49}},{"start":{"line":56,"column":52},"end":{"line":56,"column":56}}],"line":56},"5":{"loc":{"start":{"line":76,"column":6},"end":{"line":78,"column":7}},"type":"if","locations":[{"start":{"line":76,"column":6},"end":{"line":78,"column":7}},{"start":{},"end":{}}],"line":76},"6":{"loc":{"start":{"line":94,"column":13},"end":{"line":94,"column":59}},"type":"cond-expr","locations":[{"start":{"line":94,"column":26},"end":{"line":94,"column":52}},{"start":{"line":94,"column":55},"end":{"line":94,"column":59}}],"line":94},"7":{"loc":{"start":{"line":95,"column":12},"end":{"line":95,"column":56}},"type":"cond-expr","locations":[{"start":{"line":95,"column":24},"end":{"line":95,"column":49}},{"start":{"line":95,"column":52},"end":{"line":95,"column":56}}],"line":95},"8":{"loc":{"start":{"line":101,"column":17},"end":{"line":101,"column":40}},"type":"binary-expr","locations":[{"start":{"line":101,"column":17},"end":{"line":101,"column":32}},{"start":{"line":101,"column":36},"end":{"line":101,"column":40}}],"line":101},"9":{"loc":{"start":{"line":110,"column":4},"end":{"line":110,"column":36}},"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":36}},{"start":{},"end":{}}],"line":110},"10":{"loc":{"start":{"line":123,"column":16},"end":{"line":123,"column":47}},"type":"binary-expr","locations":[{"start":{"line":123,"column":16},"end":{"line":123,"column":37}},{"start":{"line":123,"column":41},"end":{"line":123,"column":47}}],"line":123},"11":{"loc":{"start":{"line":143,"column":26},"end":{"line":143,"column":80}},"type":"cond-expr","locations":[{"start":{"line":143,"column":54},"end":{"line":143,"column":73}},{"start":{"line":143,"column":76},"end":{"line":143,"column":80}}],"line":143},"12":{"loc":{"start":{"line":174,"column":11},"end":{"line":174,"column":28}},"type":"binary-expr","locations":[{"start":{"line":174,"column":11},"end":{"line":174,"column":20}},{"start":{"line":174,"column":24},"end":{"line":174,"column":28}}],"line":174},"13":{"loc":{"start":{"line":177,"column":29},"end":{"line":177,"column":41}},"type":"default-arg","locations":[{"start":{"line":177,"column":39},"end":{"line":177,"column":41}}],"line":177},"14":{"loc":{"start":{"line":179,"column":4},"end":{"line":181,"column":5}},"type":"if","locations":[{"start":{"line":179,"column":4},"end":{"line":181,"column":5}},{"start":{},"end":{}}],"line":179},"15":{"loc":{"start":{"line":183,"column":4},"end":{"line":189,"column":5}},"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":189,"column":5}},{"start":{},"end":{}}],"line":183},"16":{"loc":{"start":{"line":185,"column":6},"end":{"line":187,"column":7}},"type":"if","locations":[{"start":{"line":185,"column":6},"end":{"line":187,"column":7}},{"start":{},"end":{}}],"line":185},"17":{"loc":{"start":{"line":190,"column":4},"end":{"line":192,"column":5}},"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":192,"column":5}},{"start":{},"end":{}}],"line":190},"18":{"loc":{"start":{"line":196,"column":23},"end":{"line":196,"column":35}},"type":"default-arg","locations":[{"start":{"line":196,"column":33},"end":{"line":196,"column":35}}],"line":196},"19":{"loc":{"start":{"line":199,"column":19},"end":{"line":199,"column":43}},"type":"binary-expr","locations":[{"start":{"line":199,"column":19},"end":{"line":199,"column":36}},{"start":{"line":199,"column":40},"end":{"line":199,"column":43}}],"line":199},"20":{"loc":{"start":{"line":201,"column":6},"end":{"line":203,"column":7}},"type":"if","locations":[{"start":{"line":201,"column":6},"end":{"line":203,"column":7}},{"start":{},"end":{}}],"line":201},"21":{"loc":{"start":{"line":204,"column":6},"end":{"line":211,"column":7}},"type":"if","locations":[{"start":{"line":204,"column":6},"end":{"line":211,"column":7}},{"start":{},"end":{}}],"line":204},"22":{"loc":{"start":{"line":221,"column":6},"end":{"line":223,"column":7}},"type":"if","locations":[{"start":{"line":221,"column":6},"end":{"line":223,"column":7}},{"start":{},"end":{}}],"line":221},"23":{"loc":{"start":{"line":241,"column":4},"end":{"line":241,"column":31}},"type":"if","locations":[{"start":{"line":241,"column":4},"end":{"line":241,"column":31}},{"start":{},"end":{}}],"line":241},"24":{"loc":{"start":{"line":242,"column":4},"end":{"line":247,"column":5}},"type":"if","locations":[{"start":{"line":242,"column":4},"end":{"line":247,"column":5}},{"start":{},"end":{}}],"line":242},"25":{"loc":{"start":{"line":244,"column":6},"end":{"line":246,"column":7}},"type":"if","locations":[{"start":{"line":244,"column":6},"end":{"line":246,"column":7}},{"start":{},"end":{}}],"line":244},"26":{"loc":{"start":{"line":245,"column":36},"end":{"line":245,"column":55}},"type":"binary-expr","locations":[{"start":{"line":245,"column":36},"end":{"line":245,"column":49}},{"start":{"line":245,"column":53},"end":{"line":245,"column":55}}],"line":245},"27":{"loc":{"start":{"line":248,"column":4},"end":{"line":256,"column":5}},"type":"if","locations":[{"start":{"line":248,"column":4},"end":{"line":256,"column":5}},{"start":{},"end":{}}],"line":248},"28":{"loc":{"start":{"line":251,"column":6},"end":{"line":255,"column":7}},"type":"if","locations":[{"start":{"line":251,"column":6},"end":{"line":255,"column":7}},{"start":{},"end":{}}],"line":251},"29":{"loc":{"start":{"line":251,"column":10},"end":{"line":251,"column":34}},"type":"binary-expr","locations":[{"start":{"line":251,"column":10},"end":{"line":251,"column":17}},{"start":{"line":251,"column":21},"end":{"line":251,"column":34}}],"line":251},"30":{"loc":{"start":{"line":253,"column":37},"end":{"line":253,"column":56}},"type":"binary-expr","locations":[{"start":{"line":253,"column":37},"end":{"line":253,"column":50}},{"start":{"line":253,"column":54},"end":{"line":253,"column":56}}],"line":253},"31":{"loc":{"start":{"line":279,"column":11},"end":{"line":279,"column":81}},"type":"cond-expr","locations":[{"start":{"line":279,"column":52},"end":{"line":279,"column":74}},{"start":{"line":279,"column":77},"end":{"line":279,"column":81}}],"line":279},"32":{"loc":{"start":{"line":279,"column":11},"end":{"line":279,"column":49}},"type":"binary-expr","locations":[{"start":{"line":279,"column":11},"end":{"line":279,"column":23}},{"start":{"line":279,"column":27},"end":{"line":279,"column":49}}],"line":279},"33":{"loc":{"start":{"line":283,"column":4},"end":{"line":283,"column":29}},"type":"if","locations":[{"start":{"line":283,"column":4},"end":{"line":283,"column":29}},{"start":{},"end":{}}],"line":283},"34":{"loc":{"start":{"line":284,"column":4},"end":{"line":304,"column":5}},"type":"switch","locations":[{"start":{"line":285,"column":6},"end":{"line":285,"column":19}},{"start":{"line":286,"column":6},"end":{"line":287,"column":88}},{"start":{"line":288,"column":6},"end":{"line":289,"column":49}},{"start":{"line":290,"column":6},"end":{"line":291,"column":43}},{"start":{"line":292,"column":6},"end":{"line":293,"column":74}},{"start":{"line":294,"column":6},"end":{"line":295,"column":42}},{"start":{"line":296,"column":6},"end":{"line":297,"column":76}},{"start":{"line":298,"column":6},"end":{"line":298,"column":17}},{"start":{"line":299,"column":6},"end":{"line":299,"column":19}},{"start":{"line":300,"column":6},"end":{"line":301,"column":45}},{"start":{"line":302,"column":6},"end":{"line":303,"column":18}}],"line":284},"35":{"loc":{"start":{"line":287,"column":15},"end":{"line":287,"column":87}},"type":"binary-expr","locations":[{"start":{"line":287,"column":15},"end":{"line":287,"column":81}},{"start":{"line":287,"column":85},"end":{"line":287,"column":87}}],"line":287},"36":{"loc":{"start":{"line":287,"column":52},"end":{"line":287,"column":71}},"type":"binary-expr","locations":[{"start":{"line":287,"column":52},"end":{"line":287,"column":65}},{"start":{"line":287,"column":69},"end":{"line":287,"column":71}}],"line":287},"37":{"loc":{"start":{"line":289,"column":15},"end":{"line":289,"column":48}},"type":"binary-expr","locations":[{"start":{"line":289,"column":15},"end":{"line":289,"column":42}},{"start":{"line":289,"column":46},"end":{"line":289,"column":48}}],"line":289},"38":{"loc":{"start":{"line":291,"column":15},"end":{"line":291,"column":42}},"type":"binary-expr","locations":[{"start":{"line":291,"column":15},"end":{"line":291,"column":36}},{"start":{"line":291,"column":40},"end":{"line":291,"column":42}}],"line":291},"39":{"loc":{"start":{"line":293,"column":15},"end":{"line":293,"column":73}},"type":"binary-expr","locations":[{"start":{"line":293,"column":15},"end":{"line":293,"column":67}},{"start":{"line":293,"column":71},"end":{"line":293,"column":73}}],"line":293},"40":{"loc":{"start":{"line":295,"column":15},"end":{"line":295,"column":41}},"type":"binary-expr","locations":[{"start":{"line":295,"column":15},"end":{"line":295,"column":35}},{"start":{"line":295,"column":39},"end":{"line":295,"column":41}}],"line":295},"41":{"loc":{"start":{"line":297,"column":15},"end":{"line":297,"column":75}},"type":"binary-expr","locations":[{"start":{"line":297,"column":15},"end":{"line":297,"column":69}},{"start":{"line":297,"column":73},"end":{"line":297,"column":75}}],"line":297},"42":{"loc":{"start":{"line":297,"column":43},"end":{"line":297,"column":57}},"type":"binary-expr","locations":[{"start":{"line":297,"column":43},"end":{"line":297,"column":49}},{"start":{"line":297,"column":53},"end":{"line":297,"column":57}}],"line":297},"43":{"loc":{"start":{"line":301,"column":15},"end":{"line":301,"column":44}},"type":"binary-expr","locations":[{"start":{"line":301,"column":15},"end":{"line":301,"column":38}},{"start":{"line":301,"column":42},"end":{"line":301,"column":44}}],"line":301},"44":{"loc":{"start":{"line":311,"column":4},"end":{"line":313,"column":5}},"type":"if","locations":[{"start":{"line":311,"column":4},"end":{"line":313,"column":5}},{"start":{},"end":{}}],"line":311},"45":{"loc":{"start":{"line":311,"column":8},"end":{"line":311,"column":46}},"type":"binary-expr","locations":[{"start":{"line":311,"column":8},"end":{"line":311,"column":22}},{"start":{"line":311,"column":26},"end":{"line":311,"column":46}}],"line":311},"46":{"loc":{"start":{"line":314,"column":11},"end":{"line":314,"column":86}},"type":"binary-expr","locations":[{"start":{"line":314,"column":11},"end":{"line":314,"column":72}},{"start":{"line":314,"column":76},"end":{"line":314,"column":86}}],"line":314},"47":{"loc":{"start":{"line":314,"column":43},"end":{"line":314,"column":62}},"type":"binary-expr","locations":[{"start":{"line":314,"column":43},"end":{"line":314,"column":56}},{"start":{"line":314,"column":60},"end":{"line":314,"column":62}}],"line":314}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0,0,0,0,0,0,0,0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/services/notion.service.ts"],"sourcesContent":["import { getDb } from '../db'\nimport type { \n  NotionPage, \n  NotionBlock,\n  NewNotionPage,\n  NewNotionBlock,\n  NewNotionPageProperty,\n  NewNotionVectorRelation\n} from '../db/schema'\nimport { \n  notionPages, \n  notionBlocks, \n  notionPageProperties,\n  notionVectorRelations,\n  notionSyncJobs\n} from '../db/schema'\nimport { eq } from 'drizzle-orm'\nimport type { NotionPage as NotionAPIPage, NotionBlock as NotionAPIBlock } from '../schemas/notion.schema'\n\nexport class NotionService {\n  constructor(\n    private env: Env,\n    private notionToken: string\n  ) {}\n\n  private get db() {\n    return getDb(this.env)\n  }\n\n  // Notion API から ページを取得\n  async fetchPageFromNotion(pageId: string): Promise<NotionAPIPage | null> {\n    try {\n      const response = await fetch(`https://api.notion.com/v1/pages/${pageId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.notionToken}`,\n          'Notion-Version': '2022-06-28'\n        }\n      })\n\n      if (!response.ok) {\n        if (response.status === 404) return null\n        throw new Error(`Notion API error: ${response.status}`)\n      }\n\n      return await response.json() as NotionAPIPage\n    } catch (error) {\n      console.error('Failed to fetch page from Notion:', error)\n      throw error\n    }\n  }\n\n  // Notion API から ブロックを取得\n  async fetchBlocksFromNotion(pageId: string): Promise<NotionAPIBlock[]> {\n    const blocks: NotionAPIBlock[] = []\n    let cursor: string | null = null\n\n    try {\n      do {\n        const url = new URL(`https://api.notion.com/v1/blocks/${pageId}/children`)\n        if (cursor) url.searchParams.append('start_cursor', cursor)\n        url.searchParams.append('page_size', '100')\n\n        const response = await fetch(url.toString(), {\n          headers: {\n            'Authorization': `Bearer ${this.notionToken}`,\n            'Notion-Version': '2022-06-28'\n          }\n        })\n\n        if (!response.ok) {\n          throw new Error(`Notion API error: ${response.status}`)\n        }\n\n        const data = await response.json() as {\n          results: NotionAPIBlock[]\n          has_more: boolean\n          next_cursor: string | null\n        }\n\n        blocks.push(...data.results)\n        cursor = data.has_more ? data.next_cursor : null\n      } while (cursor)\n\n      return blocks\n    } catch (error) {\n      console.error('Failed to fetch blocks from Notion:', error)\n      throw error\n    }\n  }\n\n  // Notion API から プロパティを取得\n  async fetchPagePropertyFromNotion(pageId: string, propertyId: string): Promise<any> {\n    try {\n      const response = await fetch(\n        `https://api.notion.com/v1/pages/${pageId}/properties/${propertyId}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.notionToken}`,\n            'Notion-Version': '2022-06-28'\n          }\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`Notion API error: ${response.status}`)\n      }\n\n      return await response.json()\n    } catch (error) {\n      console.error('Failed to fetch property from Notion:', error)\n      throw error\n    }\n  }\n\n  // ページをDBに保存\n  async savePage(page: NotionAPIPage): Promise<void> {\n    const newPage: NewNotionPage = {\n      id: page.id,\n      object: page.object,\n      createdTime: page.created_time,\n      lastEditedTime: page.last_edited_time,\n      createdById: page.created_by.id,\n      lastEditedById: page.last_edited_by.id,\n      cover: page.cover ? JSON.stringify(page.cover) : null,\n      icon: page.icon ? JSON.stringify(page.icon) : null,\n      parent: JSON.stringify(page.parent),\n      archived: page.archived,\n      inTrash: page.in_trash,\n      properties: JSON.stringify(page.properties),\n      url: page.url,\n      publicUrl: page.public_url || null\n    }\n\n    await this.db.insert(notionPages)\n      .values(newPage)\n      .onConflictDoUpdate({\n        target: notionPages.id,\n        set: newPage\n      })\n  }\n\n  // ブロックをDBに保存\n  async saveBlocks(pageId: string, blocks: NotionAPIBlock[]): Promise<void> {\n    if (blocks.length === 0) return\n\n    const newBlocks: NewNotionBlock[] = blocks.map((block, index) => ({\n      id: block.id,\n      pageId: pageId,\n      object: block.object,\n      type: block.type,\n      createdTime: block.created_time,\n      lastEditedTime: block.last_edited_time,\n      createdById: block.created_by.id,\n      lastEditedById: block.last_edited_by.id,\n      hasChildren: block.has_children,\n      archived: block.archived,\n      inTrash: block.in_trash,\n      parentId: block.parent.block_id || pageId,\n      parentType: block.parent.type,\n      content: JSON.stringify(block),\n      plainText: this.extractPlainTextFromBlock(block),\n      orderIndex: index\n    }))\n\n    // バッチで挿入\n    for (const block of newBlocks) {\n      await this.db.insert(notionBlocks)\n        .values(block)\n        .onConflictDoUpdate({\n          target: notionBlocks.id,\n          set: block\n        })\n    }\n  }\n\n  // プロパティをDBに保存\n  async savePageProperties(pageId: string, properties: Record<string, any>): Promise<void> {\n    const propertyEntries = Object.entries(properties)\n    \n    for (const [propertyName, propertyData] of propertyEntries) {\n      const propertyId = propertyData.id\n      const propertyType = propertyData.type\n      const plainText = this.extractPlainTextFromProperty(propertyData)\n      const numberValue = propertyType === 'number' ? propertyData.number : null\n\n      const newProperty: NewNotionPageProperty = {\n        id: `${pageId}_${propertyId}`,\n        pageId,\n        propertyId,\n        propertyName,\n        propertyType,\n        propertyValue: JSON.stringify(propertyData),\n        plainTextValue: plainText,\n        numberValue\n      }\n\n      await this.db.insert(notionPageProperties)\n        .values(newProperty)\n        .onConflictDoUpdate({\n          target: notionPageProperties.id,\n          set: newProperty\n        })\n    }\n  }\n\n  // ベクトル関連を保存\n  async saveVectorRelation(\n    notionPageId: string,\n    vectorId: string,\n    vectorNamespace: string,\n    contentType: string,\n    notionBlockId?: string\n  ): Promise<void> {\n    const newRelation: NewNotionVectorRelation = {\n      notionPageId,\n      notionBlockId,\n      vectorId,\n      vectorNamespace,\n      contentType\n    }\n\n    await this.db.insert(notionVectorRelations).values(newRelation)\n  }\n\n  // ページを取得（DBから）\n  async getPage(pageId: string): Promise<NotionPage | null> {\n    const result = await this.db.select()\n      .from(notionPages)\n      .where(eq(notionPages.id, pageId))\n      .limit(1)\n\n    return result[0] || null\n  }\n\n  // すべてのページを取得（DBから）\n  async getAllPagesFromCache(options: {\n    archived?: boolean\n    limit?: number\n  } = {}): Promise<NotionPage[]> {\n    const conditions = []\n    if (options.archived !== undefined) {\n      conditions.push(eq(notionPages.archived, options.archived))\n    }\n\n    const baseQuery = this.db\n      .select()\n      .from(notionPages)\n      .orderBy(notionPages.lastEditedTime)\n\n    if (conditions.length > 0) {\n      const queryWithWhere = baseQuery.where(conditions[0])\n      if (options.limit) {\n        return await queryWithWhere.limit(options.limit)\n      }\n      return await queryWithWhere\n    }\n\n    if (options.limit) {\n      return await baseQuery.limit(options.limit)\n    }\n    return await baseQuery\n  }\n\n  // Notion APIで全ページを検索\n  async searchAllPages(options: {\n    start_cursor?: string\n    page_size?: number\n    filter?: {\n      property: string\n      value: string\n    }\n  } = {}): Promise<{\n    results: NotionAPIPage[]\n    has_more: boolean\n    next_cursor: string | null\n  }> {\n    try {\n      const searchBody: any = {\n        page_size: options.page_size || 100\n      }\n\n      if (options.start_cursor) {\n        searchBody.start_cursor = options.start_cursor\n      }\n\n      if (options.filter) {\n        searchBody.filter = {\n          property: options.filter.property,\n          [options.filter.property]: {\n            equals: options.filter.value\n          }\n        }\n      }\n\n      const response = await fetch('https://api.notion.com/v1/search', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.notionToken}`,\n          'Notion-Version': '2022-06-28',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(searchBody)\n      })\n\n      if (!response.ok) {\n        throw new Error(`Notion API error: ${response.status}`)\n      }\n\n      const data = await response.json() as {\n        results: any[]\n        has_more: boolean\n        next_cursor: string | null\n      }\n      \n      return {\n        results: data.results.filter((item) => item.object === 'page'),\n        has_more: data.has_more,\n        next_cursor: data.next_cursor\n      }\n    } catch (error) {\n      console.error('Failed to search pages from Notion:', error)\n      throw error\n    }\n  }\n\n  // ブロックを取得（DBから）\n  async getBlocks(pageId: string): Promise<NotionBlock[]> {\n    return await this.db.select()\n      .from(notionBlocks)\n      .where(eq(notionBlocks.pageId, pageId))\n      .orderBy(notionBlocks.orderIndex)\n  }\n\n  // ブロックからプレーンテキストを抽出\n  private extractPlainTextFromBlock(block: NotionAPIBlock): string {\n    // Type-safe access without using any casting\n    if (!block.type) return ''\n    \n    // Handle blocks with rich_text property\n    if (this.hasRichText(block)) {\n      const richText = this.getRichTextFromBlock(block)\n      if (richText) {\n        return richText\n          .map((rt: any) => rt.plain_text || '')\n          .join('')\n      }\n    }\n\n    // Handle table_row blocks\n    if (block.type === 'table_row') {\n      const tableRowBlock = block as any\n      const content = tableRowBlock.table_row\n      if (content && content.cells) {\n        return content.cells\n          .map((cell: any[]) => \n            cell.map((rt: any) => rt.plain_text || '').join('')\n          )\n          .join(' ')\n      }\n    }\n\n    return ''\n  }\n\n  // Helper method to check if block has rich_text\n  private hasRichText(block: NotionAPIBlock): boolean {\n    const richTextTypes = [\n      'paragraph', 'heading_1', 'heading_2', 'heading_3',\n      'bulleted_list_item', 'numbered_list_item', 'to_do',\n      'toggle', 'quote', 'callout', 'code'\n    ]\n    return richTextTypes.includes(block.type)\n  }\n\n  // Helper method to get rich_text content from block\n  private getRichTextFromBlock(block: NotionAPIBlock): any[] | null {\n    const blockContent = (block as any)[block.type]\n    return blockContent && blockContent.rich_text ? blockContent.rich_text : null\n  }\n\n  // プロパティからプレーンテキストを抽出\n  private extractPlainTextFromProperty(property: any): string {\n    if (!property) return ''\n\n    switch (property.type) {\n      case 'title':\n      case 'rich_text':\n        return property[property.type]\n          ?.map((rt: any) => rt.plain_text || '')\n          .join('') || ''\n      \n      case 'number':\n        return property.number?.toString() || ''\n      \n      case 'select':\n        return property.select?.name || ''\n      \n      case 'multi_select':\n        return property.multi_select\n          ?.map((s: any) => s.name)\n          .join(', ') || ''\n      \n      case 'date':\n        return property.date?.start || ''\n      \n      case 'people':\n        return property.people\n          ?.map((p: any) => p.name || p.id)\n          .join(', ') || ''\n      \n      case 'url':\n      case 'email':\n      case 'phone_number':\n        return property[property.type] || ''\n      \n      default:\n        return ''\n    }\n  }\n\n  // ページタイトルを抽出\n  extractPageTitle(properties: Record<string, any>): string {\n    // タイトルプロパティを見つける\n    const titleProperty = Object.values(properties).find(\n      (prop: any) => prop.type === 'title'\n    ) as any\n\n    if (!titleProperty || !titleProperty.title) {\n      return 'Untitled'\n    }\n\n    return titleProperty.title\n      .map((rt: any) => rt.plain_text || '')\n      .join('') || 'Untitled'\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f980f10e836ef7dee173d4a1825515d066a0787e"},"c:/Users/mtama/node/vector-db/src/routes/api/notion/retrieve-page.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/notion/retrieve-page.ts","statementMap":{"0":{"start":{"line":6,"column":39},"end":{"line":54,"column":2}},"1":{"start":{"line":14,"column":58},"end":{"line":14,"column":72}},"2":{"start":{"line":55,"column":41},"end":{"line":129,"column":1}},"3":{"start":{"line":56,"column":2},"end":{"line":128,"column":3}},"4":{"start":{"line":57,"column":23},"end":{"line":57,"column":43}},"5":{"start":{"line":58,"column":26},"end":{"line":58,"column":46}},"6":{"start":{"line":59,"column":24},"end":{"line":59,"column":44}},"7":{"start":{"line":60,"column":4},"end":{"line":66,"column":5}},"8":{"start":{"line":61,"column":6},"end":{"line":65,"column":14}},"9":{"start":{"line":67,"column":26},"end":{"line":67,"column":63}},"10":{"start":{"line":68,"column":15},"end":{"line":68,"column":50}},"11":{"start":{"line":69,"column":4},"end":{"line":75,"column":5}},"12":{"start":{"line":70,"column":25},"end":{"line":70,"column":72}},"13":{"start":{"line":71,"column":6},"end":{"line":74,"column":7}},"14":{"start":{"line":72,"column":8},"end":{"line":72,"column":49}},"15":{"start":{"line":73,"column":8},"end":{"line":73,"column":51}},"16":{"start":{"line":76,"column":4},"end":{"line":82,"column":5}},"17":{"start":{"line":77,"column":6},"end":{"line":81,"column":14}},"18":{"start":{"line":83,"column":4},"end":{"line":120,"column":5}},"19":{"start":{"line":84,"column":25},"end":{"line":84,"column":29}},"20":{"start":{"line":85,"column":25},"end":{"line":85,"column":31}},"21":{"start":{"line":86,"column":23},"end":{"line":86,"column":29}},"22":{"start":{"line":87,"column":23},"end":{"line":102,"column":7}},"23":{"start":{"line":103,"column":6},"end":{"line":106,"column":14}},"24":{"start":{"line":108,"column":22},"end":{"line":108,"column":69}},"25":{"start":{"line":109,"column":6},"end":{"line":115,"column":7}},"26":{"start":{"line":110,"column":8},"end":{"line":114,"column":16}},"27":{"start":{"line":116,"column":6},"end":{"line":119,"column":14}},"28":{"start":{"line":122,"column":4},"end":{"line":122,"column":49}},"29":{"start":{"line":123,"column":4},"end":{"line":127,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":49},"end":{"line":14,"column":50}},"loc":{"start":{"line":14,"column":58},"end":{"line":14,"column":72}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":55,"column":41},"end":{"line":55,"column":42}},"loc":{"start":{"line":55,"column":54},"end":{"line":129,"column":1}},"line":55}},"branchMap":{"0":{"loc":{"start":{"line":60,"column":4},"end":{"line":66,"column":5}},"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":66,"column":5}},{"start":{},"end":{}}],"line":60},"1":{"loc":{"start":{"line":69,"column":4},"end":{"line":75,"column":5}},"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":75,"column":5}},{"start":{},"end":{}}],"line":69},"2":{"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":27}},"type":"binary-expr","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":13}},{"start":{"line":69,"column":17},"end":{"line":69,"column":27}}],"line":69},"3":{"loc":{"start":{"line":71,"column":6},"end":{"line":74,"column":7}},"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":74,"column":7}},{"start":{},"end":{}}],"line":71},"4":{"loc":{"start":{"line":76,"column":4},"end":{"line":82,"column":5}},"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":82,"column":5}},{"start":{},"end":{}}],"line":76},"5":{"loc":{"start":{"line":83,"column":4},"end":{"line":120,"column":5}},"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":120,"column":5}},{"start":{"line":107,"column":11},"end":{"line":120,"column":5}}],"line":83},"6":{"loc":{"start":{"line":83,"column":8},"end":{"line":83,"column":35}},"type":"binary-expr","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":12}},{"start":{"line":83,"column":16},"end":{"line":83,"column":35}}],"line":83},"7":{"loc":{"start":{"line":94,"column":15},"end":{"line":94,"column":69}},"type":"cond-expr","locations":[{"start":{"line":94,"column":34},"end":{"line":94,"column":62}},{"start":{"line":94,"column":65},"end":{"line":94,"column":69}}],"line":94},"8":{"loc":{"start":{"line":95,"column":14},"end":{"line":95,"column":66}},"type":"cond-expr","locations":[{"start":{"line":95,"column":32},"end":{"line":95,"column":59}},{"start":{"line":95,"column":62},"end":{"line":95,"column":66}}],"line":95},"9":{"loc":{"start":{"line":101,"column":20},"end":{"line":101,"column":50}},"type":"binary-expr","locations":[{"start":{"line":101,"column":20},"end":{"line":101,"column":40}},{"start":{"line":101,"column":44},"end":{"line":101,"column":50}}],"line":101},"10":{"loc":{"start":{"line":109,"column":6},"end":{"line":115,"column":7}},"type":"if","locations":[{"start":{"line":109,"column":6},"end":{"line":115,"column":7}},{"start":{},"end":{}}],"line":109},"11":{"loc":{"start":{"line":126,"column":15},"end":{"line":126,"column":75}},"type":"cond-expr","locations":[{"start":{"line":126,"column":40},"end":{"line":126,"column":53}},{"start":{"line":126,"column":56},"end":{"line":126,"column":75}}],"line":126}},"s":{"0":1,"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/notion/retrieve-page.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { NotionPageResponseSchema } from '../../../schemas/notion.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport { NotionService } from '../../../services/notion.service'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ページ取得ルート定義\nexport const retrieveNotionPageRoute = createRoute({\n  method: 'get',\n  path: '/notion/pages/{pageId}',\n  request: {\n    params: z.object({\n      pageId: z.string().min(1)\n    }),\n    query: z.object({\n      fromCache: z.string().optional().transform(val => val === 'true').default(false)\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: NotionPageResponseSchema\n        }\n      },\n      description: 'ページ情報'\n    },\n    401: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '認証エラー'\n    },\n    404: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ページが見つかりません'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Notion'],\n  summary: 'Notionページ取得',\n  description: 'Notion APIまたはキャッシュからページ情報を取得します'\n})\n\n// ページ取得ハンドラー\nexport const retrieveNotionPageHandler: RouteHandler<typeof retrieveNotionPageRoute, EnvType> = async (c) => {\n  try {\n    const { pageId } = c.req.valid('param')\n    const { fromCache } = c.req.valid('query')\n    \n    // Notion APIトークンを取得\n    const notionToken = c.env.NOTION_API_KEY\n    if (!notionToken) {\n      return c.json<ErrorResponse, 401>({\n        success: false,\n        error: 'Unauthorized',\n        message: 'Notion APIトークンが設定されていません'\n      }, 401)\n    }\n\n    // NotionServiceを使用してページを取得\n    const notionService = new NotionService(c.env, notionToken)\n    \n    // まずキャッシュから取得\n    let page = await notionService.getPage(pageId)\n    \n    // キャッシュにない場合はNotion APIから取得\n    if (!page && !fromCache) {\n      const notionPage = await notionService.fetchPageFromNotion(pageId)\n      if (notionPage) {\n        await notionService.savePage(notionPage)\n        page = await notionService.getPage(pageId)\n      }\n    }\n    \n    if (!page) {\n      return c.json<ErrorResponse, 404>({\n        success: false,\n        error: 'Not Found',\n        message: 'ページが見つかりません'\n      }, 404)\n    }\n\n    // データベース形式の場合は変換\n    if (page && !('object' in page)) {\n      // キャッシュからの場合 - NotionPage型\n      interface CachedPage {\n        id: string\n        createdTime: string\n        lastEditedTime: string\n        createdById: string\n        lastEditedById: string\n        cover: string | null\n        icon: string | null\n        parent: string\n        archived: boolean\n        inTrash: boolean\n        properties: string\n        url: string\n        publicUrl: string | null\n      }\n      \n      const cachedPage: CachedPage = page\n      \n      const objectType: 'page' = 'page'\n      const userType: 'user' = 'user'\n      \n      const pageData = {\n        object: objectType,\n        id: cachedPage.id,\n        created_time: cachedPage.createdTime,\n        last_edited_time: cachedPage.lastEditedTime,\n        created_by: { object: userType, id: cachedPage.createdById },\n        last_edited_by: { object: userType, id: cachedPage.lastEditedById },\n        cover: cachedPage.cover ? JSON.parse(cachedPage.cover) : null,\n        icon: cachedPage.icon ? JSON.parse(cachedPage.icon) : null,\n        parent: JSON.parse(cachedPage.parent),\n        archived: cachedPage.archived,\n        in_trash: cachedPage.inTrash,\n        properties: JSON.parse(cachedPage.properties),\n        url: cachedPage.url,\n        public_url: cachedPage.publicUrl || undefined\n      }\n      \n      return c.json({\n        success: true,\n        data: pageData\n      }, 200)\n    } else {\n      // Notion APIから直接取得したページ\n      const apiPage = await notionService.fetchPageFromNotion(pageId)\n      if (!apiPage) {\n        return c.json<ErrorResponse, 404>({\n          success: false,\n          error: 'Not Found',\n          message: 'ページが見つかりません'\n        }, 404)\n      }\n      \n      return c.json({\n        success: true,\n        data: apiPage\n      }, 200)\n    }\n  } catch (error) {\n    console.error('Retrieve page error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ページ取得中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a473129291a245d1c08923ec073f6a33999df694"},"c:/Users/mtama/node/vector-db/src/routes/api/notion/sync-page.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/notion/sync-page.ts","statementMap":{"0":{"start":{"line":5,"column":35},"end":{"line":49,"column":2}},"1":{"start":{"line":50,"column":37},"end":{"line":86,"column":1}},"2":{"start":{"line":51,"column":2},"end":{"line":85,"column":3}},"3":{"start":{"line":52,"column":23},"end":{"line":52,"column":43}},"4":{"start":{"line":53,"column":17},"end":{"line":53,"column":36}},"5":{"start":{"line":54,"column":24},"end":{"line":54,"column":44}},"6":{"start":{"line":55,"column":4},"end":{"line":61,"column":5}},"7":{"start":{"line":56,"column":6},"end":{"line":60,"column":14}},"8":{"start":{"line":62,"column":28},"end":{"line":62,"column":69}},"9":{"start":{"line":63,"column":26},"end":{"line":63,"column":67}},"10":{"start":{"line":64,"column":19},"end":{"line":68,"column":6}},"11":{"start":{"line":69,"column":4},"end":{"line":77,"column":12}},"12":{"start":{"line":79,"column":4},"end":{"line":79,"column":45}},"13":{"start":{"line":80,"column":4},"end":{"line":84,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":50,"column":37},"end":{"line":50,"column":38}},"loc":{"start":{"line":50,"column":50},"end":{"line":86,"column":1}},"line":50}},"branchMap":{"0":{"loc":{"start":{"line":55,"column":4},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":61,"column":5}},{"start":{},"end":{}}],"line":55},"1":{"loc":{"start":{"line":83,"column":15},"end":{"line":83,"column":77}},"type":"cond-expr","locations":[{"start":{"line":83,"column":40},"end":{"line":83,"column":53}},{"start":{"line":83,"column":56},"end":{"line":83,"column":77}}],"line":83}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/notion/sync-page.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { SyncNotionPageRequestSchema, NotionSyncResponseSchema } from '../../../schemas/notion.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ページ同期ルート定義\nexport const syncNotionPageRoute = createRoute({\n  method: 'post',\n  path: '/notion/pages/{pageId}/sync',\n  request: {\n    params: z.object({\n      pageId: z.string().min(1)\n    }),\n    body: {\n      content: {\n        'application/json': {\n          schema: SyncNotionPageRequestSchema.omit({ pageId: true })\n        }\n      }\n    }\n  },\n  responses: {\n    202: {\n      content: {\n        'application/json': {\n          schema: NotionSyncResponseSchema\n        }\n      },\n      description: '同期処理を開始しました'\n    },\n    401: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '認証エラー'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Notion'],\n  summary: 'Notionページ同期',\n  description: 'Notionページとそのコンテンツを同期し、ベクトル化します'\n})\n\n// ページ同期ハンドラー\nexport const syncNotionPageHandler: RouteHandler<typeof syncNotionPageRoute, EnvType> = async (c) => {\n  try {\n    const { pageId } = c.req.valid('param')\n    const body = c.req.valid('json')\n    \n    // Notion APIトークンを取得\n    const notionToken = c.env.NOTION_API_KEY\n    if (!notionToken) {\n      return c.json<ErrorResponse, 401>({\n        success: false,\n        error: 'Unauthorized',\n        message: 'Notion APIトークンが設定されていません'\n      }, 401)\n    }\n\n    // NotionManagerを使用して同期ジョブを作成\n    const notionManagerId = c.env.NOTION_MANAGER.idFromName('global')\n    const notionManager = c.env.NOTION_MANAGER.get(notionManagerId)\n    \n    const result = await notionManager.createSyncJob(pageId, {\n      includeBlocks: body.includeBlocks,\n      includeProperties: body.includeProperties,\n      namespace: body.namespace\n    })\n\n    return c.json({\n      success: true,\n      data: {\n        jobId: result.jobId,\n        pageId,\n        status: result.status,\n        message: 'ページの同期処理を開始しました'\n      }\n    }, 202)\n  } catch (error) {\n    console.error('Sync page error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '同期処理の開始中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB,SAAS,6BAA6B,gCAAgC;AACtE,SAAS,2BAA+C;AAQjD,aAAM,sBAAsB,YAAY;AAAA,EAC7C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,QAAQ,EAAE,OAAO;AAAA,MACf,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,IAC1B,CAAC;AAAA,IACD,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,4BAA4B,KAAK,EAAE,QAAQ,KAAK,CAAC;AAAA,QAC3D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,QAAQ;AAAA,EACf,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,wBAA2E,OAAO,MAAM;AACnG,MAAI;AACF,UAAM,EAAE,OAAO,IAAI,EAAE,IAAI,MAAM,OAAO;AACtC,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,cAAc,EAAE,IAAI;AAC1B,QAAI,CAAC,aAAa;AAChB,aAAO,EAAE,KAAyB;AAAA,QAChC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,GAAG,GAAG;AAAA,IACR;AAGA,UAAM,kBAAkB,EAAE,IAAI,eAAe,WAAW,QAAQ;AAChE,UAAM,gBAAgB,EAAE,IAAI,eAAe,IAAI,eAAe;AAE9D,UAAM,SAAS,MAAM,cAAc,cAAc,QAAQ;AAAA,MACvD,eAAe,KAAK;AAAA,MACpB,mBAAmB,KAAK;AAAA,MACxB,WAAW,KAAK;AAAA,IAClB,CAAC;AAED,WAAO,EAAE,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,OAAO,OAAO;AAAA,QACd;AAAA,QACA,QAAQ,OAAO;AAAA,QACf,SAAS;AAAA,MACX;AAAA,IACF,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,oBAAoB,KAAK;AACvC,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"81ff8d145b5db30d5c11965f459ebdfdc556bd34"},"c:/Users/mtama/node/vector-db/src/routes/api/notion/retrieve-blocks.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/notion/retrieve-blocks.ts","statementMap":{"0":{"start":{"line":6,"column":41},"end":{"line":54,"column":2}},"1":{"start":{"line":14,"column":58},"end":{"line":14,"column":72}},"2":{"start":{"line":55,"column":43},"end":{"line":127,"column":1}},"3":{"start":{"line":56,"column":2},"end":{"line":126,"column":3}},"4":{"start":{"line":57,"column":23},"end":{"line":57,"column":43}},"5":{"start":{"line":58,"column":26},"end":{"line":58,"column":46}},"6":{"start":{"line":59,"column":24},"end":{"line":59,"column":44}},"7":{"start":{"line":60,"column":4},"end":{"line":66,"column":5}},"8":{"start":{"line":61,"column":6},"end":{"line":65,"column":14}},"9":{"start":{"line":67,"column":26},"end":{"line":67,"column":63}},"10":{"start":{"line":68,"column":4},"end":{"line":98,"column":5}},"11":{"start":{"line":69,"column":27},"end":{"line":69,"column":64}},"12":{"start":{"line":70,"column":6},"end":{"line":97,"column":7}},"13":{"start":{"line":71,"column":24},"end":{"line":88,"column":11}},"14":{"start":{"line":71,"column":53},"end":{"line":88,"column":9}},"15":{"start":{"line":89,"column":8},"end":{"line":96,"column":16}},"16":{"start":{"line":99,"column":19},"end":{"line":99,"column":68}},"17":{"start":{"line":100,"column":4},"end":{"line":109,"column":5}},"18":{"start":{"line":101,"column":6},"end":{"line":108,"column":14}},"19":{"start":{"line":110,"column":4},"end":{"line":110,"column":51}},"20":{"start":{"line":111,"column":4},"end":{"line":118,"column":12}},"21":{"start":{"line":120,"column":4},"end":{"line":120,"column":51}},"22":{"start":{"line":121,"column":4},"end":{"line":125,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":49},"end":{"line":14,"column":50}},"loc":{"start":{"line":14,"column":58},"end":{"line":14,"column":72}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":55,"column":43},"end":{"line":55,"column":44}},"loc":{"start":{"line":55,"column":56},"end":{"line":127,"column":1}},"line":55},"2":{"name":"(anonymous_2)","decl":{"start":{"line":71,"column":41},"end":{"line":71,"column":42}},"loc":{"start":{"line":71,"column":53},"end":{"line":88,"column":9}},"line":71}},"branchMap":{"0":{"loc":{"start":{"line":60,"column":4},"end":{"line":66,"column":5}},"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":66,"column":5}},{"start":{},"end":{}}],"line":60},"1":{"loc":{"start":{"line":68,"column":4},"end":{"line":98,"column":5}},"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":98,"column":5}},{"start":{},"end":{}}],"line":68},"2":{"loc":{"start":{"line":70,"column":6},"end":{"line":97,"column":7}},"type":"if","locations":[{"start":{"line":70,"column":6},"end":{"line":97,"column":7}},{"start":{},"end":{}}],"line":70},"3":{"loc":{"start":{"line":76,"column":21},"end":{"line":76,"column":77}},"type":"cond-expr","locations":[{"start":{"line":76,"column":54},"end":{"line":76,"column":68}},{"start":{"line":76,"column":71},"end":{"line":76,"column":77}}],"line":76},"4":{"loc":{"start":{"line":77,"column":22},"end":{"line":77,"column":79}},"type":"cond-expr","locations":[{"start":{"line":77,"column":56},"end":{"line":77,"column":70}},{"start":{"line":77,"column":73},"end":{"line":77,"column":79}}],"line":77},"5":{"loc":{"start":{"line":100,"column":4},"end":{"line":109,"column":5}},"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":109,"column":5}},{"start":{},"end":{}}],"line":100},"6":{"loc":{"start":{"line":124,"column":15},"end":{"line":124,"column":76}},"type":"cond-expr","locations":[{"start":{"line":124,"column":40},"end":{"line":124,"column":53}},{"start":{"line":124,"column":56},"end":{"line":124,"column":76}}],"line":124}},"s":{"0":1,"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/notion/retrieve-blocks.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { NotionService } from '../../../services/notion.service'\nimport { NotionBlockListResponseSchema } from '../../../schemas/notion.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ブロック取得ルート定義\nexport const retrieveNotionBlocksRoute = createRoute({\n  method: 'get',\n  path: '/notion/pages/{pageId}/blocks',\n  request: {\n    params: z.object({\n      pageId: z.string().min(1)\n    }),\n    query: z.object({\n      fromCache: z.string().optional().transform(val => val === 'true').default(false)\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: NotionBlockListResponseSchema\n        }\n      },\n      description: 'ブロック一覧'\n    },\n    401: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '認証エラー'\n    },\n    404: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ページが見つかりません'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Notion'],\n  summary: 'Notionブロック取得',\n  description: 'ページ内のブロックを取得します'\n})\n\n// ブロック取得ハンドラー\nexport const retrieveNotionBlocksHandler: RouteHandler<typeof retrieveNotionBlocksRoute, EnvType> = async (c) => {\n  try {\n    const { pageId } = c.req.valid('param')\n    const { fromCache } = c.req.valid('query')\n    \n    // Notion APIトークンを取得\n    const notionToken = c.env.NOTION_API_KEY\n    if (!notionToken) {\n      return c.json<ErrorResponse, 401>({\n        success: false,\n        error: 'Unauthorized',\n        message: 'Notion APIトークンが設定されていません'\n      }, 401)\n    }\n\n    const notionService = new NotionService(c.env, notionToken)\n\n    // キャッシュから取得\n    if (fromCache) {\n      const cachedBlocks = await notionService.getBlocks(pageId)\n      if (cachedBlocks.length > 0) {\n        const blocks = cachedBlocks.map(block => ({\n          object: 'block' as const,\n          id: block.id,\n          parent: {\n            type: block.parentType,\n            page_id: block.parentType === 'page_id' ? block.parentId : undefined,\n            block_id: block.parentType === 'block_id' ? block.parentId : undefined\n          },\n          created_time: block.createdTime,\n          last_edited_time: block.lastEditedTime,\n          created_by: { object: 'user' as const, id: block.createdById },\n          last_edited_by: { object: 'user' as const, id: block.lastEditedById },\n          has_children: block.hasChildren,\n          archived: block.archived,\n          in_trash: block.inTrash,\n          type: block.type,\n          ...JSON.parse(block.content)\n        }))\n\n        return c.json({\n          success: true,\n          data: {\n            blocks,\n            has_more: false,\n            next_cursor: null\n          }\n        }, 200)\n      }\n    }\n\n    // Notion APIから取得\n    const blocks = await notionService.fetchBlocksFromNotion(pageId)\n    \n    if (blocks.length === 0) {\n      return c.json({\n        success: true,\n        data: {\n          blocks: [],\n          has_more: false,\n          next_cursor: null\n        }\n      }, 200)\n    }\n\n    // キャッシュに保存\n    await notionService.saveBlocks(pageId, blocks)\n\n    return c.json({\n      success: true,\n      data: {\n        blocks,\n        has_more: false,\n        next_cursor: null\n      }\n    }, 200)\n  } catch (error) {\n    console.error('Retrieve blocks error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ブロック取得中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"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","names":["blocks"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"86ca601c591371291abe30373559a76256512f15"},"c:/Users/mtama/node/vector-db/src/routes/api/notion/list-pages.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/notion/list-pages.ts","statementMap":{"0":{"start":{"line":4,"column":37},"end":{"line":25,"column":2}},"1":{"start":{"line":26,"column":36},"end":{"line":65,"column":2}},"2":{"start":{"line":31,"column":62},"end":{"line":31,"column":75}},"3":{"start":{"line":32,"column":70},"end":{"line":32,"column":84}},"4":{"start":{"line":33,"column":65},"end":{"line":33,"column":79}},"5":{"start":{"line":66,"column":38},"end":{"line":151,"column":1}},"6":{"start":{"line":67,"column":2},"end":{"line":150,"column":3}},"7":{"start":{"line":68,"column":55},"end":{"line":68,"column":75}},"8":{"start":{"line":69,"column":24},"end":{"line":69,"column":44}},"9":{"start":{"line":70,"column":4},"end":{"line":76,"column":5}},"10":{"start":{"line":71,"column":6},"end":{"line":75,"column":14}},"11":{"start":{"line":77,"column":28},"end":{"line":77,"column":69}},"12":{"start":{"line":78,"column":26},"end":{"line":78,"column":67}},"13":{"start":{"line":79,"column":18},"end":{"line":83,"column":6}},"14":{"start":{"line":84,"column":27},"end":{"line":130,"column":6}},"15":{"start":{"line":85,"column":6},"end":{"line":129,"column":7}},"16":{"start":{"line":86,"column":27},"end":{"line":86,"column":31}},"17":{"start":{"line":87,"column":23},"end":{"line":87,"column":112}},"18":{"start":{"line":88,"column":27},"end":{"line":88,"column":128}},"19":{"start":{"line":89,"column":20},"end":{"line":89,"column":30}},"20":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"21":{"start":{"line":91,"column":10},"end":{"line":91,"column":81}},"22":{"start":{"line":91,"column":52},"end":{"line":91,"column":70}},"23":{"start":{"line":93,"column":8},"end":{"line":106,"column":10}},"24":{"start":{"line":108,"column":24},"end":{"line":108,"column":28}},"25":{"start":{"line":109,"column":27},"end":{"line":109,"column":41}},"26":{"start":{"line":110,"column":31},"end":{"line":110,"column":49}},"27":{"start":{"line":111,"column":20},"end":{"line":111,"column":30}},"28":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"29":{"start":{"line":113,"column":10},"end":{"line":113,"column":85}},"30":{"start":{"line":113,"column":56},"end":{"line":113,"column":74}},"31":{"start":{"line":115,"column":8},"end":{"line":128,"column":10}},"32":{"start":{"line":131,"column":18},"end":{"line":131,"column":23}},"33":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"34":{"start":{"line":133,"column":6},"end":{"line":133,"column":42}},"35":{"start":{"line":135,"column":4},"end":{"line":142,"column":12}},"36":{"start":{"line":144,"column":4},"end":{"line":144,"column":46}},"37":{"start":{"line":145,"column":4},"end":{"line":149,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":31,"column":53},"end":{"line":31,"column":54}},"loc":{"start":{"line":31,"column":62},"end":{"line":31,"column":75}},"line":31},"1":{"name":"(anonymous_1)","decl":{"start":{"line":32,"column":61},"end":{"line":32,"column":62}},"loc":{"start":{"line":32,"column":70},"end":{"line":32,"column":84}},"line":32},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":56},"end":{"line":33,"column":57}},"loc":{"start":{"line":33,"column":65},"end":{"line":33,"column":79}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":66,"column":38},"end":{"line":66,"column":39}},"loc":{"start":{"line":66,"column":51},"end":{"line":151,"column":1}},"line":66},"4":{"name":"(anonymous_4)","decl":{"start":{"line":84,"column":37},"end":{"line":84,"column":38}},"loc":{"start":{"line":84,"column":47},"end":{"line":130,"column":5}},"line":84},"5":{"name":"(anonymous_5)","decl":{"start":{"line":91,"column":45},"end":{"line":91,"column":46}},"loc":{"start":{"line":91,"column":52},"end":{"line":91,"column":70}},"line":91},"6":{"name":"(anonymous_6)","decl":{"start":{"line":113,"column":49},"end":{"line":113,"column":50}},"loc":{"start":{"line":113,"column":56},"end":{"line":113,"column":74}},"line":113}},"branchMap":{"0":{"loc":{"start":{"line":70,"column":4},"end":{"line":76,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":76,"column":5}},{"start":{},"end":{}}],"line":70},"1":{"loc":{"start":{"line":85,"column":6},"end":{"line":129,"column":7}},"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":129,"column":7}},{"start":{"line":107,"column":13},"end":{"line":129,"column":7}}],"line":85},"2":{"loc":{"start":{"line":85,"column":10},"end":{"line":85,"column":45}},"type":"binary-expr","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":20}},{"start":{"line":85,"column":24},"end":{"line":85,"column":45}}],"line":85},"3":{"loc":{"start":{"line":87,"column":23},"end":{"line":87,"column":112}},"type":"cond-expr","locations":[{"start":{"line":87,"column":63},"end":{"line":87,"column":92}},{"start":{"line":87,"column":95},"end":{"line":87,"column":112}}],"line":87},"4":{"loc":{"start":{"line":88,"column":27},"end":{"line":88,"column":128}},"type":"cond-expr","locations":[{"start":{"line":88,"column":71},"end":{"line":88,"column":104}},{"start":{"line":88,"column":107},"end":{"line":88,"column":128}}],"line":88},"5":{"loc":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},{"start":{},"end":{}}],"line":90},"6":{"loc":{"start":{"line":90,"column":12},"end":{"line":90,"column":146}},"type":"binary-expr","locations":[{"start":{"line":90,"column":12},"end":{"line":90,"column":22}},{"start":{"line":90,"column":26},"end":{"line":90,"column":42}},{"start":{"line":90,"column":46},"end":{"line":90,"column":68}},{"start":{"line":90,"column":72},"end":{"line":90,"column":109}},{"start":{"line":90,"column":113},"end":{"line":90,"column":146}}],"line":90},"7":{"loc":{"start":{"line":91,"column":52},"end":{"line":91,"column":70}},"type":"binary-expr","locations":[{"start":{"line":91,"column":52},"end":{"line":91,"column":64}},{"start":{"line":91,"column":68},"end":{"line":91,"column":70}}],"line":91},"8":{"loc":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},{"start":{},"end":{}}],"line":112},"9":{"loc":{"start":{"line":112,"column":12},"end":{"line":112,"column":166}},"type":"binary-expr","locations":[{"start":{"line":112,"column":12},"end":{"line":112,"column":26}},{"start":{"line":112,"column":30},"end":{"line":112,"column":50}},{"start":{"line":112,"column":54},"end":{"line":112,"column":80}},{"start":{"line":112,"column":84},"end":{"line":112,"column":125}},{"start":{"line":112,"column":129},"end":{"line":112,"column":166}}],"line":112},"10":{"loc":{"start":{"line":113,"column":56},"end":{"line":113,"column":74}},"type":"binary-expr","locations":[{"start":{"line":113,"column":56},"end":{"line":113,"column":68}},{"start":{"line":113,"column":72},"end":{"line":113,"column":74}}],"line":113},"11":{"loc":{"start":{"line":123,"column":25},"end":{"line":123,"column":47}},"type":"binary-expr","locations":[{"start":{"line":123,"column":25},"end":{"line":123,"column":41}},{"start":{"line":123,"column":45},"end":{"line":123,"column":47}}],"line":123},"12":{"loc":{"start":{"line":124,"column":25},"end":{"line":124,"column":90}},"type":"cond-expr","locations":[{"start":{"line":124,"column":51},"end":{"line":124,"column":81}},{"start":{"line":124,"column":84},"end":{"line":124,"column":90}}],"line":124},"13":{"loc":{"start":{"line":125,"column":21},"end":{"line":125,"column":78}},"type":"cond-expr","locations":[{"start":{"line":125,"column":43},"end":{"line":125,"column":69}},{"start":{"line":125,"column":72},"end":{"line":125,"column":78}}],"line":125},"14":{"loc":{"start":{"line":126,"column":23},"end":{"line":126,"column":96}},"type":"cond-expr","locations":[{"start":{"line":126,"column":58},"end":{"line":126,"column":87}},{"start":{"line":126,"column":90},"end":{"line":126,"column":96}}],"line":126},"15":{"loc":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},{"start":{},"end":{}}],"line":132},"16":{"loc":{"start":{"line":148,"column":15},"end":{"line":148,"column":77}},"type":"cond-expr","locations":[{"start":{"line":148,"column":40},"end":{"line":148,"column":53}},{"start":{"line":148,"column":56},"end":{"line":148,"column":77}}],"line":148}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/notion/list-pages.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport type { NotionPage } from '../../../db/schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ページ一覧レスポンススキーマ\nconst NotionPageListResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    pages: z.array(z.object({\n      id: z.string(),\n      title: z.string().optional(),\n      url: z.string(),\n      last_edited_time: z.string(),\n      created_time: z.string(),\n      archived: z.boolean(),\n      parent: z.object({\n        type: z.string(),\n        database_id: z.string().optional(),\n        page_id: z.string().optional(),\n        workspace: z.boolean().optional()\n      })\n    })),\n    has_more: z.boolean(),\n    next_cursor: z.string().nullable()\n  }).optional(),\n  message: z.string().optional()\n})\n\n// ページ一覧取得ルート定義\nexport const listNotionPagesRoute = createRoute({\n  method: 'get',\n  path: '/notion/pages',\n  request: {\n    query: z.object({\n      page_size: z.string().default('100').transform(val => parseInt(val)),\n      filter_archived: z.string().default('false').transform(val => val === 'true'),\n      from_cache: z.string().default('false').transform(val => val === 'true')\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: NotionPageListResponseSchema\n        }\n      },\n      description: 'ページ一覧'\n    },\n    401: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '認証エラー'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Notion'],\n  summary: 'Notionページ一覧取得',\n  description: 'アクセス可能なすべてのNotionページを取得します'\n})\n\n// ページ一覧取得ハンドラー\nexport const listNotionPagesHandler: RouteHandler<typeof listNotionPagesRoute, EnvType> = async (c) => {\n  try {\n    const { page_size, filter_archived, from_cache } = c.req.valid('query')\n    \n    // Notion APIトークンを取得\n    const notionToken = c.env.NOTION_API_KEY\n    if (!notionToken) {\n      return c.json<ErrorResponse, 401>({\n        success: false,\n        error: 'Unauthorized',\n        message: 'Notion APIトークンが設定されていません'\n      }, 401)\n    }\n\n    // NotionManagerを使用してページ一覧を取得\n    const notionManagerId = c.env.NOTION_MANAGER.idFromName('global')\n    const notionManager = c.env.NOTION_MANAGER.get(notionManagerId)\n    \n    const pages: Array<NotionPage | Record<string, unknown>> = await notionManager.listPages({\n      fromCache: from_cache,\n      archived: filter_archived,\n      limit: page_size\n    })\n\n    interface FormattedPage {\n      id: string\n      title: string\n      url: string\n      last_edited_time: string\n      created_time: string\n      archived: boolean\n      parent: {\n        type: string\n        database_id?: string\n        page_id?: string\n        workspace?: boolean\n      }\n    }\n\n    const formattedPages: FormattedPage[] = pages.map((page: NotionPage | Record<string, unknown>) => {\n      if (from_cache && 'createdTime' in page) {\n        // キャッシュからの場合はデータベース形式 (NotionPage型)\n        const cachedPage = page as NotionPage\n        const parent = typeof cachedPage.parent === 'string' ? JSON.parse(cachedPage.parent) : cachedPage.parent\n        const properties = typeof cachedPage.properties === 'string' ? JSON.parse(cachedPage.properties) : cachedPage.properties\n        \n        // タイトルをプロパティから抽出\n        let title = 'Untitled'\n        if (properties && properties.title && properties.title.title && Array.isArray(properties.title.title) && properties.title.title.length > 0) {\n          title = properties.title.title.map((t: any) => t.plain_text || '').join('')\n        }\n        \n        return {\n          id: cachedPage.id,\n          title,\n          url: cachedPage.url,\n          last_edited_time: cachedPage.lastEditedTime,\n          created_time: cachedPage.createdTime,\n          archived: cachedPage.archived,\n          parent: {\n            type: parent.type,\n            database_id: parent.database_id,\n            page_id: parent.page_id,\n            workspace: parent.workspace\n          }\n        }\n      } else {\n        // Notion APIからの場合 (Record<string, unknown>型)\n        const apiPage = page as Record<string, unknown>\n        const pageParent = apiPage.parent as Record<string, unknown>\n        const pageProperties = apiPage.properties as Record<string, any>\n        \n        // タイトルをプロパティから抽出\n        let title = 'Untitled'\n        if (pageProperties && pageProperties.title && pageProperties.title.title && Array.isArray(pageProperties.title.title) && pageProperties.title.title.length > 0) {\n          title = pageProperties.title.title.map((t: any) => t.plain_text || '').join('')\n        }\n        \n        return {\n          id: String(apiPage.id),\n          title,\n          url: String(apiPage.url),\n          last_edited_time: String(apiPage.last_edited_time),\n          created_time: String(apiPage.created_time),\n          archived: Boolean(apiPage.archived),\n          parent: {\n            type: String(pageParent?.type || ''),\n            database_id: pageParent?.database_id ? String(pageParent.database_id) : undefined,\n            page_id: pageParent?.page_id ? String(pageParent.page_id) : undefined,\n            workspace: pageParent?.workspace !== undefined ? Boolean(pageParent.workspace) : undefined\n          }\n        }\n      }\n    })\n\n    let hasMore = false\n    if (!from_cache) {\n      hasMore = pages.length >= page_size\n    }\n    \n    return c.json({\n      success: true,\n      data: {\n        pages: formattedPages,\n        has_more: hasMore,\n        next_cursor: null\n      }\n    }, 200)\n  } catch (error) {\n    console.error('List pages error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ページ一覧取得中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ec09cf16242595d5f6e03a51f4436b8d8468a9ae"},"c:/Users/mtama/node/vector-db/src/routes/api/notion/bulk-sync.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/notion/bulk-sync.ts","statementMap":{"0":{"start":{"line":4,"column":37},"end":{"line":16,"column":2}},"1":{"start":{"line":17,"column":40},"end":{"line":66,"column":2}},"2":{"start":{"line":67,"column":42},"end":{"line":120,"column":1}},"3":{"start":{"line":68,"column":2},"end":{"line":119,"column":3}},"4":{"start":{"line":69,"column":17},"end":{"line":69,"column":36}},"5":{"start":{"line":70,"column":24},"end":{"line":70,"column":44}},"6":{"start":{"line":71,"column":4},"end":{"line":77,"column":5}},"7":{"start":{"line":72,"column":6},"end":{"line":76,"column":14}},"8":{"start":{"line":78,"column":28},"end":{"line":78,"column":69}},"9":{"start":{"line":79,"column":26},"end":{"line":79,"column":67}},"10":{"start":{"line":80,"column":22},"end":{"line":80,"column":24}},"11":{"start":{"line":81,"column":4},"end":{"line":97,"column":5}},"12":{"start":{"line":82,"column":6},"end":{"line":82,"column":57}},"13":{"start":{"line":84,"column":20},"end":{"line":88,"column":8}},"14":{"start":{"line":89,"column":6},"end":{"line":96,"column":9}},"15":{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},"16":{"start":{"line":91,"column":29},"end":{"line":91,"column":33}},"17":{"start":{"line":92,"column":10},"end":{"line":92,"column":31}},"18":{"start":{"line":94,"column":10},"end":{"line":94,"column":33}},"19":{"start":{"line":98,"column":19},"end":{"line":103,"column":6}},"20":{"start":{"line":104,"column":4},"end":{"line":111,"column":12}},"21":{"start":{"line":113,"column":4},"end":{"line":113,"column":45}},"22":{"start":{"line":114,"column":4},"end":{"line":118,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":67,"column":42},"end":{"line":67,"column":43}},"loc":{"start":{"line":67,"column":55},"end":{"line":120,"column":1}},"line":67},"1":{"name":"(anonymous_1)","decl":{"start":{"line":89,"column":30},"end":{"line":89,"column":31}},"loc":{"start":{"line":89,"column":40},"end":{"line":96,"column":7}},"line":89}},"branchMap":{"0":{"loc":{"start":{"line":71,"column":4},"end":{"line":77,"column":5}},"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":77,"column":5}},{"start":{},"end":{}}],"line":71},"1":{"loc":{"start":{"line":81,"column":4},"end":{"line":97,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":97,"column":5}},{"start":{"line":83,"column":11},"end":{"line":97,"column":5}}],"line":81},"2":{"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":47}},"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":20}},{"start":{"line":81,"column":24},"end":{"line":81,"column":47}}],"line":81},"3":{"loc":{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},{"start":{"line":93,"column":15},"end":{"line":95,"column":9}}],"line":90},"4":{"loc":{"start":{"line":90,"column":12},"end":{"line":90,"column":73}},"type":"binary-expr","locations":[{"start":{"line":90,"column":12},"end":{"line":90,"column":33}},{"start":{"line":90,"column":37},"end":{"line":90,"column":73}}],"line":90},"5":{"loc":{"start":{"line":117,"column":15},"end":{"line":117,"column":80}},"type":"cond-expr","locations":[{"start":{"line":117,"column":40},"end":{"line":117,"column":53}},{"start":{"line":117,"column":56},"end":{"line":117,"column":80}}],"line":117}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/notion/bulk-sync.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport type { NotionPage } from '../../../db/schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// バルク同期レスポンススキーマ\nconst NotionBulkSyncResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    totalPages: z.number(),\n    syncJobs: z.array(z.object({\n      pageId: z.string(),\n      jobId: z.string(),\n      status: z.string()\n    })),\n    message: z.string()\n  }).optional(),\n  message: z.string().optional()\n})\n\n// バルク同期ルート定義\nexport const bulkSyncNotionPagesRoute = createRoute({\n  method: 'post',\n  path: '/notion/pages/bulk-sync',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: z.object({\n            includeBlocks: z.boolean().default(true),\n            includeProperties: z.boolean().default(true),\n            namespace: z.string().optional(),\n            maxPages: z.number().min(1).max(100).default(50),\n            filterArchived: z.boolean().default(false),\n            pageIds: z.array(z.string()).optional() // 特定のページのみ同期する場合\n          })\n        }\n      }\n    }\n  },\n  responses: {\n    202: {\n      content: {\n        'application/json': {\n          schema: NotionBulkSyncResponseSchema\n        }\n      },\n      description: 'バルク同期処理を開始しました'\n    },\n    401: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '認証エラー'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Notion'],\n  summary: 'Notionページバルク同期',\n  description: '複数のNotionページを一括で同期・ベクトル化します'\n})\n\n// バルク同期ハンドラー\nexport const bulkSyncNotionPagesHandler: RouteHandler<typeof bulkSyncNotionPagesRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n    \n    // Notion APIトークンを取得\n    const notionToken = c.env.NOTION_API_KEY\n    if (!notionToken) {\n      return c.json<ErrorResponse, 401>({\n        success: false,\n        error: 'Unauthorized',\n        message: 'Notion APIトークンが設定されていません'\n      }, 401)\n    }\n\n    // NotionManagerを使用してバルク同期ジョブを作成\n    const notionManagerId = c.env.NOTION_MANAGER.idFromName('global')\n    const notionManager = c.env.NOTION_MANAGER.get(notionManagerId)\n    \n    let pagesToSync: string[] = []\n\n    // 特定のページIDが指定されている場合\n    if (body.pageIds && body.pageIds.length > 0) {\n      pagesToSync = body.pageIds.slice(0, body.maxPages)\n    } else {\n      // NotionManagerを使用してページ一覧を取得\n      const pages: Array<NotionPage | Record<string, unknown>> = await notionManager.listPages({\n        fromCache: false,\n        archived: body.filterArchived,\n        limit: body.maxPages\n      })\n      \n      pagesToSync = pages.map((page: NotionPage | Record<string, unknown>): string => {\n        if ('createdTime' in page && typeof page.createdTime === 'string') {\n          // NotionPage型\n          const notionPage = page as NotionPage\n          return notionPage.id\n        } else {\n          // Record<string, unknown>型\n          return String(page.id)\n        }\n      })\n    }\n\n    const result = await notionManager.createBulkSyncJob(pagesToSync, {\n      includeBlocks: body.includeBlocks,\n      includeProperties: body.includeProperties,\n      namespace: body.namespace,\n      maxPages: body.maxPages\n    })\n\n    return c.json({\n      success: true,\n      data: {\n        totalPages: pagesToSync.length,\n        syncJobs: result.syncJobs,\n        message: `${result.syncJobs.length}個のページの同期処理を開始しました`\n      }\n    }, 202)\n  } catch (error) {\n    console.error('Bulk sync error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'バルク同期処理の開始中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0787e8824a6396e38890204f5786d9763ca726ba"},"c:/Users/mtama/node/vector-db/src/routes/api/notion/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/notion/index.ts","statementMap":{"0":{"start":{"line":7,"column":2},"end":{"line":7,"column":60}},"1":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":58}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":68}},"4":{"start":{"line":11,"column":2},"end":{"line":11,"column":70}}},"fnMap":{"0":{"name":"notionRoutes","decl":{"start":{"line":6,"column":24},"end":{"line":6,"column":36}},"loc":{"start":{"line":6,"column":42},"end":{"line":12,"column":1}},"line":6}},"branchMap":{},"s":{"0":2,"1":2,"2":2,"3":2,"4":2},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/notion/index.ts"],"sourcesContent":["import type { OpenAPIHono } from '@hono/zod-openapi'\nimport { retrieveNotionPageRoute, retrieveNotionPageHandler } from './retrieve-page'\nimport { syncNotionPageRoute, syncNotionPageHandler } from './sync-page'\nimport { retrieveNotionBlocksRoute, retrieveNotionBlocksHandler } from './retrieve-blocks'\nimport { listNotionPagesRoute, listNotionPagesHandler } from './list-pages'\nimport { bulkSyncNotionPagesRoute, bulkSyncNotionPagesHandler } from './bulk-sync'\n\nexport default function notionRoutes(app: OpenAPIHono<{ Bindings: Env }>) {\n  // ページ一覧取得\n  app.openapi(listNotionPagesRoute, listNotionPagesHandler)\n  \n  // ページ取得\n  app.openapi(retrieveNotionPageRoute, retrieveNotionPageHandler)\n  \n  // ページ同期\n  app.openapi(syncNotionPageRoute, syncNotionPageHandler)\n  \n  // バルク同期\n  app.openapi(bulkSyncNotionPagesRoute, bulkSyncNotionPagesHandler)\n  \n  // ブロック取得\n  app.openapi(retrieveNotionBlocksRoute, retrieveNotionBlocksHandler)\n}"],"mappings":"AACA,SAAS,yBAAyB,iCAAiC;AACnE,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,2BAA2B,mCAAmC;AACvE,SAAS,sBAAsB,8BAA8B;AAC7D,SAAS,0BAA0B,kCAAkC;AAErE,wBAAwB,aAAa,KAAqC;AAExE,MAAI,QAAQ,sBAAsB,sBAAsB;AAGxD,MAAI,QAAQ,yBAAyB,yBAAyB;AAG9D,MAAI,QAAQ,qBAAqB,qBAAqB;AAGtD,MAAI,QAAQ,0BAA0B,0BAA0B;AAGhE,MAAI,QAAQ,2BAA2B,2BAA2B;AACpE;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"eca74d6faa8134ce1c9541d573cddd496ca795a1"}}