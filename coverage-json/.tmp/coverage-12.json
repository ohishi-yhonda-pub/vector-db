{"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts","statementMap":{"0":{"start":{"line":2,"column":34},"end":{"line":2,"column":115}},"1":{"start":{"line":3,"column":32},"end":{"line":12,"column":2}},"2":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"3":{"start":{"line":13,"column":44},"end":{"line":26,"column":2}},"4":{"start":{"line":27,"column":42},"end":{"line":38,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":0,"3":1,"4":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\nimport { VectorMetadataSchema } from './vector.schema'\n\n// サポートするファイルタイプ\nexport const SupportedFileTypes = z.enum(['application/pdf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp'])\n\n// ファイルアップロードのフォームデータスキーマ\nexport const FileUploadSchema = z.object({\n  file: z.instanceof(File).refine(\n    (file) => file.size <= 10 * 1024 * 1024, // 10MB max\n    { message: 'ファイルサイズは10MB以下にしてください' }\n  ),\n  namespace: z.string().optional(),\n  metadata: z.string().optional() // JSON string として受け取る\n})\n\n// ファイル処理レスポンススキーマ\nexport const FileProcessingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    fileInfo: z.object({\n      name: z.string(),\n      type: z.string(),\n      size: z.number()\n    }),\n    message: z.string()\n  })\n})\n\n// ファイル処理結果スキーマ\nexport const FileProcessingResultSchema = z.object({\n  type: z.enum(['pdf', 'image']),\n  success: z.boolean(),\n  content: z.object({\n    text: z.string().optional(),\n    description: z.string().optional(),\n    extractedPages: z.number().optional(),\n    metadata: z.record(z.string(), z.any()).optional()\n  }),\n  vectorIds: z.array(z.string()),\n  error: z.string().optional()\n})\n\nexport type SupportedFileType = z.infer<typeof SupportedFileTypes>\nexport type FileUpload = z.infer<typeof FileUploadSchema>\nexport type FileProcessingResponse = z.infer<typeof FileProcessingResponseSchema>\nexport type FileProcessingResult = z.infer<typeof FileProcessingResultSchema>"],"mappings":"AAAA,SAAS,SAAS;AAIX,aAAM,qBAAqB,EAAE,KAAK,CAAC,mBAAmB,cAAc,aAAa,aAAa,YAAY,CAAC;AAG3G,aAAM,mBAAmB,EAAE,OAAO;AAAA,EACvC,MAAM,EAAE,WAAW,IAAI,EAAE;AAAA,IACvB,CAAC,SAAS,KAAK,QAAQ,KAAK,OAAO;AAAA;AAAA,IACnC,EAAE,SAAS,wBAAwB;AAAA,EACrC;AAAA,EACA,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA;AAChC,CAAC;AAGM,aAAM,+BAA+B,EAAE,OAAO;AAAA,EACnD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,UAAU,EAAE,OAAO;AAAA,MACjB,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,IACjB,CAAC;AAAA,IACD,SAAS,EAAE,OAAO;AAAA,EACpB,CAAC;AACH,CAAC;AAGM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,MAAM,EAAE,KAAK,CAAC,OAAO,OAAO,CAAC;AAAA,EAC7B,SAAS,EAAE,QAAQ;AAAA,EACnB,SAAS,EAAE,OAAO;AAAA,IAChB,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,IAC1B,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,IACjC,gBAAgB,EAAE,OAAO,EAAE,SAAS;AAAA,IACpC,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,EACnD,CAAC;AAAA,EACD,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC7B,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6e626a4d2276b65170457ff69db0772446520387"},"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts","statementMap":{"0":{"start":{"line":2,"column":35},"end":{"line":15,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/error.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const ErrorResponseSchema = z.object({\n  success: z.literal(false),\n  error: z.string().openapi({\n    example: 'Bad Request',\n    description: 'エラーの種類'\n  }),\n  message: z.string().openapi({\n    example: '無効なリクエストパラメータです',\n    description: 'エラーの詳細メッセージ'\n  }),\n  details: z.any().optional().openapi({\n    description: 'エラーの詳細情報'\n  })\n})\n\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,SAAS,EAAE,QAAQ,KAAK;AAAA,EACxB,OAAO,EAAE,OAAO,EAAE,QAAQ;AAAA,IACxB,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,QAAQ;AAAA,IAC1B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6a63d60aa5985710aa1a5dd58befc74fd0f881d"},"c:/Users/mtama/node/vector-db/src/routes/api/files/status.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/files/status.ts","statementMap":{"0":{"start":{"line":5,"column":31},"end":{"line":50,"column":2}},"1":{"start":{"line":51,"column":33},"end":{"line":99,"column":1}},"2":{"start":{"line":52,"column":2},"end":{"line":98,"column":3}},"3":{"start":{"line":53,"column":27},"end":{"line":53,"column":47}},"4":{"start":{"line":54,"column":28},"end":{"line":54,"column":67}},"5":{"start":{"line":55,"column":26},"end":{"line":55,"column":65}},"6":{"start":{"line":56,"column":16},"end":{"line":56,"column":68}},"7":{"start":{"line":57,"column":4},"end":{"line":63,"column":5}},"8":{"start":{"line":58,"column":6},"end":{"line":62,"column":14}},"9":{"start":{"line":64,"column":19},"end":{"line":64,"column":82}},"10":{"start":{"line":66,"column":4},"end":{"line":74,"column":5}},"11":{"start":{"line":67,"column":6},"end":{"line":67,"column":31}},"12":{"start":{"line":68,"column":11},"end":{"line":74,"column":5}},"13":{"start":{"line":69,"column":6},"end":{"line":69,"column":33}},"14":{"start":{"line":70,"column":11},"end":{"line":74,"column":5}},"15":{"start":{"line":71,"column":6},"end":{"line":71,"column":30}},"16":{"start":{"line":73,"column":6},"end":{"line":73,"column":31}},"17":{"start":{"line":75,"column":4},"end":{"line":83,"column":12}},"18":{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},"19":{"start":{"line":86,"column":6},"end":{"line":90,"column":14}},"20":{"start":{"line":92,"column":4},"end":{"line":92,"column":47}},"21":{"start":{"line":93,"column":4},"end":{"line":97,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":51,"column":33},"end":{"line":51,"column":34}},"loc":{"start":{"line":51,"column":46},"end":{"line":99,"column":1}},"line":51}},"branchMap":{"0":{"loc":{"start":{"line":57,"column":4},"end":{"line":63,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":63,"column":5}},{"start":{},"end":{}}],"line":57},"1":{"loc":{"start":{"line":66,"column":4},"end":{"line":74,"column":5}},"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":74,"column":5}},{"start":{"line":68,"column":11},"end":{"line":74,"column":5}}],"line":66},"2":{"loc":{"start":{"line":66,"column":8},"end":{"line":66,"column":66}},"type":"binary-expr","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":35}},{"start":{"line":66,"column":39},"end":{"line":66,"column":66}}],"line":66},"3":{"loc":{"start":{"line":68,"column":11},"end":{"line":74,"column":5}},"type":"if","locations":[{"start":{"line":68,"column":11},"end":{"line":74,"column":5}},{"start":{"line":70,"column":11},"end":{"line":74,"column":5}}],"line":68},"4":{"loc":{"start":{"line":68,"column":15},"end":{"line":68,"column":73}},"type":"binary-expr","locations":[{"start":{"line":68,"column":15},"end":{"line":68,"column":41}},{"start":{"line":68,"column":45},"end":{"line":68,"column":73}}],"line":68},"5":{"loc":{"start":{"line":70,"column":11},"end":{"line":74,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":11},"end":{"line":74,"column":5}},{"start":{"line":72,"column":11},"end":{"line":74,"column":5}}],"line":70},"6":{"loc":{"start":{"line":70,"column":15},"end":{"line":70,"column":69}},"type":"binary-expr","locations":[{"start":{"line":70,"column":15},"end":{"line":70,"column":38}},{"start":{"line":70,"column":42},"end":{"line":70,"column":69}}],"line":70},"7":{"loc":{"start":{"line":80,"column":16},"end":{"line":80,"column":88}},"type":"cond-expr","locations":[{"start":{"line":80,"column":32},"end":{"line":80,"column":79}},{"start":{"line":80,"column":82},"end":{"line":80,"column":88}}],"line":80},"8":{"loc":{"start":{"line":81,"column":15},"end":{"line":81,"column":50}},"type":"binary-expr","locations":[{"start":{"line":81,"column":15},"end":{"line":81,"column":24}},{"start":{"line":81,"column":28},"end":{"line":81,"column":40}},{"start":{"line":81,"column":44},"end":{"line":81,"column":50}}],"line":81},"9":{"loc":{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":91,"column":5}},{"start":{},"end":{}}],"line":85},"10":{"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":69}},"type":"binary-expr","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":30}},{"start":{"line":85,"column":34},"end":{"line":85,"column":69}}],"line":85},"11":{"loc":{"start":{"line":96,"column":15},"end":{"line":96,"column":74}},"type":"cond-expr","locations":[{"start":{"line":96,"column":40},"end":{"line":96,"column":53}},{"start":{"line":96,"column":56},"end":{"line":96,"column":74}}],"line":96}},"s":{"0":1,"1":1,"2":11,"3":11,"4":11,"5":11,"6":11,"7":8,"8":1,"9":7,"10":7,"11":4,"12":3,"13":1,"14":2,"15":1,"16":1,"17":7,"18":3,"19":1,"20":2,"21":2},"f":{"0":11},"b":{"0":[1,7],"1":[4,3],"2":[7,4],"3":[1,2],"4":[3,2],"5":[1,1],"6":[2,1],"7":[1,6],"8":[7,6,5],"9":[1,2],"10":[3,2],"11":[1,1]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/files/status.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { FileProcessingResultSchema } from '../../../schemas/file-upload.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// ファイル処理状況確認ルート定義\nexport const fileStatusRoute = createRoute({\n  method: 'get',\n  path: '/files/status/{workflowId}',\n  request: {\n    params: z.object({\n      workflowId: z.string().min(1)\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: z.object({\n            success: z.boolean(),\n            data: z.object({\n              workflowId: z.string(),\n              status: z.enum(['running', 'completed', 'failed', 'unknown']),\n              result: FileProcessingResultSchema.optional(),\n              error: z.string().optional()\n            })\n          })\n        }\n      },\n      description: '処理状況'\n    },\n    404: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ワークフローが見つかりません'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Files'],\n  summary: 'ファイル処理状況確認',\n  description: 'アップロードされたファイルの処理状況を確認します'\n})\n\n// ファイル処理状況確認ハンドラー\nexport const fileStatusHandler: RouteHandler<typeof fileStatusRoute, EnvType> = async (c) => {\n  try {\n    const { workflowId } = c.req.valid('param')\n    \n    // VectorManagerからジョブ情報を取得\n    const vectorManagerId = c.env.VECTOR_CACHE.idFromName('global')\n    const vectorManager = c.env.VECTOR_CACHE.get(vectorManagerId)\n    \n    // ジョブ情報を取得\n    const job = await vectorManager.getFileProcessingJob(workflowId)\n    if (!job) {\n      return c.json<ErrorResponse, 404>({\n        success: false,\n        error: 'Not Found',\n        message: 'ジョブが見つかりません'\n      }, 404)\n    }\n    \n    // Workflowの状態を取得\n    const status = await vectorManager.getFileProcessingWorkflowStatus(workflowId)\n    \n    // ステータスをマッピング\n    let mappedStatus: 'running' | 'completed' | 'failed' | 'unknown'\n    if (job.status === 'processing' || status.status === 'running') {\n      mappedStatus = 'running'\n    } else if (job.status === 'completed' || status.status === 'complete') {\n      mappedStatus = 'completed'\n    } else if (job.status === 'failed' || status.status === 'errored') {\n      mappedStatus = 'failed'\n    } else {\n      mappedStatus = 'unknown'\n    }\n    \n    return c.json({\n      success: true,\n      data: {\n        workflowId,\n        status: mappedStatus,\n        result: status.output ? FileProcessingResultSchema.parse(status.output) : undefined,\n        error: job.error || status.error || undefined\n      }\n    }, 200)\n  } catch (error) {\n    // Workflowが見つからない場合\n    if (error instanceof Error && error.message.includes('not found')) {\n      return c.json<ErrorResponse, 404>({\n        success: false,\n        error: 'Not Found',\n        message: 'ワークフローが見つかりません'\n      }, 404)\n    }\n    \n    console.error('File status error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '状況確認中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB,SAAS,kCAAkC;AAC3C,SAAS,2BAA+C;AAQjD,aAAM,kBAAkB,YAAY;AAAA,EACzC,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,QAAQ,EAAE,OAAO;AAAA,MACf,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,EAAE,OAAO;AAAA,YACf,SAAS,EAAE,QAAQ;AAAA,YACnB,MAAM,EAAE,OAAO;AAAA,cACb,YAAY,EAAE,OAAO;AAAA,cACrB,QAAQ,EAAE,KAAK,CAAC,WAAW,aAAa,UAAU,SAAS,CAAC;AAAA,cAC5D,QAAQ,2BAA2B,SAAS;AAAA,cAC5C,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,YAC7B,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,OAAO;AAAA,EACd,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,oBAAmE,OAAO,MAAM;AAC3F,MAAI;AACF,UAAM,EAAE,WAAW,IAAI,EAAE,IAAI,MAAM,OAAO;AAG1C,UAAM,kBAAkB,EAAE,IAAI,aAAa,WAAW,QAAQ;AAC9D,UAAM,gBAAgB,EAAE,IAAI,aAAa,IAAI,eAAe;AAG5D,UAAM,MAAM,MAAM,cAAc,qBAAqB,UAAU;AAC/D,QAAI,CAAC,KAAK;AACR,aAAO,EAAE,KAAyB;AAAA,QAChC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,GAAG,GAAG;AAAA,IACR;AAGA,UAAM,SAAS,MAAM,cAAc,gCAAgC,UAAU;AAG7E,QAAI;AACJ,QAAI,IAAI,WAAW,gBAAgB,OAAO,WAAW,WAAW;AAC9D,qBAAe;AAAA,IACjB,WAAW,IAAI,WAAW,eAAe,OAAO,WAAW,YAAY;AACrE,qBAAe;AAAA,IACjB,WAAW,IAAI,WAAW,YAAY,OAAO,WAAW,WAAW;AACjE,qBAAe;AAAA,IACjB,OAAO;AACL,qBAAe;AAAA,IACjB;AAEA,WAAO,EAAE,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,QACJ;AAAA,QACA,QAAQ;AAAA,QACR,QAAQ,OAAO,SAAS,2BAA2B,MAAM,OAAO,MAAM,IAAI;AAAA,QAC1E,OAAO,IAAI,SAAS,OAAO,SAAS;AAAA,MACtC;AAAA,IACF,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AAEd,QAAI,iBAAiB,SAAS,MAAM,QAAQ,SAAS,WAAW,GAAG;AACjE,aAAO,EAAE,KAAyB;AAAA,QAChC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,GAAG,GAAG;AAAA,IACR;AAEA,YAAQ,MAAM,sBAAsB,KAAK;AACzC,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3000c7ac8c1acd740cddc1bfc82f2ec6a39af031"}}