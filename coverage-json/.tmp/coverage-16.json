{"c:/Users/mtama/node/vector-db/src/services/vectorize.service.ts":{"path":"c:/Users/mtama/node/vector-db/src/services/vectorize.service.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":19}},"1":{"start":{"line":6,"column":4},"end":{"line":6,"column":51}},"2":{"start":{"line":9,"column":4},"end":{"line":9,"column":51}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":65}},"4":{"start":{"line":15,"column":4},"end":{"line":15,"column":56}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":59}},"6":{"start":{"line":21,"column":20},"end":{"line":21,"column":51}},"7":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"8":{"start":{"line":23,"column":6},"end":{"line":23,"column":54}},"9":{"start":{"line":25,"column":25},"end":{"line":30,"column":5}},"10":{"start":{"line":31,"column":20},"end":{"line":31,"column":69}},"11":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"12":{"start":{"line":33,"column":6},"end":{"line":33,"column":110}},"13":{"start":{"line":33,"column":58},"end":{"line":33,"column":79}},"14":{"start":{"line":35,"column":4},"end":{"line":35,"column":19}},"15":{"start":{"line":38,"column":22},"end":{"line":38,"column":32}},"16":{"start":{"line":39,"column":22},"end":{"line":39,"column":61}},"17":{"start":{"line":40,"column":4},"end":{"line":40,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":19},"end":{"line":4,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":24},"end":{"line":7,"column":3}},"line":5},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":2},"end":{"line":8,"column":3}},"loc":{"start":{"line":8,"column":24},"end":{"line":10,"column":3}},"line":8},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":31},"end":{"line":13,"column":3}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":22},"end":{"line":16,"column":3}},"line":14},"5":{"name":"(anonymous_5)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":3}},"loc":{"start":{"line":17,"column":25},"end":{"line":19,"column":3}},"line":17},"6":{"name":"(anonymous_6)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":39},"end":{"line":36,"column":3}},"line":20},"7":{"name":"(anonymous_7)","decl":{"start":{"line":33,"column":47},"end":{"line":33,"column":48}},"loc":{"start":{"line":33,"column":58},"end":{"line":33,"column":79}},"line":33},"8":{"name":"(anonymous_8)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":35},"end":{"line":41,"column":3}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},{"start":{},"end":{}}],"line":22},"1":{"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":40}},"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":16}},{"start":{"line":22,"column":20},"end":{"line":22,"column":40}}],"line":22},"2":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":81}},"type":"cond-expr","locations":[{"start":{"line":26,"column":35},"end":{"line":26,"column":59}},{"start":{"line":26,"column":62},"end":{"line":26,"column":81}}],"line":26},"3":{"loc":{"start":{"line":26,"column":36},"end":{"line":26,"column":54}},"type":"binary-expr","locations":[{"start":{"line":26,"column":36},"end":{"line":26,"column":48}},{"start":{"line":26,"column":52},"end":{"line":26,"column":54}}],"line":26},"4":{"loc":{"start":{"line":26,"column":62},"end":{"line":26,"column":81}},"type":"binary-expr","locations":[{"start":{"line":26,"column":62},"end":{"line":26,"column":75}},{"start":{"line":26,"column":79},"end":{"line":26,"column":81}}],"line":26},"5":{"loc":{"start":{"line":27,"column":17},"end":{"line":27,"column":59}},"type":"binary-expr","locations":[{"start":{"line":27,"column":17},"end":{"line":27,"column":35}},{"start":{"line":27,"column":39},"end":{"line":27,"column":59}}],"line":27},"6":{"loc":{"start":{"line":28,"column":22},"end":{"line":28,"column":53}},"type":"binary-expr","locations":[{"start":{"line":28,"column":22},"end":{"line":28,"column":45}},{"start":{"line":28,"column":49},"end":{"line":28,"column":53}}],"line":28},"7":{"loc":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},{"start":{},"end":{}}],"line":32},"8":{"loc":{"start":{"line":33,"column":90},"end":{"line":33,"column":108}},"type":"binary-expr","locations":[{"start":{"line":33,"column":90},"end":{"line":33,"column":102}},{"start":{"line":33,"column":106},"end":{"line":33,"column":108}}],"line":33},"9":{"loc":{"start":{"line":37,"column":19},"end":{"line":37,"column":33}},"type":"default-arg","locations":[{"start":{"line":37,"column":28},"end":{"line":37,"column":33}}],"line":37}},"s":{"0":15,"1":1,"2":1,"3":7,"4":8,"5":1,"6":7,"7":7,"8":1,"9":6,"10":6,"11":6,"12":2,"13":5,"14":6,"15":3,"16":3,"17":3},"f":{"0":15,"1":1,"2":1,"3":7,"4":8,"5":1,"6":7,"7":5,"8":3},"b":{"0":[1,6],"1":[7,7],"2":[2,4],"3":[2,1],"4":[4,2],"5":[6,5],"6":[6,5],"7":[2,4],"8":[2,1],"9":[2]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/services/vectorize.service.ts"],"sourcesContent":["export class VectorizeService {\n  constructor(\n    private env: Env\n  ) {}\n\n  async insert(vectors: VectorizeVector[]): Promise<void> {\n    await this.env.VECTORIZE_INDEX.insert(vectors)\n  }\n\n  async upsert(vectors: VectorizeVector[]): Promise<void> {\n    await this.env.VECTORIZE_INDEX.upsert(vectors)\n  }\n\n  async query(\n    vector: number[],\n    options?: VectorizeQueryOptions\n  ): Promise<VectorizeMatches> {\n    return await this.env.VECTORIZE_INDEX.query(vector, options)\n  }\n\n  async getByIds(ids: string[]): Promise<VectorizeVector[]> {\n    return await this.env.VECTORIZE_INDEX.getByIds(ids)\n  }\n\n  async deleteByIds(ids: string[]): Promise<{ count: number }> {\n    return await this.env.VECTORIZE_INDEX.deleteByIds(ids)\n  }\n\n  async findSimilar(\n    vectorId: string,\n    options?: VectorizeQueryOptions & { excludeSelf?: boolean }\n  ): Promise<VectorizeMatches> {\n    const vectors = await this.getByIds([vectorId])\n    if (!vectors || vectors.length === 0) {\n      throw new Error(`Vector ${vectorId} not found`)\n    }\n\n    const queryOptions: VectorizeQueryOptions = {\n      topK: options?.excludeSelf ? (options.topK || 10) + 1 : options?.topK || 10,\n      namespace: options?.namespace || vectors[0].namespace,\n      returnMetadata: options?.returnMetadata ?? true,\n      filter: options?.filter\n    }\n\n    const results = await this.query(vectors[0].values as number[], queryOptions)\n\n    if (options?.excludeSelf) {\n      results.matches = results.matches\n        .filter(match => match.id !== vectorId)\n        .slice(0, options.topK || 10)\n    }\n\n    return results\n  }\n\n  generateVectorId(prefix: string = 'vec'): string {\n    const timestamp = Date.now()\n    const randomStr = Math.random().toString(36).substr(2, 9)\n    return `${prefix}_${timestamp}_${randomStr}`\n  }\n}"],"mappings":"AAAO,aAAM,iBAAiB;AAAA,EAC5B,YACU,KACR;AADQ;AAAA,EACP;AAAA,EAEH,MAAM,OAAO,SAA2C;AACtD,UAAM,KAAK,IAAI,gBAAgB,OAAO,OAAO;AAAA,EAC/C;AAAA,EAEA,MAAM,OAAO,SAA2C;AACtD,UAAM,KAAK,IAAI,gBAAgB,OAAO,OAAO;AAAA,EAC/C;AAAA,EAEA,MAAM,MACJ,QACA,SAC2B;AAC3B,WAAO,MAAM,KAAK,IAAI,gBAAgB,MAAM,QAAQ,OAAO;AAAA,EAC7D;AAAA,EAEA,MAAM,SAAS,KAA2C;AACxD,WAAO,MAAM,KAAK,IAAI,gBAAgB,SAAS,GAAG;AAAA,EACpD;AAAA,EAEA,MAAM,YAAY,KAA2C;AAC3D,WAAO,MAAM,KAAK,IAAI,gBAAgB,YAAY,GAAG;AAAA,EACvD;AAAA,EAEA,MAAM,YACJ,UACA,SAC2B;AAC3B,UAAM,UAAU,MAAM,KAAK,SAAS,CAAC,QAAQ,CAAC;AAC9C,QAAI,CAAC,WAAW,QAAQ,WAAW,GAAG;AACpC,YAAM,IAAI,MAAM,UAAU,QAAQ,YAAY;AAAA,IAChD;AAEA,UAAM,eAAsC;AAAA,MAC1C,MAAM,SAAS,eAAe,QAAQ,QAAQ,MAAM,IAAI,SAAS,QAAQ;AAAA,MACzE,WAAW,SAAS,aAAa,QAAQ,CAAC,EAAE;AAAA,MAC5C,gBAAgB,SAAS,kBAAkB;AAAA,MAC3C,QAAQ,SAAS;AAAA,IACnB;AAEA,UAAM,UAAU,MAAM,KAAK,MAAM,QAAQ,CAAC,EAAE,QAAoB,YAAY;AAE5E,QAAI,SAAS,aAAa;AACxB,cAAQ,UAAU,QAAQ,QACvB,OAAO,WAAS,MAAM,OAAO,QAAQ,EACrC,MAAM,GAAG,QAAQ,QAAQ,EAAE;AAAA,IAChC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,iBAAiB,SAAiB,OAAe;AAC/C,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,YAAY,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AACxD,WAAO,GAAG,MAAM,IAAI,SAAS,IAAI,SAAS;AAAA,EAC5C;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e47a9f94def45419bccee3f206166ed2fc04d172"}}