{"c:/Users/mtama/node/vector-db/src/schemas/cloudflare.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/cloudflare.schema.ts","statementMap":{"0":{"start":{"line":2,"column":37},"end":{"line":7,"column":2}},"1":{"start":{"line":8,"column":36},"end":{"line":12,"column":2}},"2":{"start":{"line":13,"column":38},"end":{"line":15,"column":2}},"3":{"start":{"line":16,"column":43},"end":{"line":21,"column":2}},"4":{"start":{"line":22,"column":40},"end":{"line":25,"column":2}},"5":{"start":{"line":26,"column":41},"end":{"line":30,"column":2}},"6":{"start":{"line":31,"column":45},"end":{"line":34,"column":2}},"7":{"start":{"line":35,"column":46},"end":{"line":50,"column":2}},"8":{"start":{"line":51,"column":29},"end":{"line":57,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/cloudflare.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\n// Vectorize関連のスキーマ\nexport const VectorizeVectorSchema = z.object({\n  id: z.string(),\n  values: z.array(z.number()),\n  namespace: z.string().optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n})\n\nexport const VectorizeMatchSchema = z.object({\n  id: z.string(),\n  score: z.number(),\n  metadata: z.record(z.string(), z.any()).optional()\n})\n\nexport const VectorizeMatchesSchema = z.object({\n  matches: z.array(VectorizeMatchSchema)\n})\n\nexport const VectorizeQueryOptionsSchema = z.object({\n  topK: z.number().optional(),\n  namespace: z.string().optional(),\n  filter: z.record(z.string(), z.any()).optional(),\n  returnMetadata: z.boolean().optional()\n})\n\n// AI関連のスキーマ\nexport const AIEmbeddingRequestSchema = z.object({\n  text: z.string(),\n  model: z.string().optional()\n})\n\nexport const AIEmbeddingResponseSchema = z.object({\n  embedding: z.array(z.number()),\n  model: z.string(),\n  dimensions: z.number()\n})\n\nexport const AIBatchEmbeddingRequestSchema = z.object({\n  texts: z.array(z.string()),\n  model: z.string().optional()\n})\n\nexport const AIBatchEmbeddingResponseSchema = z.object({\n  embeddings: z.array(z.object({\n    text: z.string(),\n    embedding: z.array(z.number()).nullable(),\n    error: z.string().nullable()\n  })),\n  failed: z.array(z.object({\n    text: z.string(),\n    embedding: z.null(),\n    error: z.string()\n  })),\n  model: z.string(),\n  totalCount: z.number(),\n  successCount: z.number(),\n  failedCount: z.number()\n})\n\nexport const AIModelSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  dimensions: z.number(),\n  maxTokens: z.number(),\n  recommended: z.boolean()\n})\n\n// 型のエクスポート\nexport type VectorizeVector = z.infer<typeof VectorizeVectorSchema>\nexport type VectorizeMatch = z.infer<typeof VectorizeMatchSchema>\nexport type VectorizeMatches = z.infer<typeof VectorizeMatchesSchema>\nexport type VectorizeQueryOptions = z.infer<typeof VectorizeQueryOptionsSchema>\nexport type AIEmbeddingRequest = z.infer<typeof AIEmbeddingRequestSchema>\nexport type AIEmbeddingResponse = z.infer<typeof AIEmbeddingResponseSchema>\nexport type AIBatchEmbeddingRequest = z.infer<typeof AIBatchEmbeddingRequestSchema>\nexport type AIBatchEmbeddingResponse = z.infer<typeof AIBatchEmbeddingResponseSchema>\nexport type AIModel = z.infer<typeof AIModelSchema>"],"mappings":"AAAA,SAAS,SAAS;AAGX,aAAM,wBAAwB,EAAE,OAAO;AAAA,EAC5C,IAAI,EAAE,OAAO;AAAA,EACb,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC1B,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AACnD,CAAC;AAEM,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,IAAI,EAAE,OAAO;AAAA,EACb,OAAO,EAAE,OAAO;AAAA,EAChB,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AACnD,CAAC;AAEM,aAAM,yBAAyB,EAAE,OAAO;AAAA,EAC7C,SAAS,EAAE,MAAM,oBAAoB;AACvC,CAAC;AAEM,aAAM,8BAA8B,EAAE,OAAO;AAAA,EAClD,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,QAAQ,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,EAC/C,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AACvC,CAAC;AAGM,aAAM,2BAA2B,EAAE,OAAO;AAAA,EAC/C,MAAM,EAAE,OAAO;AAAA,EACf,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;AAEM,aAAM,4BAA4B,EAAE,OAAO;AAAA,EAChD,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC7B,OAAO,EAAE,OAAO;AAAA,EAChB,YAAY,EAAE,OAAO;AACvB,CAAC;AAEM,aAAM,gCAAgC,EAAE,OAAO;AAAA,EACpD,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EACzB,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;AAEM,aAAM,iCAAiC,EAAE,OAAO;AAAA,EACrD,YAAY,EAAE,MAAM,EAAE,OAAO;AAAA,IAC3B,MAAM,EAAE,OAAO;AAAA,IACf,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS;AAAA,IACxC,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC7B,CAAC,CAAC;AAAA,EACF,QAAQ,EAAE,MAAM,EAAE,OAAO;AAAA,IACvB,MAAM,EAAE,OAAO;AAAA,IACf,WAAW,EAAE,KAAK;AAAA,IAClB,OAAO,EAAE,OAAO;AAAA,EAClB,CAAC,CAAC;AAAA,EACF,OAAO,EAAE,OAAO;AAAA,EAChB,YAAY,EAAE,OAAO;AAAA,EACrB,cAAc,EAAE,OAAO;AAAA,EACvB,aAAa,EAAE,OAAO;AACxB,CAAC;AAEM,aAAM,gBAAgB,EAAE,OAAO;AAAA,EACpC,MAAM,EAAE,OAAO;AAAA,EACf,aAAa,EAAE,OAAO;AAAA,EACtB,YAAY,EAAE,OAAO;AAAA,EACrB,WAAW,EAAE,OAAO;AAAA,EACpB,aAAa,EAAE,QAAQ;AACzB,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cf6c44d4bedf87e7b0a9d0dbd4d1d90b7cc209de"}}