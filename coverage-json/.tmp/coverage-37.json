{"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts","statementMap":{"0":{"start":{"line":2,"column":35},"end":{"line":15,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/error.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const ErrorResponseSchema = z.object({\n  success: z.literal(false),\n  error: z.string().openapi({\n    example: 'Bad Request',\n    description: 'エラーの種類'\n  }),\n  message: z.string().openapi({\n    example: '無効なリクエストパラメータです',\n    description: 'エラーの詳細メッセージ'\n  }),\n  details: z.any().optional().openapi({\n    description: 'エラーの詳細情報'\n  })\n})\n\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,SAAS,EAAE,QAAQ,KAAK;AAAA,EACxB,OAAO,EAAE,OAAO,EAAE,QAAQ;AAAA,IACxB,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,QAAQ;AAAA,IAC1B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6a63d60aa5985710aa1a5dd58befc74fd0f881d"},"c:/Users/mtama/node/vector-db/src/schemas/embedding.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/embedding.schema.ts","statementMap":{"0":{"start":{"line":2,"column":39},"end":{"line":11,"column":2}},"1":{"start":{"line":12,"column":47},"end":{"line":20,"column":2}},"2":{"start":{"line":21,"column":36},"end":{"line":29,"column":2}},"3":{"start":{"line":30,"column":44},"end":{"line":39,"column":2}},"4":{"start":{"line":40,"column":44},"end":{"line":42,"column":2}},"5":{"start":{"line":43,"column":43},"end":{"line":52,"column":2}},"6":{"start":{"line":53,"column":31},"end":{"line":59,"column":2}},"7":{"start":{"line":60,"column":40},"end":{"line":63,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/embedding.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\n// 埋め込み生成スキーマ\nexport const GenerateEmbeddingSchema = z.object({\n  text: z.string().min(1).openapi({\n    example: 'This is a sample text to generate embeddings',\n    description: '埋め込みを生成するテキスト'\n  }),\n  model: z.string().optional().openapi({\n    example: '@cf/baai/bge-base-en-v1.5',\n    description: '使用するモデル名'\n  })\n})\n\nexport const GenerateEmbeddingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string()\n  }),\n  message: z.string()\n})\n\n// バッチ埋め込み生成スキーマ\nexport const BatchEmbeddingSchema = z.object({\n  texts: z.array(z.string()).min(1).openapi({\n    example: ['Text 1', 'Text 2', 'Text 3'],\n    description: '埋め込みを生成するテキストの配列'\n  }),\n  model: z.string().optional(),\n  batchSize: z.number().int().min(1).max(100).optional(),\n  saveToVectorize: z.boolean().optional()\n})\n\nexport const BatchEmbeddingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    textsCount: z.number()\n  }),\n  message: z.string()\n})\n\n// スケジュールバッチ埋め込みスキーマ\nexport const ScheduleBatchEmbeddingSchema = BatchEmbeddingSchema.extend({\n  delayMs: z.number().int().min(0).optional()\n})\n\nexport const ScheduleBatchResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string().optional(),\n    status: z.string(),\n    textsCount: z.number()\n  }),\n  message: z.string()\n})\n\n// モデル情報スキーマ\nexport const ModelInfoSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  dimensions: z.number(),\n  maxTokens: z.number(),\n  recommended: z.boolean()\n})\n\nexport const ListModelsResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.array(ModelInfoSchema)\n})\n\n// 型定義のエクスポート\nexport type GenerateEmbedding = z.infer<typeof GenerateEmbeddingSchema>\nexport type GenerateEmbeddingResponse = z.infer<typeof GenerateEmbeddingResponseSchema>\nexport type BatchEmbedding = z.infer<typeof BatchEmbeddingSchema>\nexport type BatchEmbeddingResponse = z.infer<typeof BatchEmbeddingResponseSchema>\nexport type ScheduleBatchEmbedding = z.infer<typeof ScheduleBatchEmbeddingSchema>\nexport type ScheduleBatchResponse = z.infer<typeof ScheduleBatchResponseSchema>\nexport type ModelInfo = z.infer<typeof ModelInfoSchema>\nexport type ListModelsResponse = z.infer<typeof ListModelsResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAGX,aAAM,0BAA0B,EAAE,OAAO;AAAA,EAC9C,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC9B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACnC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,kCAAkC,EAAE,OAAO;AAAA,EACtD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,EACnB,CAAC;AAAA,EACD,SAAS,EAAE,OAAO;AACpB,CAAC;AAGM,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IACxC,SAAS,CAAC,UAAU,UAAU,QAAQ;AAAA,IACtC,aAAa;AAAA,EACf,CAAC;AAAA,EACD,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,SAAS;AAAA,EACrD,iBAAiB,EAAE,QAAQ,EAAE,SAAS;AACxC,CAAC;AAEM,aAAM,+BAA+B,EAAE,OAAO;AAAA,EACnD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,YAAY,EAAE,OAAO;AAAA,EACvB,CAAC;AAAA,EACD,SAAS,EAAE,OAAO;AACpB,CAAC;AAGM,aAAM,+BAA+B,qBAAqB,OAAO;AAAA,EACtE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,SAAS;AAC5C,CAAC;AAEM,aAAM,8BAA8B,EAAE,OAAO;AAAA,EAClD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO,EAAE,SAAS;AAAA,IAChC,QAAQ,EAAE,OAAO;AAAA,IACjB,YAAY,EAAE,OAAO;AAAA,EACvB,CAAC;AAAA,EACD,SAAS,EAAE,OAAO;AACpB,CAAC;AAGM,aAAM,kBAAkB,EAAE,OAAO;AAAA,EACtC,MAAM,EAAE,OAAO;AAAA,EACf,aAAa,EAAE,OAAO;AAAA,EACtB,YAAY,EAAE,OAAO;AAAA,EACrB,WAAW,EAAE,OAAO;AAAA,EACpB,aAAa,EAAE,QAAQ;AACzB,CAAC;AAEM,aAAM,2BAA2B,EAAE,OAAO;AAAA,EAC/C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,MAAM,eAAe;AAC/B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"286b2567c213386e5f4a34b368118ca0a79a91a0"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/generate.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/generate.ts","statementMap":{"0":{"start":{"line":8,"column":17},"end":{"line":8,"column":80}},"1":{"start":{"line":9,"column":2},"end":{"line":13,"column":4}},"2":{"start":{"line":15,"column":38},"end":{"line":56,"column":2}},"3":{"start":{"line":57,"column":40},"end":{"line":72,"column":1}},"4":{"start":{"line":58,"column":2},"end":{"line":71,"column":3}},"5":{"start":{"line":59,"column":17},"end":{"line":59,"column":36}},"6":{"start":{"line":60,"column":27},"end":{"line":60,"column":68}},"7":{"start":{"line":61,"column":25},"end":{"line":61,"column":64}},"8":{"start":{"line":62,"column":21},"end":{"line":62,"column":64}},"9":{"start":{"line":63,"column":4},"end":{"line":63,"column":33}},"10":{"start":{"line":65,"column":4},"end":{"line":65,"column":56}},"11":{"start":{"line":66,"column":4},"end":{"line":70,"column":12}}},"fnMap":{"0":{"name":"generateEmbedding","decl":{"start":{"line":7,"column":22},"end":{"line":7,"column":39}},"loc":{"start":{"line":7,"column":62},"end":{"line":14,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":57,"column":40},"end":{"line":57,"column":41}},"loc":{"start":{"line":57,"column":53},"end":{"line":72,"column":1}},"line":57}},"branchMap":{"0":{"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":76}},"type":"cond-expr","locations":[{"start":{"line":69,"column":40},"end":{"line":69,"column":53}},{"start":{"line":69,"column":56},"end":{"line":69,"column":76}}],"line":69}},"s":{"0":0,"1":0,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"f":{"0":0,"1":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/generate.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  GenerateEmbeddingSchema,\n  GenerateEmbeddingResponseSchema,\n  type GenerateEmbedding,\n  type GenerateEmbeddingResponse\n} from '../../../schemas/embedding.schema'\nimport { AIEmbeddings } from '@/durable-objects'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// 埋め込み生成ロジック\nexport async function generateEmbedding(\n  params: GenerateEmbedding,\n  aiEmbeddings: DurableObjectStub<AIEmbeddings>\n): Promise<GenerateEmbeddingResponse> {\n  const result = await aiEmbeddings.generateEmbedding(params.text, params.model)\n  \n  return {\n    success: true,\n    data: result,\n    message: 'テキストの処理を開始しました'\n  }\n}\n\n// 埋め込み生成ルート\nexport const generateEmbeddingRoute = createRoute({\n  method: 'post',\n  path: '/embeddings',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: GenerateEmbeddingSchema\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: GenerateEmbeddingResponseSchema\n        }\n      },\n      description: '処理が開始されました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: 'テキスト埋め込み生成',\n  description: 'Workers AIを使用してテキストの埋め込みベクトルを非同期で生成します。処理状況はWorkflow IDで確認できます。'\n})\n\n// 埋め込み生成ハンドラー\nexport const generateEmbeddingHandler: RouteHandler<typeof generateEmbeddingRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n\n    // Durable Objectを使用\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n\n    const response = await generateEmbedding(body, aiEmbeddings)\n    return c.json(response, 200)\n  } catch (error) {\n    console.error('Embedding generation error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '埋め込み生成中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,EACA;AAAA,OAGK;AASP,sBAAsB,kBACpB,QACA,cACoC;AACpC,QAAM,SAAS,MAAM,aAAa,kBAAkB,OAAO,MAAM,OAAO,KAAK;AAE7E,SAAO;AAAA,IACL,SAAS;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF;AAGO,aAAM,yBAAyB,YAAY;AAAA,EAChD,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,2BAAiF,OAAO,MAAM;AACzG,MAAI;AACF,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,WAAW,MAAM,kBAAkB,MAAM,YAAY;AAC3D,WAAO,EAAE,KAAK,UAAU,GAAG;AAAA,EAC7B,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cd457445b91e81f0ce8fd99f53037d6939f68cac"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/batch.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/batch.ts","statementMap":{"0":{"start":{"line":7,"column":35},"end":{"line":48,"column":2}},"1":{"start":{"line":49,"column":37},"end":{"line":75,"column":1}},"2":{"start":{"line":50,"column":2},"end":{"line":74,"column":3}},"3":{"start":{"line":51,"column":17},"end":{"line":51,"column":36}},"4":{"start":{"line":52,"column":27},"end":{"line":52,"column":68}},"5":{"start":{"line":53,"column":25},"end":{"line":53,"column":64}},"6":{"start":{"line":54,"column":19},"end":{"line":61,"column":5}},"7":{"start":{"line":62,"column":4},"end":{"line":66,"column":12}},"8":{"start":{"line":68,"column":4},"end":{"line":68,"column":62}},"9":{"start":{"line":69,"column":4},"end":{"line":73,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":49,"column":37},"end":{"line":49,"column":38}},"loc":{"start":{"line":49,"column":50},"end":{"line":75,"column":1}},"line":49}},"branchMap":{"0":{"loc":{"start":{"line":72,"column":15},"end":{"line":72,"column":79}},"type":"cond-expr","locations":[{"start":{"line":72,"column":40},"end":{"line":72,"column":53}},{"start":{"line":72,"column":56},"end":{"line":72,"column":79}}],"line":72}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/batch.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  BatchEmbeddingSchema,\n  BatchEmbeddingResponseSchema\n} from '../../../schemas/embedding.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// バッチ埋め込み生成ルート\nexport const batchEmbeddingRoute = createRoute({\n  method: 'post',\n  path: '/embeddings/batch',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: BatchEmbeddingSchema\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: BatchEmbeddingResponseSchema\n        }\n      },\n      description: 'バッチ処理が開始されました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: 'バッチテキスト埋め込み生成',\n  description: '複数のテキストの埋め込みベクトルを非同期で一括生成します。処理状況はWorkflow IDで確認できます。'\n})\n\n// バッチ埋め込み生成ハンドラー\nexport const batchEmbeddingHandler: RouteHandler<typeof batchEmbeddingRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n    \n    // Durable Objectを使用\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n    \n    const result = await aiEmbeddings.generateBatchEmbeddings(\n      body.texts,\n      body.model,\n      {\n        batchSize: body.batchSize,\n        saveToVectorize: body.saveToVectorize\n      }\n    )\n    \n    return c.json({\n      success: true,\n      data: result,\n      message: `${result.textsCount}件のテキストの処理を開始しました`\n    }, 200)\n  } catch (error) {\n    console.error('Batch embedding generation error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'バッチ埋め込み生成中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAQA,aAAM,sBAAsB,YAAY;AAAA,EAC7C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,wBAA2E,OAAO,MAAM;AACnG,MAAI;AACF,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,SAAS,MAAM,aAAa;AAAA,MAChC,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,QACE,WAAW,KAAK;AAAA,QAChB,iBAAiB,KAAK;AAAA,MACxB;AAAA,IACF;AAEA,WAAO,EAAE,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS,GAAG,OAAO,UAAU;AAAA,IAC/B,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AACxD,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bf10cdd4a17440fdb0d53dc8372f667fe5b9b40d"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/schedule.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/schedule.ts","statementMap":{"0":{"start":{"line":7,"column":43},"end":{"line":48,"column":2}},"1":{"start":{"line":49,"column":45},"end":{"line":76,"column":1}},"2":{"start":{"line":50,"column":2},"end":{"line":75,"column":3}},"3":{"start":{"line":51,"column":17},"end":{"line":51,"column":36}},"4":{"start":{"line":52,"column":27},"end":{"line":52,"column":68}},"5":{"start":{"line":53,"column":25},"end":{"line":53,"column":64}},"6":{"start":{"line":54,"column":19},"end":{"line":62,"column":5}},"7":{"start":{"line":63,"column":4},"end":{"line":67,"column":12}},"8":{"start":{"line":69,"column":4},"end":{"line":69,"column":60}},"9":{"start":{"line":70,"column":4},"end":{"line":74,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":49,"column":45},"end":{"line":49,"column":46}},"loc":{"start":{"line":49,"column":58},"end":{"line":76,"column":1}},"line":49}},"branchMap":{"0":{"loc":{"start":{"line":73,"column":15},"end":{"line":73,"column":82}},"type":"cond-expr","locations":[{"start":{"line":73,"column":40},"end":{"line":73,"column":53}},{"start":{"line":73,"column":56},"end":{"line":73,"column":82}}],"line":73}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/schedule.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  ScheduleBatchEmbeddingSchema,\n  ScheduleBatchResponseSchema\n} from '../../../schemas/embedding.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// スケジュールバッチ埋め込みルート\nexport const scheduleBatchEmbeddingRoute = createRoute({\n  method: 'post',\n  path: '/embeddings/schedule',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: ScheduleBatchEmbeddingSchema\n        }\n      }\n    }\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: ScheduleBatchResponseSchema\n        }\n      },\n      description: 'バッチ処理がスケジュールされました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: 'バッチ埋め込み生成のスケジュール',\n  description: 'バッチ埋め込み生成を非同期でスケジュールします'\n})\n\n// スケジュールバッチ埋め込みハンドラー\nexport const scheduleBatchEmbeddingHandler: RouteHandler<typeof scheduleBatchEmbeddingRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n    \n    // Durable Objectを使用\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n    \n    const result = await aiEmbeddings.scheduleBatchEmbeddings(\n      body.texts,\n      body.model,\n      {\n        batchSize: body.batchSize,\n        saveToVectorize: body.saveToVectorize,\n        delayMs: body.delayMs\n      }\n    )\n    \n    return c.json({\n      success: true,\n      data: result,\n      message: `${result.textsCount}件のテキストの処理がスケジュールされました`\n    }, 200)\n  } catch (error) {\n    console.error('Schedule batch embedding error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'バッチ処理のスケジュール中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAQA,aAAM,8BAA8B,YAAY;AAAA,EACrD,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,gCAA2F,OAAO,MAAM;AACnH,MAAI;AACF,UAAM,OAAO,EAAE,IAAI,MAAM,MAAM;AAG/B,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,SAAS,MAAM,aAAa;AAAA,MAChC,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,QACE,WAAW,KAAK;AAAA,QAChB,iBAAiB,KAAK;AAAA,QACtB,SAAS,KAAK;AAAA,MAChB;AAAA,IACF;AAEA,WAAO,EAAE,KAAK;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS,GAAG,OAAO,UAAU;AAAA,IAC/B,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AACtD,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6cd264b8abcd8c50fc320162eeb7abc6a26962ca"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/models.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/models.ts","statementMap":{"0":{"start":{"line":6,"column":31},"end":{"line":30,"column":2}},"1":{"start":{"line":31,"column":33},"end":{"line":48,"column":1}},"2":{"start":{"line":32,"column":2},"end":{"line":47,"column":3}},"3":{"start":{"line":33,"column":27},"end":{"line":33,"column":68}},"4":{"start":{"line":34,"column":25},"end":{"line":34,"column":64}},"5":{"start":{"line":35,"column":19},"end":{"line":35,"column":58}},"6":{"start":{"line":36,"column":4},"end":{"line":39,"column":12}},"7":{"start":{"line":41,"column":4},"end":{"line":41,"column":47}},"8":{"start":{"line":42,"column":4},"end":{"line":46,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":31,"column":33},"end":{"line":31,"column":34}},"loc":{"start":{"line":31,"column":46},"end":{"line":48,"column":1}},"line":31}},"branchMap":{"0":{"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":78}},"type":"cond-expr","locations":[{"start":{"line":45,"column":40},"end":{"line":45,"column":53}},{"start":{"line":45,"column":56},"end":{"line":45,"column":78}}],"line":45}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/models.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport {\n  ListModelsResponseSchema,\n  type ListModelsResponse\n} from '../../../schemas/embedding.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// 利用可能なモデル一覧ルート\nexport const listModelsRoute = createRoute({\n  method: 'get',\n  path: '/embeddings/models',\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: ListModelsResponseSchema\n        }\n      },\n      description: '利用可能なモデル一覧'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Embeddings'],\n  summary: '利用可能なモデル一覧',\n  description: '埋め込み生成に利用可能なモデルの一覧を取得します'\n})\n\n// 利用可能なモデル一覧ハンドラー\nexport const listModelsHandler: RouteHandler<typeof listModelsRoute, EnvType> = async (c) => {\n  try {\n    const aiEmbeddingsId = c.env.AI_EMBEDDINGS.idFromName('default')\n    const aiEmbeddings = c.env.AI_EMBEDDINGS.get(aiEmbeddingsId)\n    \n    const models = await aiEmbeddings.getAvailableModels()\n    \n    return c.json<ListModelsResponse, 200>({\n      success: true,\n      data: models\n    }, 200)\n  } catch (error) {\n    console.error('List models error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'モデル一覧の取得中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,2BAA+C;AACxD;AAAA,EACE;AAAA,OAEK;AAQA,aAAM,kBAAkB,YAAY;AAAA,EACzC,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,YAAY;AAAA,EACnB,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,oBAAmE,OAAO,MAAM;AAC3F,MAAI;AACF,UAAM,iBAAiB,EAAE,IAAI,cAAc,WAAW,SAAS;AAC/D,UAAM,eAAe,EAAE,IAAI,cAAc,IAAI,cAAc;AAE3D,UAAM,SAAS,MAAM,aAAa,mBAAmB;AAErD,WAAO,EAAE,KAA8B;AAAA,MACrC,SAAS;AAAA,MACT,MAAM;AAAA,IACR,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,sBAAsB,KAAK;AACzC,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c29656ed22158313231357f74db97f7175e74b06"},"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/embeddings/index.ts","statementMap":{"0":{"start":{"line":6,"column":2},"end":{"line":6,"column":64}},"1":{"start":{"line":7,"column":2},"end":{"line":7,"column":58}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":74}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":15},"end":{"line":5,"column":16}},"loc":{"start":{"line":5,"column":24},"end":{"line":10,"column":1}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/embeddings/index.ts"],"sourcesContent":["import type { OpenAPIHono } from '@hono/zod-openapi'\nimport { generateEmbeddingRoute, generateEmbeddingHandler } from './generate'\nimport { batchEmbeddingRoute, batchEmbeddingHandler } from './batch'\nimport { scheduleBatchEmbeddingRoute, scheduleBatchEmbeddingHandler } from './schedule'\nimport { listModelsRoute, listModelsHandler } from './models'\n\n// エクスポート用関数\nexport default (app: OpenAPIHono<{ Bindings: Env }>) => {\n  app.openapi(generateEmbeddingRoute, generateEmbeddingHandler)\n  app.openapi(batchEmbeddingRoute, batchEmbeddingHandler)\n  app.openapi(scheduleBatchEmbeddingRoute, scheduleBatchEmbeddingHandler)\n  app.openapi(listModelsRoute, listModelsHandler)\n}"],"mappings":"AACA,SAAS,wBAAwB,gCAAgC;AACjE,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,6BAA6B,qCAAqC;AAC3E,SAAS,iBAAiB,yBAAyB;AAGnD,eAAe,CAAC,QAAwC;AACtD,MAAI,QAAQ,wBAAwB,wBAAwB;AAC5D,MAAI,QAAQ,qBAAqB,qBAAqB;AACtD,MAAI,QAAQ,6BAA6B,6BAA6B;AACtE,MAAI,QAAQ,iBAAiB,iBAAiB;AAChD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"26230add5a31eb1066ef4d7570276f101873ebf0"}}