{"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts","statementMap":{"0":{"start":{"line":2,"column":34},"end":{"line":2,"column":115}},"1":{"start":{"line":3,"column":32},"end":{"line":12,"column":2}},"2":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"3":{"start":{"line":13,"column":44},"end":{"line":26,"column":2}},"4":{"start":{"line":27,"column":42},"end":{"line":38,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":4,"3":1,"4":1},"f":{"0":4},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\nimport { VectorMetadataSchema } from './vector.schema'\n\n// サポートするファイルタイプ\nexport const SupportedFileTypes = z.enum(['application/pdf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp'])\n\n// ファイルアップロードのフォームデータスキーマ\nexport const FileUploadSchema = z.object({\n  file: z.instanceof(File).refine(\n    (file) => file.size <= 10 * 1024 * 1024, // 10MB max\n    { message: 'ファイルサイズは10MB以下にしてください' }\n  ),\n  namespace: z.string().optional(),\n  metadata: z.string().optional() // JSON string として受け取る\n})\n\n// ファイル処理レスポンススキーマ\nexport const FileProcessingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    fileInfo: z.object({\n      name: z.string(),\n      type: z.string(),\n      size: z.number()\n    }),\n    message: z.string()\n  })\n})\n\n// ファイル処理結果スキーマ\nexport const FileProcessingResultSchema = z.object({\n  type: z.enum(['pdf', 'image']),\n  success: z.boolean(),\n  content: z.object({\n    text: z.string().optional(),\n    description: z.string().optional(),\n    extractedPages: z.number().optional(),\n    metadata: z.record(z.string(), z.any()).optional()\n  }),\n  vectorIds: z.array(z.string()),\n  error: z.string().optional()\n})\n\nexport type SupportedFileType = z.infer<typeof SupportedFileTypes>\nexport type FileUpload = z.infer<typeof FileUploadSchema>\nexport type FileProcessingResponse = z.infer<typeof FileProcessingResponseSchema>\nexport type FileProcessingResult = z.infer<typeof FileProcessingResultSchema>"],"mappings":"AAAA,SAAS,SAAS;AAIX,aAAM,qBAAqB,EAAE,KAAK,CAAC,mBAAmB,cAAc,aAAa,aAAa,YAAY,CAAC;AAG3G,aAAM,mBAAmB,EAAE,OAAO;AAAA,EACvC,MAAM,EAAE,WAAW,IAAI,EAAE;AAAA,IACvB,CAAC,SAAS,KAAK,QAAQ,KAAK,OAAO;AAAA;AAAA,IACnC,EAAE,SAAS,wBAAwB;AAAA,EACrC;AAAA,EACA,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA;AAChC,CAAC;AAGM,aAAM,+BAA+B,EAAE,OAAO;AAAA,EACnD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,UAAU,EAAE,OAAO;AAAA,MACjB,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,IACjB,CAAC;AAAA,IACD,SAAS,EAAE,OAAO;AAAA,EACpB,CAAC;AACH,CAAC;AAGM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,MAAM,EAAE,KAAK,CAAC,OAAO,OAAO,CAAC;AAAA,EAC7B,SAAS,EAAE,QAAQ;AAAA,EACnB,SAAS,EAAE,OAAO;AAAA,IAChB,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,IAC1B,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,IACjC,gBAAgB,EAAE,OAAO,EAAE,SAAS;AAAA,IACpC,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,EACnD,CAAC;AAAA,EACD,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC7B,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6e626a4d2276b65170457ff69db0772446520387"}}