{"c:/Users/mtama/node/vector-db/src/workflows/vector-operations.ts":{"path":"c:/Users/mtama/node/vector-db/src/workflows/vector-operations.ts","statementMap":{"0":{"start":{"line":3,"column":36},"end":{"line":9,"column":2}},"1":{"start":{"line":10,"column":36},"end":{"line":13,"column":2}},"2":{"start":{"line":14,"column":43},"end":{"line":17,"column":2}},"3":{"start":{"line":20,"column":19},"end":{"line":20,"column":67}},"4":{"start":{"line":21,"column":4},"end":{"line":25,"column":5}},"5":{"start":{"line":22,"column":6},"end":{"line":22,"column":60}},"6":{"start":{"line":24,"column":6},"end":{"line":24,"column":60}},"7":{"start":{"line":28,"column":4},"end":{"line":72,"column":5}},"8":{"start":{"line":29,"column":24},"end":{"line":39,"column":8}},"9":{"start":{"line":30,"column":22},"end":{"line":30,"column":70}},"10":{"start":{"line":31,"column":25},"end":{"line":31,"column":76}},"11":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"12":{"start":{"line":33,"column":10},"end":{"line":33,"column":58}},"13":{"start":{"line":35,"column":8},"end":{"line":38,"column":10}},"14":{"start":{"line":40,"column":23},"end":{"line":42,"column":8}},"15":{"start":{"line":41,"column":8},"end":{"line":41,"column":78}},"16":{"start":{"line":43,"column":6},"end":{"line":57,"column":9}},"17":{"start":{"line":44,"column":23},"end":{"line":55,"column":9}},"18":{"start":{"line":56,"column":8},"end":{"line":56,"column":56}},"19":{"start":{"line":58,"column":6},"end":{"line":64,"column":8}},"20":{"start":{"line":66,"column":6},"end":{"line":71,"column":8}},"21":{"start":{"line":75,"column":4},"end":{"line":92,"column":5}},"22":{"start":{"line":76,"column":21},"end":{"line":78,"column":8}},"23":{"start":{"line":77,"column":8},"end":{"line":77,"column":76}},"24":{"start":{"line":79,"column":6},"end":{"line":84,"column":8}},"25":{"start":{"line":86,"column":6},"end":{"line":91,"column":8}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":2},"end":{"line":19,"column":3}},"loc":{"start":{"line":19,"column":25},"end":{"line":26,"column":3}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":2},"end":{"line":27,"column":3}},"loc":{"start":{"line":27,"column":44},"end":{"line":73,"column":3}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":60},"end":{"line":29,"column":61}},"loc":{"start":{"line":29,"column":72},"end":{"line":39,"column":7}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":57},"end":{"line":40,"column":58}},"loc":{"start":{"line":40,"column":69},"end":{"line":42,"column":7}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":41},"end":{"line":43,"column":42}},"loc":{"start":{"line":43,"column":53},"end":{"line":57,"column":7}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":74,"column":2},"end":{"line":74,"column":3}},"loc":{"start":{"line":74,"column":44},"end":{"line":93,"column":3}},"line":74},"6":{"name":"(anonymous_6)","decl":{"start":{"line":76,"column":60},"end":{"line":76,"column":61}},"loc":{"start":{"line":76,"column":72},"end":{"line":78,"column":7}},"line":76}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":4},"end":{"line":25,"column":5}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":25,"column":5}},{"start":{"line":23,"column":11},"end":{"line":25,"column":5}}],"line":21},"1":{"loc":{"start":{"line":30,"column":22},"end":{"line":30,"column":70}},"type":"binary-expr","locations":[{"start":{"line":30,"column":22},"end":{"line":30,"column":34}},{"start":{"line":30,"column":38},"end":{"line":30,"column":70}}],"line":30},"2":{"loc":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},{"start":{},"end":{}}],"line":32},"3":{"loc":{"start":{"line":32,"column":12},"end":{"line":32,"column":81}},"type":"binary-expr","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":33}},{"start":{"line":32,"column":37},"end":{"line":32,"column":51}},{"start":{"line":32,"column":55},"end":{"line":32,"column":81}}],"line":32},"4":{"loc":{"start":{"line":47,"column":21},"end":{"line":47,"column":50}},"type":"binary-expr","locations":[{"start":{"line":47,"column":21},"end":{"line":47,"column":37}},{"start":{"line":47,"column":41},"end":{"line":47,"column":50}}],"line":47},"5":{"loc":{"start":{"line":52,"column":15},"end":{"line":52,"column":51}},"type":"binary-expr","locations":[{"start":{"line":52,"column":15},"end":{"line":52,"column":26}},{"start":{"line":52,"column":30},"end":{"line":52,"column":51}}],"line":52},"6":{"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":71}},"type":"cond-expr","locations":[{"start":{"line":69,"column":40},"end":{"line":69,"column":53}},{"start":{"line":69,"column":56},"end":{"line":69,"column":71}}],"line":69},"7":{"loc":{"start":{"line":89,"column":15},"end":{"line":89,"column":71}},"type":"cond-expr","locations":[{"start":{"line":89,"column":40},"end":{"line":89,"column":53}},{"start":{"line":89,"column":56},"end":{"line":89,"column":71}}],"line":89}},"s":{"0":1,"1":1,"2":1,"3":16,"4":12,"5":7,"6":5,"7":7,"8":7,"9":6,"10":6,"11":6,"12":2,"13":4,"14":4,"15":4,"16":4,"17":4,"18":4,"19":3,"20":4,"21":5,"22":5,"23":4,"24":3,"25":2},"f":{"0":16,"1":7,"2":6,"3":4,"4":4,"5":5,"6":4},"b":{"0":[7,5],"1":[6,5],"2":[2,4],"3":[6,5,5],"4":[4,3],"5":[4,4],"6":[3,1],"7":[1,1]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/workflows/vector-operations.ts"],"sourcesContent":["import { WorkflowEntrypoint, WorkflowEvent, WorkflowStep } from 'cloudflare:workers'\nimport { z } from 'zod'\n\n// Zodスキーマで型を定義\nconst CreateOperationParamsSchema = z.object({\n  type: z.literal('create'),\n  text: z.string(),\n  model: z.string().optional(),\n  namespace: z.string().optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n})\n\nconst DeleteOperationParamsSchema = z.object({\n  type: z.literal('delete'),\n  vectorIds: z.array(z.string())\n})\n\nexport const VectorOperationParamsSchema = z.discriminatedUnion('type', [\n  CreateOperationParamsSchema,\n  DeleteOperationParamsSchema\n])\n\nexport type VectorOperationParams = z.infer<typeof VectorOperationParamsSchema>\n\nexport interface VectorOperationResult {\n  type: 'create' | 'delete'\n  success: boolean\n  // For create operations\n  vectorId?: string\n  dimensions?: number\n  // For delete operations\n  deletedCount?: number\n  // Common\n  error?: string\n  completedAt: string\n}\n\nexport class VectorOperationsWorkflow extends WorkflowEntrypoint<Env, VectorOperationParams> {\n  async run(event: WorkflowEvent<VectorOperationParams>, step: WorkflowStep): Promise<VectorOperationResult> {\n    // Zodでパラメータを検証\n    const params = VectorOperationParamsSchema.parse(event.payload)\n\n    if (params.type === 'create') {\n      return await this.handleCreateOperation(params, step)\n    } else {\n      return await this.handleDeleteOperation(params, step)\n    }\n  }\n\n  private async handleCreateOperation(\n    params: z.infer<typeof CreateOperationParamsSchema>,\n    step: WorkflowStep\n  ): Promise<VectorOperationResult> {\n    try {\n      // Step 1: Generate embedding\n      const embedding = await step.do('generate-embedding', async () => {\n        const model = params.model || this.env.DEFAULT_EMBEDDING_MODEL\n        // BaseAiTextEmbeddingsModelsの型を使用\n        const aiResult = await this.env.AI.run(model as keyof AiModels, { text: params.text })\n\n        if (!('data' in aiResult) || !aiResult.data || aiResult.data.length === 0) {\n          throw new Error('Failed to generate embedding')\n        }\n\n        return {\n          embedding: aiResult.data[0],\n          model\n        }\n      })\n\n      // Step 2: Create vector ID\n      const vectorId = await step.do('create-vector-id', async () => {\n        return `vec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      })\n\n      // Step 3: Save to Vectorize\n      await step.do('save-to-vectorize', async () => {\n        const vector: VectorizeVector = {\n          id: vectorId,\n          values: embedding.embedding,\n          namespace: params.namespace || 'default',\n          metadata: {\n            ...params.metadata,\n            model: embedding.model,\n            dimensions: embedding.embedding.length.toString(),\n            ...(params.text && { text: params.text }),\n            createdAt: new Date().toISOString()\n          }\n        }\n\n        await this.env.VECTORIZE_INDEX.insert([vector])\n      })\n\n      return {\n        type: 'create',\n        success: true,\n        vectorId,\n        dimensions: embedding.embedding.length,\n        completedAt: new Date().toISOString()\n      }\n    } catch (error) {\n      return {\n        type: 'create',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        completedAt: new Date().toISOString()\n      }\n    }\n  }\n\n  private async handleDeleteOperation(\n    params: z.infer<typeof DeleteOperationParamsSchema>,\n    step: WorkflowStep\n  ): Promise<VectorOperationResult> {\n    try {\n      // Delete vectors from Vectorize\n      const result = await step.do('delete-from-vectorize', async () => {\n        return await this.env.VECTORIZE_INDEX.deleteByIds(params.vectorIds)\n      })\n\n      return {\n        type: 'delete',\n        success: true,\n        deletedCount: result.count,\n        completedAt: new Date().toISOString()\n      }\n    } catch (error) {\n      return {\n        type: 'delete',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        completedAt: new Date().toISOString()\n      }\n    }\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0b717ea786dd53bb8006a1bb138e1053e3db679a"}}