{"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts","statementMap":{"0":{"start":{"line":2,"column":34},"end":{"line":2,"column":115}},"1":{"start":{"line":3,"column":32},"end":{"line":12,"column":2}},"2":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"3":{"start":{"line":13,"column":44},"end":{"line":26,"column":2}},"4":{"start":{"line":27,"column":42},"end":{"line":38,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":14},"end":{"line":5,"column":43}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":0,"3":1,"4":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/file-upload.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\nimport { VectorMetadataSchema } from './vector.schema'\n\n// サポートするファイルタイプ\nexport const SupportedFileTypes = z.enum(['application/pdf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp'])\n\n// ファイルアップロードのフォームデータスキーマ\nexport const FileUploadSchema = z.object({\n  file: z.instanceof(File).refine(\n    (file) => file.size <= 10 * 1024 * 1024, // 10MB max\n    { message: 'ファイルサイズは10MB以下にしてください' }\n  ),\n  namespace: z.string().optional(),\n  metadata: z.string().optional() // JSON string として受け取る\n})\n\n// ファイル処理レスポンススキーマ\nexport const FileProcessingResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    fileInfo: z.object({\n      name: z.string(),\n      type: z.string(),\n      size: z.number()\n    }),\n    message: z.string()\n  })\n})\n\n// ファイル処理結果スキーマ\nexport const FileProcessingResultSchema = z.object({\n  type: z.enum(['pdf', 'image']),\n  success: z.boolean(),\n  content: z.object({\n    text: z.string().optional(),\n    description: z.string().optional(),\n    extractedPages: z.number().optional(),\n    metadata: z.record(z.string(), z.any()).optional()\n  }),\n  vectorIds: z.array(z.string()),\n  error: z.string().optional()\n})\n\nexport type SupportedFileType = z.infer<typeof SupportedFileTypes>\nexport type FileUpload = z.infer<typeof FileUploadSchema>\nexport type FileProcessingResponse = z.infer<typeof FileProcessingResponseSchema>\nexport type FileProcessingResult = z.infer<typeof FileProcessingResultSchema>"],"mappings":"AAAA,SAAS,SAAS;AAIX,aAAM,qBAAqB,EAAE,KAAK,CAAC,mBAAmB,cAAc,aAAa,aAAa,YAAY,CAAC;AAG3G,aAAM,mBAAmB,EAAE,OAAO;AAAA,EACvC,MAAM,EAAE,WAAW,IAAI,EAAE;AAAA,IACvB,CAAC,SAAS,KAAK,QAAQ,KAAK,OAAO;AAAA;AAAA,IACnC,EAAE,SAAS,wBAAwB;AAAA,EACrC;AAAA,EACA,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA;AAChC,CAAC;AAGM,aAAM,+BAA+B,EAAE,OAAO;AAAA,EACnD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,UAAU,EAAE,OAAO;AAAA,MACjB,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,MACf,MAAM,EAAE,OAAO;AAAA,IACjB,CAAC;AAAA,IACD,SAAS,EAAE,OAAO;AAAA,EACpB,CAAC;AACH,CAAC;AAGM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,MAAM,EAAE,KAAK,CAAC,OAAO,OAAO,CAAC;AAAA,EAC7B,SAAS,EAAE,QAAQ;AAAA,EACnB,SAAS,EAAE,OAAO;AAAA,IAChB,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,IAC1B,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,IACjC,gBAAgB,EAAE,OAAO,EAAE,SAAS;AAAA,IACpC,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,EACnD,CAAC;AAAA,EACD,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAC7B,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6e626a4d2276b65170457ff69db0772446520387"},"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts","statementMap":{"0":{"start":{"line":2,"column":35},"end":{"line":15,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/error.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const ErrorResponseSchema = z.object({\n  success: z.literal(false),\n  error: z.string().openapi({\n    example: 'Bad Request',\n    description: 'エラーの種類'\n  }),\n  message: z.string().openapi({\n    example: '無効なリクエストパラメータです',\n    description: 'エラーの詳細メッセージ'\n  }),\n  details: z.any().optional().openapi({\n    description: 'エラーの詳細情報'\n  })\n})\n\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,SAAS,EAAE,QAAQ,KAAK;AAAA,EACxB,OAAO,EAAE,OAAO,EAAE,QAAQ;AAAA,IACxB,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,QAAQ;AAAA,IAC1B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6a63d60aa5985710aa1a5dd58befc74fd0f881d"},"c:/Users/mtama/node/vector-db/src/routes/api/files/upload.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/files/upload.ts","statementMap":{"0":{"start":{"line":7,"column":23},"end":{"line":18,"column":2}},"1":{"start":{"line":8,"column":2},"end":{"line":8,"column":22}},"2":{"start":{"line":8,"column":12},"end":{"line":8,"column":22}},"3":{"start":{"line":9,"column":2},"end":{"line":17,"column":3}},"4":{"start":{"line":10,"column":4},"end":{"line":10,"column":27}},"5":{"start":{"line":12,"column":4},"end":{"line":15,"column":7}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":19}},"7":{"start":{"line":19,"column":31},"end":{"line":81,"column":2}},"8":{"start":{"line":82,"column":33},"end":{"line":148,"column":1}},"9":{"start":{"line":83,"column":2},"end":{"line":147,"column":3}},"10":{"start":{"line":84,"column":21},"end":{"line":84,"column":43}},"11":{"start":{"line":85,"column":17},"end":{"line":85,"column":37}},"12":{"start":{"line":86,"column":22},"end":{"line":86,"column":47}},"13":{"start":{"line":87,"column":24},"end":{"line":87,"column":48}},"14":{"start":{"line":88,"column":4},"end":{"line":94,"column":5}},"15":{"start":{"line":89,"column":6},"end":{"line":93,"column":14}},"16":{"start":{"line":95,"column":21},"end":{"line":95,"column":30}},"17":{"start":{"line":96,"column":27},"end":{"line":96,"column":100}},"18":{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},"19":{"start":{"line":98,"column":6},"end":{"line":102,"column":14}},"20":{"start":{"line":104,"column":24},"end":{"line":104,"column":61}},"21":{"start":{"line":105,"column":4},"end":{"line":112,"column":5}},"22":{"start":{"line":106,"column":25},"end":{"line":106,"column":54}},"23":{"start":{"line":107,"column":6},"end":{"line":111,"column":14}},"24":{"start":{"line":113,"column":30},"end":{"line":113,"column":46}},"25":{"start":{"line":114,"column":24},"end":{"line":114,"column":48}},"26":{"start":{"line":115,"column":27},"end":{"line":115,"column":84}},"27":{"start":{"line":116,"column":28},"end":{"line":116,"column":67}},"28":{"start":{"line":117,"column":26},"end":{"line":117,"column":65}},"29":{"start":{"line":118,"column":19},"end":{"line":125,"column":5}},"30":{"start":{"line":126,"column":4},"end":{"line":139,"column":12}},"31":{"start":{"line":141,"column":4},"end":{"line":141,"column":47}},"32":{"start":{"line":142,"column":4},"end":{"line":146,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":66},"end":{"line":7,"column":67}},"loc":{"start":{"line":7,"column":80},"end":{"line":18,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":82,"column":33},"end":{"line":82,"column":34}},"loc":{"start":{"line":82,"column":46},"end":{"line":148,"column":1}},"line":82}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":2},"end":{"line":8,"column":22}},"type":"if","locations":[{"start":{"line":8,"column":2},"end":{"line":8,"column":22}},{"start":{},"end":{}}],"line":8},"1":{"loc":{"start":{"line":88,"column":4},"end":{"line":94,"column":5}},"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":94,"column":5}},{"start":{},"end":{}}],"line":88},"2":{"loc":{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},{"start":{},"end":{}}],"line":97},"3":{"loc":{"start":{"line":105,"column":4},"end":{"line":112,"column":5}},"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":112,"column":5}},{"start":{},"end":{}}],"line":105},"4":{"loc":{"start":{"line":110,"column":17},"end":{"line":110,"column":62}},"type":"binary-expr","locations":[{"start":{"line":110,"column":17},"end":{"line":110,"column":36}},{"start":{"line":110,"column":40},"end":{"line":110,"column":62}}],"line":110},"5":{"loc":{"start":{"line":123,"column":6},"end":{"line":123,"column":25}},"type":"binary-expr","locations":[{"start":{"line":123,"column":6},"end":{"line":123,"column":15}},{"start":{"line":123,"column":19},"end":{"line":123,"column":25}}],"line":123},"6":{"loc":{"start":{"line":145,"column":15},"end":{"line":145,"column":80}},"type":"cond-expr","locations":[{"start":{"line":145,"column":40},"end":{"line":145,"column":53}},{"start":{"line":145,"column":56},"end":{"line":145,"column":80}}],"line":145}},"s":{"0":1,"1":10,"2":8,"3":2,"4":2,"5":1,"6":1,"7":1,"8":1,"9":12,"10":12,"11":12,"12":12,"13":12,"14":12,"15":1,"16":11,"17":11,"18":11,"19":1,"20":10,"21":10,"22":1,"23":1,"24":9,"25":9,"26":9,"27":9,"28":9,"29":9,"30":7,"31":2,"32":2},"f":{"0":10,"1":12},"b":{"0":[8,2],"1":[1,11],"2":[1,10],"3":[1,9],"4":[1,1],"5":[9,8],"6":[1,1]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/files/upload.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport {\n  FileProcessingResponseSchema,\n  SupportedFileTypes,\n  type FileProcessingResponse\n} from '../../../schemas/file-upload.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// メタデータのバリデーションスキーマ\nconst MetadataSchema = z.string().nullable().optional().transform((val, ctx) => {\n  if (!val) return {}\n  try {\n    return JSON.parse(val)\n  } catch {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: 'メタデータのJSON形式が不正です'\n    })\n    return z.NEVER\n  }\n})\n\n// ファイルアップロードルート定義\nexport const uploadFileRoute = createRoute({\n  method: 'post',\n  path: '/files/upload',\n  request: {\n    body: {\n      content: {\n        'multipart/form-data': {\n          schema: z.object({\n            file: z.instanceof(File),\n            namespace: z.string().optional(),\n            metadata: z.string().optional() // JSON string\n          })\n        }\n      }\n    }\n  },\n  responses: {\n    202: {\n      content: {\n        'application/json': {\n          schema: FileProcessingResponseSchema\n        }\n      },\n      description: 'ファイル処理が開始されました'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    413: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'ファイルサイズが大きすぎます'\n    },\n    415: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サポートされていないファイル形式'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Files'],\n  summary: 'ファイルアップロード',\n  description: 'PDFまたは画像ファイルをアップロードして、内容を抽出しベクトル化します'\n})\n\n// ファイルアップロードハンドラー\nexport const uploadFileHandler: RouteHandler<typeof uploadFileRoute, EnvType> = async (c) => {\n  try {\n    const formData = await c.req.formData()\n    const file = formData.get('file') as File\n    const namespace = formData.get('namespace') as string | null\n    const metadataStr = formData.get('metadata') as string | null\n\n    // ファイルサイズチェック (10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      return c.json<ErrorResponse, 413>({\n        success: false,\n        error: 'Payload Too Large',\n        message: 'ファイルサイズは10MB以下にしてください'\n      }, 413)\n    }\n\n    // ファイルタイプチェック\n    const fileType = file.type\n    const supportedTypes = ['application/pdf', 'image/jpeg', 'image/png', 'image/gif', 'image/webp']\n    if (!supportedTypes.includes(fileType)) {\n      return c.json<ErrorResponse, 415>({\n        success: false,\n        error: 'Unsupported Media Type',\n        message: `サポートされていないファイル形式です: ${fileType}`\n      }, 415)\n    }\n\n    // メタデータのパースとバリデーション\n    const parseResult = MetadataSchema.safeParse(metadataStr)\n    if (!parseResult.success) {\n      const firstError = parseResult.error.errors?.[0]\n      return c.json<ErrorResponse, 400>({\n        success: false,\n        error: 'Bad Request',\n        message: firstError?.message || 'メタデータのバリデーションに失敗しました'\n      }, 400)\n    }\n    const validatedMetadata = parseResult.data\n\n    // ファイルをBase64エンコード\n    const arrayBuffer = await file.arrayBuffer()\n    const fileDataBase64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)))\n\n    // VectorManagerを使用してファイルを処理\n    const vectorManagerId = c.env.VECTOR_CACHE.idFromName('global')\n    const vectorManager = c.env.VECTOR_CACHE.get(vectorManagerId)\n    \n    const result = await vectorManager.processFileAsync(\n      fileDataBase64,\n      file.name,\n      file.type,\n      file.size,\n      namespace || undefined,\n      validatedMetadata\n    )\n\n    return c.json<FileProcessingResponse, 202>({\n      success: true,\n      data: {\n        jobId: result.jobId,\n        workflowId: result.workflowId,\n        status: result.status,\n        fileInfo: {\n          name: file.name,\n          type: file.type,\n          size: file.size\n        },\n        message: 'ファイルの処理を開始しました'\n      }\n    }, 202)\n  } catch (error) {\n    console.error('File upload error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'ファイルアップロード中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c47cd2920d12da969b2867d3a6799bc6708f85ff"}}