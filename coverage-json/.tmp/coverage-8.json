{"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts","statementMap":{"0":{"start":{"line":2,"column":35},"end":{"line":15,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/error.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const ErrorResponseSchema = z.object({\n  success: z.literal(false),\n  error: z.string().openapi({\n    example: 'Bad Request',\n    description: 'エラーの種類'\n  }),\n  message: z.string().openapi({\n    example: '無効なリクエストパラメータです',\n    description: 'エラーの詳細メッセージ'\n  }),\n  details: z.any().optional().openapi({\n    description: 'エラーの詳細情報'\n  })\n})\n\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,SAAS,EAAE,QAAQ,KAAK;AAAA,EACxB,OAAO,EAAE,OAAO,EAAE,QAAQ;AAAA,IACxB,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,QAAQ;AAAA,IAC1B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6a63d60aa5985710aa1a5dd58befc74fd0f881d"},"c:/Users/mtama/node/vector-db/src/routes/api/notion/bulk-sync.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/notion/bulk-sync.ts","statementMap":{"0":{"start":{"line":4,"column":37},"end":{"line":16,"column":2}},"1":{"start":{"line":17,"column":40},"end":{"line":66,"column":2}},"2":{"start":{"line":67,"column":42},"end":{"line":120,"column":1}},"3":{"start":{"line":68,"column":2},"end":{"line":119,"column":3}},"4":{"start":{"line":69,"column":17},"end":{"line":69,"column":36}},"5":{"start":{"line":70,"column":24},"end":{"line":70,"column":44}},"6":{"start":{"line":71,"column":4},"end":{"line":77,"column":5}},"7":{"start":{"line":72,"column":6},"end":{"line":76,"column":14}},"8":{"start":{"line":78,"column":28},"end":{"line":78,"column":69}},"9":{"start":{"line":79,"column":26},"end":{"line":79,"column":67}},"10":{"start":{"line":80,"column":22},"end":{"line":80,"column":24}},"11":{"start":{"line":81,"column":4},"end":{"line":97,"column":5}},"12":{"start":{"line":82,"column":6},"end":{"line":82,"column":57}},"13":{"start":{"line":84,"column":20},"end":{"line":88,"column":8}},"14":{"start":{"line":89,"column":6},"end":{"line":96,"column":9}},"15":{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},"16":{"start":{"line":91,"column":29},"end":{"line":91,"column":33}},"17":{"start":{"line":92,"column":10},"end":{"line":92,"column":31}},"18":{"start":{"line":94,"column":10},"end":{"line":94,"column":33}},"19":{"start":{"line":98,"column":19},"end":{"line":103,"column":6}},"20":{"start":{"line":104,"column":4},"end":{"line":111,"column":12}},"21":{"start":{"line":113,"column":4},"end":{"line":113,"column":45}},"22":{"start":{"line":114,"column":4},"end":{"line":118,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":67,"column":42},"end":{"line":67,"column":43}},"loc":{"start":{"line":67,"column":55},"end":{"line":120,"column":1}},"line":67},"1":{"name":"(anonymous_1)","decl":{"start":{"line":89,"column":30},"end":{"line":89,"column":31}},"loc":{"start":{"line":89,"column":40},"end":{"line":96,"column":7}},"line":89}},"branchMap":{"0":{"loc":{"start":{"line":71,"column":4},"end":{"line":77,"column":5}},"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":77,"column":5}},{"start":{},"end":{}}],"line":71},"1":{"loc":{"start":{"line":81,"column":4},"end":{"line":97,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":97,"column":5}},{"start":{"line":83,"column":11},"end":{"line":97,"column":5}}],"line":81},"2":{"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":47}},"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":20}},{"start":{"line":81,"column":24},"end":{"line":81,"column":47}}],"line":81},"3":{"loc":{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":95,"column":9}},{"start":{"line":93,"column":15},"end":{"line":95,"column":9}}],"line":90},"4":{"loc":{"start":{"line":90,"column":12},"end":{"line":90,"column":73}},"type":"binary-expr","locations":[{"start":{"line":90,"column":12},"end":{"line":90,"column":33}},{"start":{"line":90,"column":37},"end":{"line":90,"column":73}}],"line":90},"5":{"loc":{"start":{"line":117,"column":15},"end":{"line":117,"column":80}},"type":"cond-expr","locations":[{"start":{"line":117,"column":40},"end":{"line":117,"column":53}},{"start":{"line":117,"column":56},"end":{"line":117,"column":80}}],"line":117}},"s":{"0":1,"1":1,"2":1,"3":9,"4":9,"5":9,"6":9,"7":1,"8":8,"9":8,"10":8,"11":8,"12":3,"13":5,"14":4,"15":5,"16":4,"17":4,"18":1,"19":7,"20":6,"21":2,"22":2},"f":{"0":9,"1":5},"b":{"0":[1,8],"1":[3,5],"2":[8,4],"3":[4,1],"4":[5,4],"5":[1,1]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/notion/bulk-sync.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport type { NotionPage } from '../../../db/schema'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// バルク同期レスポンススキーマ\nconst NotionBulkSyncResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    totalPages: z.number(),\n    syncJobs: z.array(z.object({\n      pageId: z.string(),\n      jobId: z.string(),\n      status: z.string()\n    })),\n    message: z.string()\n  }).optional(),\n  message: z.string().optional()\n})\n\n// バルク同期ルート定義\nexport const bulkSyncNotionPagesRoute = createRoute({\n  method: 'post',\n  path: '/notion/pages/bulk-sync',\n  request: {\n    body: {\n      content: {\n        'application/json': {\n          schema: z.object({\n            includeBlocks: z.boolean().default(true),\n            includeProperties: z.boolean().default(true),\n            namespace: z.string().optional(),\n            maxPages: z.number().min(1).max(100).default(50),\n            filterArchived: z.boolean().default(false),\n            pageIds: z.array(z.string()).optional() // 特定のページのみ同期する場合\n          })\n        }\n      }\n    }\n  },\n  responses: {\n    202: {\n      content: {\n        'application/json': {\n          schema: NotionBulkSyncResponseSchema\n        }\n      },\n      description: 'バルク同期処理を開始しました'\n    },\n    401: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '認証エラー'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Notion'],\n  summary: 'Notionページバルク同期',\n  description: '複数のNotionページを一括で同期・ベクトル化します'\n})\n\n// バルク同期ハンドラー\nexport const bulkSyncNotionPagesHandler: RouteHandler<typeof bulkSyncNotionPagesRoute, EnvType> = async (c) => {\n  try {\n    const body = c.req.valid('json')\n    \n    // Notion APIトークンを取得\n    const notionToken = c.env.NOTION_API_KEY\n    if (!notionToken) {\n      return c.json<ErrorResponse, 401>({\n        success: false,\n        error: 'Unauthorized',\n        message: 'Notion APIトークンが設定されていません'\n      }, 401)\n    }\n\n    // NotionManagerを使用してバルク同期ジョブを作成\n    const notionManagerId = c.env.NOTION_MANAGER.idFromName('global')\n    const notionManager = c.env.NOTION_MANAGER.get(notionManagerId)\n    \n    let pagesToSync: string[] = []\n\n    // 特定のページIDが指定されている場合\n    if (body.pageIds && body.pageIds.length > 0) {\n      pagesToSync = body.pageIds.slice(0, body.maxPages)\n    } else {\n      // NotionManagerを使用してページ一覧を取得\n      const pages: Array<NotionPage | Record<string, unknown>> = await notionManager.listPages({\n        fromCache: false,\n        archived: body.filterArchived,\n        limit: body.maxPages\n      })\n      \n      pagesToSync = pages.map((page: NotionPage | Record<string, unknown>): string => {\n        if ('createdTime' in page && typeof page.createdTime === 'string') {\n          // NotionPage型\n          const notionPage = page as NotionPage\n          return notionPage.id\n        } else {\n          // Record<string, unknown>型\n          return String(page.id)\n        }\n      })\n    }\n\n    const result = await notionManager.createBulkSyncJob(pagesToSync, {\n      includeBlocks: body.includeBlocks,\n      includeProperties: body.includeProperties,\n      namespace: body.namespace,\n      maxPages: body.maxPages\n    })\n\n    return c.json({\n      success: true,\n      data: {\n        totalPages: pagesToSync.length,\n        syncJobs: result.syncJobs,\n        message: `${result.syncJobs.length}個のページの同期処理を開始しました`\n      }\n    }, 202)\n  } catch (error) {\n    console.error('Bulk sync error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : 'バルク同期処理の開始中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0787e8824a6396e38890204f5786d9763ca726ba"}}