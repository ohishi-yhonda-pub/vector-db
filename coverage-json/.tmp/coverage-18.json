{"c:/Users/mtama/node/vector-db/src/workflows/schemas/workflow.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/workflows/schemas/workflow.schema.ts","statementMap":{"0":{"start":{"line":2,"column":42},"end":{"line":7,"column":2}},"1":{"start":{"line":8,"column":42},"end":{"line":12,"column":2}},"2":{"start":{"line":13,"column":42},"end":{"line":20,"column":2}},"3":{"start":{"line":21,"column":38},"end":{"line":27,"column":2}},"4":{"start":{"line":28,"column":43},"end":{"line":37,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/workflows/schemas/workflow.schema.ts"],"sourcesContent":["import { z } from 'zod'\n\n// Batch Embeddings schemas\nexport const batchEmbeddingParamsSchema = z.object({\n  texts: z.array(z.string().min(1)),\n  model: z.string().default('@cf/baai/bge-base-en-v1.5'),\n  batchSize: z.number().int().min(1).max(100).default(10),\n  saveToVectorize: z.boolean().default(false)\n})\n\nexport const batchEmbeddingResultSchema = z.object({\n  text: z.string(),\n  embedding: z.array(z.number()).nullable(),\n  error: z.string().nullable()\n})\n\n// File Processing schemas\nexport const fileProcessingParamsSchema = z.object({\n  fileData: z.string().min(1),\n  fileName: z.string().min(1),\n  fileType: z.string().min(1),\n  fileSize: z.number().int().positive(),\n  namespace: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\n// Notion Sync schemas\nexport const notionSyncParamsSchema = z.object({\n  pageId: z.string().min(1),\n  notionToken: z.string().min(1),\n  includeBlocks: z.boolean().default(true),\n  includeProperties: z.boolean().default(true),\n  namespace: z.string().default('notion')\n})\n\n// Vector Operations schemas\nexport const vectorOperationParamsSchema = z.object({\n  type: z.enum(['create', 'delete']),\n  // For create operations\n  text: z.string().optional(),\n  model: z.string().optional(),\n  namespace: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n  // For delete operations\n  vectorIds: z.array(z.string()).optional()\n})\n\nexport type BatchEmbeddingParams = z.infer<typeof batchEmbeddingParamsSchema>\nexport type FileProcessingParams = z.infer<typeof fileProcessingParamsSchema>\nexport type NotionSyncParams = z.infer<typeof notionSyncParamsSchema>\nexport type VectorOperationParams = z.infer<typeof vectorOperationParamsSchema>"],"mappings":"AAAA,SAAS,SAAS;AAGX,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AAAA,EAChC,OAAO,EAAE,OAAO,EAAE,QAAQ,2BAA2B;AAAA,EACrD,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE;AAAA,EACtD,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,KAAK;AAC5C,CAAC;AAEM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,MAAM,EAAE,OAAO;AAAA,EACf,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS;AAAA,EACxC,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;AAGM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC1B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC1B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC1B,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS;AAAA,EACpC,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AACvC,CAAC;AAGM,aAAM,yBAAyB,EAAE,OAAO;AAAA,EAC7C,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EACxB,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC7B,eAAe,EAAE,QAAQ,EAAE,QAAQ,IAAI;AAAA,EACvC,mBAAmB,EAAE,QAAQ,EAAE,QAAQ,IAAI;AAAA,EAC3C,WAAW,EAAE,OAAO,EAAE,QAAQ,QAAQ;AACxC,CAAC;AAGM,aAAM,8BAA8B,EAAE,OAAO;AAAA,EAClD,MAAM,EAAE,KAAK,CAAC,UAAU,QAAQ,CAAC;AAAA;AAAA,EAEjC,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA;AAAA,EAErC,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS;AAC1C,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"52da93ed3b7ea9ad48432756fcb549954a41da76"},"c:/Users/mtama/node/vector-db/src/workflows/batch-embeddings.ts":{"path":"c:/Users/mtama/node/vector-db/src/workflows/batch-embeddings.ts","statementMap":{"0":{"start":{"line":6,"column":4},"end":{"line":27,"column":5}},"1":{"start":{"line":7,"column":21},"end":{"line":7,"column":59}},"2":{"start":{"line":8,"column":6},"end":{"line":20,"column":7}},"3":{"start":{"line":9,"column":8},"end":{"line":13,"column":10}},"4":{"start":{"line":15,"column":8},"end":{"line":19,"column":10}},"5":{"start":{"line":22,"column":6},"end":{"line":26,"column":8}},"6":{"start":{"line":30,"column":19},"end":{"line":30,"column":66}},"7":{"start":{"line":31,"column":57},"end":{"line":31,"column":63}},"8":{"start":{"line":32,"column":20},"end":{"line":32,"column":22}},"9":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"10":{"start":{"line":33,"column":17},"end":{"line":33,"column":18}},"11":{"start":{"line":34,"column":6},"end":{"line":34,"column":50}},"12":{"start":{"line":36,"column":23},"end":{"line":36,"column":25}},"13":{"start":{"line":37,"column":4},"end":{"line":49,"column":5}},"14":{"start":{"line":37,"column":17},"end":{"line":37,"column":18}},"15":{"start":{"line":38,"column":27},"end":{"line":44,"column":8}},"16":{"start":{"line":39,"column":22},"end":{"line":39,"column":32}},"17":{"start":{"line":40,"column":27},"end":{"line":42,"column":9}},"18":{"start":{"line":41,"column":30},"end":{"line":41,"column":71}},"19":{"start":{"line":43,"column":8},"end":{"line":43,"column":26}},"20":{"start":{"line":45,"column":6},"end":{"line":45,"column":39}},"21":{"start":{"line":46,"column":6},"end":{"line":48,"column":7}},"22":{"start":{"line":47,"column":8},"end":{"line":47,"column":45}},"23":{"start":{"line":50,"column":23},"end":{"line":50,"column":69}},"24":{"start":{"line":50,"column":48},"end":{"line":50,"column":68}},"25":{"start":{"line":51,"column":19},"end":{"line":51,"column":65}},"26":{"start":{"line":51,"column":44},"end":{"line":51,"column":64}},"27":{"start":{"line":52,"column":4},"end":{"line":67,"column":5}},"28":{"start":{"line":53,"column":6},"end":{"line":66,"column":9}},"29":{"start":{"line":54,"column":24},"end":{"line":63,"column":11}},"30":{"start":{"line":54,"column":59},"end":{"line":63,"column":9}},"31":{"start":{"line":64,"column":8},"end":{"line":64,"column":55}},"32":{"start":{"line":65,"column":8},"end":{"line":65,"column":46}},"33":{"start":{"line":68,"column":4},"end":{"line":75,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":75},"end":{"line":28,"column":3}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":2},"end":{"line":29,"column":3}},"loc":{"start":{"line":29,"column":25},"end":{"line":76,"column":3}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":38,"column":63},"end":{"line":38,"column":64}},"loc":{"start":{"line":38,"column":75},"end":{"line":44,"column":7}},"line":38},"3":{"name":"(anonymous_3)","decl":{"start":{"line":41,"column":20},"end":{"line":41,"column":21}},"loc":{"start":{"line":41,"column":30},"end":{"line":41,"column":71}},"line":41},"4":{"name":"(anonymous_4)","decl":{"start":{"line":50,"column":41},"end":{"line":50,"column":42}},"loc":{"start":{"line":50,"column":48},"end":{"line":50,"column":68}},"line":50},"5":{"name":"(anonymous_5)","decl":{"start":{"line":51,"column":37},"end":{"line":51,"column":38}},"loc":{"start":{"line":51,"column":44},"end":{"line":51,"column":64}},"line":51},"6":{"name":"(anonymous_6)","decl":{"start":{"line":53,"column":41},"end":{"line":53,"column":42}},"loc":{"start":{"line":53,"column":53},"end":{"line":66,"column":7}},"line":53},"7":{"name":"(anonymous_7)","decl":{"start":{"line":54,"column":39},"end":{"line":54,"column":40}},"loc":{"start":{"line":54,"column":59},"end":{"line":63,"column":9}},"line":54}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":38},"end":{"line":5,"column":73}},"type":"default-arg","locations":[{"start":{"line":5,"column":46},"end":{"line":5,"column":73}}],"line":5},"1":{"loc":{"start":{"line":8,"column":6},"end":{"line":20,"column":7}},"type":"if","locations":[{"start":{"line":8,"column":6},"end":{"line":20,"column":7}},{"start":{"line":14,"column":13},"end":{"line":20,"column":7}}],"line":8},"2":{"loc":{"start":{"line":8,"column":10},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":10},"end":{"line":8,"column":26}},{"start":{"line":8,"column":30},"end":{"line":8,"column":41}},{"start":{"line":8,"column":45},"end":{"line":8,"column":67}}],"line":8},"3":{"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":71}},"type":"cond-expr","locations":[{"start":{"line":25,"column":40},"end":{"line":25,"column":53}},{"start":{"line":25,"column":56},"end":{"line":25,"column":71}}],"line":25},"4":{"loc":{"start":{"line":46,"column":6},"end":{"line":48,"column":7}},"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":48,"column":7}},{"start":{},"end":{}}],"line":46},"5":{"loc":{"start":{"line":52,"column":4},"end":{"line":67,"column":5}},"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":67,"column":5}},{"start":{},"end":{}}],"line":52},"6":{"loc":{"start":{"line":52,"column":8},"end":{"line":52,"column":48}},"type":"binary-expr","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":23}},{"start":{"line":52,"column":27},"end":{"line":52,"column":48}}],"line":52}},"s":{"0":45,"1":45,"2":40,"3":38,"4":2,"5":5,"6":7,"7":7,"8":7,"9":7,"10":7,"11":10,"12":7,"13":7,"14":7,"15":10,"16":10,"17":10,"18":39,"19":10,"20":10,"21":10,"22":4,"23":7,"24":39,"25":7,"26":39,"27":7,"28":1,"29":1,"30":2,"31":1,"32":1,"33":7},"f":{"0":45,"1":7,"2":10,"3":39,"4":39,"5":39,"6":1,"7":2},"b":{"0":[5],"1":[38,2],"2":[40,39,39],"3":[4,1],"4":[4,6],"5":[1,6],"6":[7,2]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/workflows/batch-embeddings.ts"],"sourcesContent":["import { WorkflowEntrypoint, WorkflowStep, WorkflowEvent } from 'cloudflare:workers'\nimport { batchEmbeddingParamsSchema, type BatchEmbeddingParams } from './schemas/workflow.schema'\n\nexport interface BatchEmbeddingResult {\n  embeddings: Array<{\n    text: string\n    embedding: number[] | null\n    error: string | null\n  }>\n  failed: Array<{\n    text: string\n    embedding: null\n    error: string\n  }>\n  model: string\n  totalCount: number\n  successCount: number\n  failedCount: number\n}\n\nexport class BatchEmbeddingsWorkflow extends WorkflowEntrypoint<Env, BatchEmbeddingParams> {\n  // 単一のテキストに対して埋め込みを生成するメソッド\n  private async generateSingleEmbedding(text: string, model: string = '@cf/baai/bge-base-en-v1.5'): Promise<{\n    text: string\n    embedding: number[] | null\n    error: string | null\n  }> {\n    try {\n      const result = await this.env.AI.run(model as keyof AiModels, { text })\n      if ('data' in result && result.data && result.data.length > 0) {\n        return {\n          text,\n          embedding: result.data[0],\n          error: null\n        }\n      } else {\n        return {\n          text,\n          embedding: null,\n          error: 'Failed to generate embedding'\n        }\n      }\n    } catch (error) {\n      return {\n        text,\n        embedding: null,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  async run(event: WorkflowEvent<BatchEmbeddingParams>, step: WorkflowStep): Promise<BatchEmbeddingResult> {\n    // パラメータをバリデーション\n    const params = batchEmbeddingParamsSchema.parse(event.payload)\n    const { texts, model, batchSize, saveToVectorize } = params\n\n    // テキストをバッチに分割\n    const batches: string[][] = []\n    for (let i = 0; i < texts.length; i += batchSize) {\n      batches.push(texts.slice(i, i + batchSize))\n    }\n\n    // 各バッチを順次処理（Workflowのステップとして）\n    const allResults: Array<{\n      text: string\n      embedding: number[] | null\n      error: string | null\n    }> = []\n\n    for (let i = 0; i < batches.length; i++) {\n      const batchResults = await step.do(`process-batch-${i}`, async () => {\n        const batch = batches[i]\n        // バッチ内のテキストを並列処理\n        const embeddings = await Promise.all(\n          batch.map(text => this.generateSingleEmbedding(text, model))\n        )\n\n        return embeddings\n      })\n\n      allResults.push(...batchResults)\n\n      // バッチ間で少し待機（レート制限対策）\n      if (i < batches.length - 1) {\n        await step.sleep('batch-delay', 100) // 100ms待機\n      }\n    }\n\n    // 成功と失敗を分離\n    const successful = allResults.filter(r => r.embedding !== null)\n    const failed = allResults.filter(r => r.embedding === null) as Array<{\n      text: string\n      embedding: null\n      error: string\n    }>\n\n    // Vectorizeに保存\n    if (saveToVectorize && successful.length > 0) {\n      await step.do('save-to-vectorize', async () => {\n        const vectors = successful.map((result, index) => ({\n          id: `workflow_${Date.now()}_${index}`,\n          values: result.embedding!,\n          namespace: 'batch-embeddings',\n          metadata: {\n            text: result.text,\n            model: model,\n            timestamp: new Date().toISOString()\n          }\n        }))\n\n        await this.env.VECTORIZE_INDEX.insert(vectors)\n        return { savedCount: vectors.length }\n      })\n    }\n\n    return {\n      embeddings: successful,\n      failed: failed,\n      model: model,\n      totalCount: texts.length,\n      successCount: successful.length,\n      failedCount: failed.length\n    }\n  }\n}"],"mappings":"AAAA,SAAS,0BAAuD;AAChE,SAAS,kCAA6D;AAmB/D,aAAM,gCAAgC,mBAA8C;AAAA;AAAA,EAEzF,MAAc,wBAAwB,MAAc,QAAgB,6BAIjE;AACD,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,IAAI,GAAG,IAAI,OAAyB,EAAE,KAAK,CAAC;AACtE,UAAI,UAAU,UAAU,OAAO,QAAQ,OAAO,KAAK,SAAS,GAAG;AAC7D,eAAO;AAAA,UACL;AAAA,UACA,WAAW,OAAO,KAAK,CAAC;AAAA,UACxB,OAAO;AAAA,QACT;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL;AAAA,UACA,WAAW;AAAA,UACX,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,aAAO;AAAA,QACL;AAAA,QACA,WAAW;AAAA,QACX,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAClD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,OAA4C,MAAmD;AAEvG,UAAM,SAAS,2BAA2B,MAAM,MAAM,OAAO;AAC7D,UAAM,EAAE,OAAO,OAAO,WAAW,gBAAgB,IAAI;AAGrD,UAAM,UAAsB,CAAC;AAC7B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,WAAW;AAChD,cAAQ,KAAK,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC;AAAA,IAC5C;AAGA,UAAM,aAID,CAAC;AAEN,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAM,eAAe,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,YAAY;AACnE,cAAM,QAAQ,QAAQ,CAAC;AAEvB,cAAM,aAAa,MAAM,QAAQ;AAAA,UAC/B,MAAM,IAAI,UAAQ,KAAK,wBAAwB,MAAM,KAAK,CAAC;AAAA,QAC7D;AAEA,eAAO;AAAA,MACT,CAAC;AAED,iBAAW,KAAK,GAAG,YAAY;AAG/B,UAAI,IAAI,QAAQ,SAAS,GAAG;AAC1B,cAAM,KAAK,MAAM,eAAe,GAAG;AAAA,MACrC;AAAA,IACF;AAGA,UAAM,aAAa,WAAW,OAAO,OAAK,EAAE,cAAc,IAAI;AAC9D,UAAM,SAAS,WAAW,OAAO,OAAK,EAAE,cAAc,IAAI;AAO1D,QAAI,mBAAmB,WAAW,SAAS,GAAG;AAC5C,YAAM,KAAK,GAAG,qBAAqB,YAAY;AAC7C,cAAM,UAAU,WAAW,IAAI,CAAC,QAAQ,WAAW;AAAA,UACjD,IAAI,YAAY,KAAK,IAAI,CAAC,IAAI,KAAK;AAAA,UACnC,QAAQ,OAAO;AAAA,UACf,WAAW;AAAA,UACX,UAAU;AAAA,YACR,MAAM,OAAO;AAAA,YACb;AAAA,YACA,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,UACpC;AAAA,QACF,EAAE;AAEF,cAAM,KAAK,IAAI,gBAAgB,OAAO,OAAO;AAC7C,eAAO,EAAE,YAAY,QAAQ,OAAO;AAAA,MACtC,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA,YAAY,MAAM;AAAA,MAClB,cAAc,WAAW;AAAA,MACzB,aAAa,OAAO;AAAA,IACtB;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"48e5189e2f86f11fb4f14c9ffc19fa6fa2a5d9e4"}}