{"c:/Users/mtama/node/vector-db/src/workflows/schemas/workflow.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/workflows/schemas/workflow.schema.ts","statementMap":{"0":{"start":{"line":2,"column":42},"end":{"line":7,"column":2}},"1":{"start":{"line":8,"column":42},"end":{"line":12,"column":2}},"2":{"start":{"line":13,"column":42},"end":{"line":20,"column":2}},"3":{"start":{"line":21,"column":38},"end":{"line":27,"column":2}},"4":{"start":{"line":28,"column":43},"end":{"line":37,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/workflows/schemas/workflow.schema.ts"],"sourcesContent":["import { z } from 'zod'\n\n// Batch Embeddings schemas\nexport const batchEmbeddingParamsSchema = z.object({\n  texts: z.array(z.string().min(1)),\n  model: z.string().default('@cf/baai/bge-base-en-v1.5'),\n  batchSize: z.number().int().min(1).max(100).default(10),\n  saveToVectorize: z.boolean().default(false)\n})\n\nexport const batchEmbeddingResultSchema = z.object({\n  text: z.string(),\n  embedding: z.array(z.number()).nullable(),\n  error: z.string().nullable()\n})\n\n// File Processing schemas\nexport const fileProcessingParamsSchema = z.object({\n  fileData: z.string().min(1),\n  fileName: z.string().min(1),\n  fileType: z.string().min(1),\n  fileSize: z.number().int().positive(),\n  namespace: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\n// Notion Sync schemas\nexport const notionSyncParamsSchema = z.object({\n  pageId: z.string().min(1),\n  notionToken: z.string().min(1),\n  includeBlocks: z.boolean().default(true),\n  includeProperties: z.boolean().default(true),\n  namespace: z.string().default('notion')\n})\n\n// Vector Operations schemas\nexport const vectorOperationParamsSchema = z.object({\n  type: z.enum(['create', 'delete']),\n  // For create operations\n  text: z.string().optional(),\n  model: z.string().optional(),\n  namespace: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n  // For delete operations\n  vectorIds: z.array(z.string()).optional()\n})\n\nexport type BatchEmbeddingParams = z.infer<typeof batchEmbeddingParamsSchema>\nexport type FileProcessingParams = z.infer<typeof fileProcessingParamsSchema>\nexport type NotionSyncParams = z.infer<typeof notionSyncParamsSchema>\nexport type VectorOperationParams = z.infer<typeof vectorOperationParamsSchema>"],"mappings":"AAAA,SAAS,SAAS;AAGX,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AAAA,EAChC,OAAO,EAAE,OAAO,EAAE,QAAQ,2BAA2B;AAAA,EACrD,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE;AAAA,EACtD,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,KAAK;AAC5C,CAAC;AAEM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,MAAM,EAAE,OAAO;AAAA,EACf,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS;AAAA,EACxC,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;AAGM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC1B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC1B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC1B,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS;AAAA,EACpC,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AACvC,CAAC;AAGM,aAAM,yBAAyB,EAAE,OAAO;AAAA,EAC7C,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EACxB,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC7B,eAAe,EAAE,QAAQ,EAAE,QAAQ,IAAI;AAAA,EACvC,mBAAmB,EAAE,QAAQ,EAAE,QAAQ,IAAI;AAAA,EAC3C,WAAW,EAAE,OAAO,EAAE,QAAQ,QAAQ;AACxC,CAAC;AAGM,aAAM,8BAA8B,EAAE,OAAO;AAAA,EAClD,MAAM,EAAE,KAAK,CAAC,UAAU,QAAQ,CAAC;AAAA;AAAA,EAEjC,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA;AAAA,EAErC,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS;AAC1C,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"52da93ed3b7ea9ad48432756fcb549954a41da76"},"c:/Users/mtama/node/vector-db/src/workflows/file-processing.ts":{"path":"c:/Users/mtama/node/vector-db/src/workflows/file-processing.ts","statementMap":{"0":{"start":{"line":5,"column":19},"end":{"line":5,"column":66}},"1":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"2":{"start":{"line":7,"column":6},"end":{"line":7,"column":50}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":65}},"4":{"start":{"line":12,"column":4},"end":{"line":158,"column":5}},"5":{"start":{"line":13,"column":23},"end":{"line":13,"column":78}},"6":{"start":{"line":14,"column":25},"end":{"line":14,"column":87}},"7":{"start":{"line":14,"column":71},"end":{"line":14,"column":86}},"8":{"start":{"line":15,"column":27},"end":{"line":67,"column":8}},"9":{"start":{"line":16,"column":8},"end":{"line":66,"column":9}},"10":{"start":{"line":17,"column":25},"end":{"line":47,"column":11}},"11":{"start":{"line":48,"column":27},"end":{"line":48,"column":61}},"12":{"start":{"line":49,"column":27},"end":{"line":49,"column":63}},"13":{"start":{"line":50,"column":10},"end":{"line":56,"column":12}},"14":{"start":{"line":58,"column":10},"end":{"line":58,"column":57}},"15":{"start":{"line":59,"column":10},"end":{"line":65,"column":12}},"16":{"start":{"line":68,"column":21},"end":{"line":100,"column":8}},"17":{"start":{"line":69,"column":29},"end":{"line":69,"column":31}},"18":{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},"19":{"start":{"line":71,"column":10},"end":{"line":74,"column":13}},"20":{"start":{"line":76,"column":8},"end":{"line":91,"column":9}},"21":{"start":{"line":77,"column":28},"end":{"line":77,"column":31}},"22":{"start":{"line":78,"column":10},"end":{"line":90,"column":11}},"23":{"start":{"line":79,"column":12},"end":{"line":84,"column":13}},"24":{"start":{"line":79,"column":25},"end":{"line":79,"column":26}},"25":{"start":{"line":80,"column":14},"end":{"line":83,"column":17}},"26":{"start":{"line":86,"column":12},"end":{"line":89,"column":15}},"27":{"start":{"line":92,"column":8},"end":{"line":98,"column":9}},"28":{"start":{"line":93,"column":10},"end":{"line":97,"column":13}},"29":{"start":{"line":99,"column":8},"end":{"line":99,"column":28}},"30":{"start":{"line":101,"column":24},"end":{"line":129,"column":8}},"31":{"start":{"line":102,"column":20},"end":{"line":102,"column":22}},"32":{"start":{"line":103,"column":26},"end":{"line":103,"column":36}},"33":{"start":{"line":104,"column":8},"end":{"line":127,"column":9}},"34":{"start":{"line":104,"column":21},"end":{"line":104,"column":22}},"35":{"start":{"line":105,"column":24},"end":{"line":105,"column":33}},"36":{"start":{"line":106,"column":27},"end":{"line":106,"column":91}},"37":{"start":{"line":107,"column":10},"end":{"line":125,"column":13}},"38":{"start":{"line":126,"column":10},"end":{"line":126,"column":29}},"39":{"start":{"line":128,"column":8},"end":{"line":128,"column":19}},"40":{"start":{"line":130,"column":6},"end":{"line":147,"column":8}},"41":{"start":{"line":149,"column":23},"end":{"line":149,"column":78}},"42":{"start":{"line":150,"column":6},"end":{"line":157,"column":8}},"43":{"start":{"line":161,"column":4},"end":{"line":161,"column":27}},"44":{"start":{"line":161,"column":17},"end":{"line":161,"column":27}},"45":{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},"46":{"start":{"line":163,"column":6},"end":{"line":163,"column":20}},"47":{"start":{"line":165,"column":4},"end":{"line":181,"column":5}},"48":{"start":{"line":166,"column":6},"end":{"line":168,"column":7}},"49":{"start":{"line":167,"column":8},"end":{"line":167,"column":31}},"50":{"start":{"line":169,"column":6},"end":{"line":171,"column":7}},"51":{"start":{"line":170,"column":8},"end":{"line":170,"column":27}},"52":{"start":{"line":172,"column":6},"end":{"line":174,"column":7}},"53":{"start":{"line":173,"column":8},"end":{"line":173,"column":34}},"54":{"start":{"line":175,"column":6},"end":{"line":177,"column":7}},"55":{"start":{"line":176,"column":8},"end":{"line":176,"column":37}},"56":{"start":{"line":178,"column":6},"end":{"line":180,"column":7}},"57":{"start":{"line":179,"column":8},"end":{"line":179,"column":29}},"58":{"start":{"line":182,"column":4},"end":{"line":182,"column":14}},"59":{"start":{"line":185,"column":21},"end":{"line":185,"column":23}},"60":{"start":{"line":186,"column":22},"end":{"line":186,"column":105}},"61":{"start":{"line":187,"column":22},"end":{"line":187,"column":105}},"62":{"start":{"line":188,"column":24},"end":{"line":188,"column":107}},"63":{"start":{"line":189,"column":26},"end":{"line":189,"column":109}},"64":{"start":{"line":190,"column":4},"end":{"line":190,"column":62}},"65":{"start":{"line":190,"column":19},"end":{"line":190,"column":62}},"66":{"start":{"line":191,"column":4},"end":{"line":191,"column":64}},"67":{"start":{"line":191,"column":19},"end":{"line":191,"column":64}},"68":{"start":{"line":192,"column":4},"end":{"line":192,"column":61}},"69":{"start":{"line":192,"column":21},"end":{"line":192,"column":61}},"70":{"start":{"line":193,"column":4},"end":{"line":193,"column":67}},"71":{"start":{"line":193,"column":23},"end":{"line":193,"column":67}},"72":{"start":{"line":194,"column":4},"end":{"line":196,"column":5}},"73":{"start":{"line":195,"column":6},"end":{"line":195,"column":38}},"74":{"start":{"line":197,"column":4},"end":{"line":197,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":2},"end":{"line":4,"column":3}},"loc":{"start":{"line":4,"column":25},"end":{"line":10,"column":3}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":34},"end":{"line":159,"column":3}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":64},"end":{"line":14,"column":65}},"loc":{"start":{"line":14,"column":71},"end":{"line":14,"column":86}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":68},"end":{"line":15,"column":69}},"loc":{"start":{"line":15,"column":80},"end":{"line":67,"column":7}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":68,"column":61},"end":{"line":68,"column":62}},"loc":{"start":{"line":68,"column":73},"end":{"line":100,"column":7}},"line":68},"5":{"name":"(anonymous_5)","decl":{"start":{"line":101,"column":59},"end":{"line":101,"column":60}},"loc":{"start":{"line":101,"column":71},"end":{"line":129,"column":7}},"line":101},"6":{"name":"(anonymous_6)","decl":{"start":{"line":160,"column":2},"end":{"line":160,"column":3}},"loc":{"start":{"line":160,"column":32},"end":{"line":183,"column":3}},"line":160},"7":{"name":"(anonymous_7)","decl":{"start":{"line":184,"column":2},"end":{"line":184,"column":3}},"loc":{"start":{"line":184,"column":34},"end":{"line":198,"column":3}},"line":184}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},{"start":{},"end":{}}],"line":6},"1":{"loc":{"start":{"line":6,"column":8},"end":{"line":6,"column":85}},"type":"binary-expr","locations":[{"start":{"line":6,"column":8},"end":{"line":6,"column":45}},{"start":{"line":6,"column":49},"end":{"line":6,"column":85}}],"line":6},"2":{"loc":{"start":{"line":13,"column":23},"end":{"line":13,"column":78}},"type":"cond-expr","locations":[{"start":{"line":13,"column":63},"end":{"line":13,"column":68}},{"start":{"line":13,"column":71},"end":{"line":13,"column":78}}],"line":13},"3":{"loc":{"start":{"line":51,"column":25},"end":{"line":51,"column":87}},"type":"binary-expr","locations":[{"start":{"line":51,"column":25},"end":{"line":51,"column":45}},{"start":{"line":51,"column":49},"end":{"line":51,"column":87}}],"line":51},"4":{"loc":{"start":{"line":52,"column":27},"end":{"line":52,"column":55}},"type":"binary-expr","locations":[{"start":{"line":52,"column":27},"end":{"line":52,"column":49}},{"start":{"line":52,"column":53},"end":{"line":52,"column":55}}],"line":52},"5":{"loc":{"start":{"line":53,"column":20},"end":{"line":53,"column":41}},"type":"binary-expr","locations":[{"start":{"line":53,"column":20},"end":{"line":53,"column":35}},{"start":{"line":53,"column":39},"end":{"line":53,"column":41}}],"line":53},"6":{"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":45}},"type":"binary-expr","locations":[{"start":{"line":54,"column":22},"end":{"line":54,"column":39}},{"start":{"line":54,"column":43},"end":{"line":54,"column":45}}],"line":54},"7":{"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":50}},"type":"binary-expr","locations":[{"start":{"line":55,"column":22},"end":{"line":55,"column":44}},{"start":{"line":55,"column":48},"end":{"line":55,"column":50}}],"line":55},"8":{"loc":{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},{"start":{},"end":{}}],"line":70},"9":{"loc":{"start":{"line":76,"column":8},"end":{"line":91,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":91,"column":9}},{"start":{},"end":{}}],"line":76},"10":{"loc":{"start":{"line":78,"column":10},"end":{"line":90,"column":11}},"type":"if","locations":[{"start":{"line":78,"column":10},"end":{"line":90,"column":11}},{"start":{"line":85,"column":17},"end":{"line":90,"column":11}}],"line":78},"11":{"loc":{"start":{"line":92,"column":8},"end":{"line":98,"column":9}},"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":98,"column":9}},{"start":{},"end":{}}],"line":92},"12":{"loc":{"start":{"line":92,"column":12},"end":{"line":92,"column":56}},"type":"binary-expr","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":31}},{"start":{"line":92,"column":35},"end":{"line":92,"column":56}}],"line":92},"13":{"loc":{"start":{"line":112,"column":25},"end":{"line":112,"column":66}},"type":"binary-expr","locations":[{"start":{"line":112,"column":25},"end":{"line":112,"column":41}},{"start":{"line":112,"column":45},"end":{"line":112,"column":66}}],"line":112},"14":{"loc":{"start":{"line":149,"column":23},"end":{"line":149,"column":78}},"type":"cond-expr","locations":[{"start":{"line":149,"column":63},"end":{"line":149,"column":68}},{"start":{"line":149,"column":71},"end":{"line":149,"column":78}}],"line":149},"15":{"loc":{"start":{"line":155,"column":15},"end":{"line":155,"column":80}},"type":"cond-expr","locations":[{"start":{"line":155,"column":40},"end":{"line":155,"column":53}},{"start":{"line":155,"column":56},"end":{"line":155,"column":80}}],"line":155},"16":{"loc":{"start":{"line":161,"column":4},"end":{"line":161,"column":27}},"type":"if","locations":[{"start":{"line":161,"column":4},"end":{"line":161,"column":27}},{"start":{},"end":{}}],"line":161},"17":{"loc":{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},"type":"if","locations":[{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},{"start":{},"end":{}}],"line":162},"18":{"loc":{"start":{"line":165,"column":4},"end":{"line":181,"column":5}},"type":"if","locations":[{"start":{"line":165,"column":4},"end":{"line":181,"column":5}},{"start":{},"end":{}}],"line":165},"19":{"loc":{"start":{"line":166,"column":6},"end":{"line":168,"column":7}},"type":"if","locations":[{"start":{"line":166,"column":6},"end":{"line":168,"column":7}},{"start":{},"end":{}}],"line":166},"20":{"loc":{"start":{"line":166,"column":10},"end":{"line":166,"column":69}},"type":"binary-expr","locations":[{"start":{"line":166,"column":10},"end":{"line":166,"column":30}},{"start":{"line":166,"column":34},"end":{"line":166,"column":69}}],"line":166},"21":{"loc":{"start":{"line":169,"column":6},"end":{"line":171,"column":7}},"type":"if","locations":[{"start":{"line":169,"column":6},"end":{"line":171,"column":7}},{"start":{},"end":{}}],"line":169},"22":{"loc":{"start":{"line":169,"column":10},"end":{"line":169,"column":61}},"type":"binary-expr","locations":[{"start":{"line":169,"column":10},"end":{"line":169,"column":26}},{"start":{"line":169,"column":30},"end":{"line":169,"column":61}}],"line":169},"23":{"loc":{"start":{"line":172,"column":6},"end":{"line":174,"column":7}},"type":"if","locations":[{"start":{"line":172,"column":6},"end":{"line":174,"column":7}},{"start":{},"end":{}}],"line":172},"24":{"loc":{"start":{"line":172,"column":10},"end":{"line":172,"column":75}},"type":"binary-expr","locations":[{"start":{"line":172,"column":10},"end":{"line":172,"column":33}},{"start":{"line":172,"column":37},"end":{"line":172,"column":75}}],"line":172},"25":{"loc":{"start":{"line":175,"column":6},"end":{"line":177,"column":7}},"type":"if","locations":[{"start":{"line":175,"column":6},"end":{"line":177,"column":7}},{"start":{},"end":{}}],"line":175},"26":{"loc":{"start":{"line":175,"column":10},"end":{"line":175,"column":81}},"type":"binary-expr","locations":[{"start":{"line":175,"column":10},"end":{"line":175,"column":36}},{"start":{"line":175,"column":40},"end":{"line":175,"column":81}}],"line":175},"27":{"loc":{"start":{"line":178,"column":6},"end":{"line":180,"column":7}},"type":"if","locations":[{"start":{"line":178,"column":6},"end":{"line":180,"column":7}},{"start":{},"end":{}}],"line":178},"28":{"loc":{"start":{"line":178,"column":10},"end":{"line":178,"column":65}},"type":"binary-expr","locations":[{"start":{"line":178,"column":10},"end":{"line":178,"column":28}},{"start":{"line":178,"column":32},"end":{"line":178,"column":65}}],"line":178},"29":{"loc":{"start":{"line":190,"column":4},"end":{"line":190,"column":62}},"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":190,"column":62}},{"start":{},"end":{}}],"line":190},"30":{"loc":{"start":{"line":191,"column":4},"end":{"line":191,"column":64}},"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":191,"column":64}},{"start":{},"end":{}}],"line":191},"31":{"loc":{"start":{"line":192,"column":4},"end":{"line":192,"column":61}},"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":192,"column":61}},{"start":{},"end":{}}],"line":192},"32":{"loc":{"start":{"line":193,"column":4},"end":{"line":193,"column":67}},"type":"if","locations":[{"start":{"line":193,"column":4},"end":{"line":193,"column":67}},{"start":{},"end":{}}],"line":193},"33":{"loc":{"start":{"line":194,"column":4},"end":{"line":196,"column":5}},"type":"if","locations":[{"start":{"line":194,"column":4},"end":{"line":196,"column":5}},{"start":{},"end":{}}],"line":194}},"s":{"0":3,"1":3,"2":2,"3":1,"4":16,"5":16,"6":16,"7":184,"8":16,"9":4,"10":4,"11":3,"12":3,"13":3,"14":1,"15":1,"16":13,"17":8,"18":8,"19":7,"20":8,"21":5,"22":5,"23":1,"24":1,"25":2,"26":4,"27":8,"28":4,"29":8,"30":13,"31":9,"32":9,"33":9,"34":9,"35":19,"36":19,"37":19,"38":19,"39":9,"40":13,"41":3,"42":3,"43":13,"44":2,"45":11,"46":1,"47":10,"48":9,"49":4,"50":5,"51":1,"52":4,"53":1,"54":3,"55":1,"56":2,"57":1,"58":2,"59":8,"60":8,"61":8,"62":8,"63":8,"64":8,"65":6,"66":8,"67":6,"68":8,"69":2,"70":8,"71":2,"72":8,"73":1,"74":8},"f":{"0":3,"1":16,"2":184,"3":4,"4":8,"5":9,"6":13,"7":8},"b":{"0":[2,1],"1":[3,2],"2":[12,4],"3":[3,1],"4":[3,1],"5":[3,2],"6":[3,3],"7":[3,1],"8":[7,1],"9":[5,3],"10":[1,4],"11":[4,4],"12":[8,4],"13":[19,17],"14":[2,1],"15":[2,1],"16":[2,11],"17":[1,10],"18":[9,1],"19":[4,5],"20":[9,4],"21":[1,4],"22":[5,1],"23":[1,3],"24":[4,1],"25":[1,2],"26":[3,1],"27":[1,1],"28":[2,1],"29":[6,2],"30":[6,2],"31":[2,6],"32":[2,6],"33":[1,7]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/workflows/file-processing.ts"],"sourcesContent":["import { WorkflowEntrypoint, WorkflowEvent, WorkflowStep } from 'cloudflare:workers'\nimport { fileProcessingParamsSchema, type FileProcessingParams } from './schemas/workflow.schema'\n\nexport interface FileProcessingResult {\n  type: 'pdf' | 'image'\n  success: boolean\n  content: {\n    text?: string\n    description?: string\n    extractedText?: string\n    extractedPages?: number\n    metadata?: Record<string, any>\n  }\n  vectorIds: string[]\n  error?: string\n  completedAt: string\n}\n\nexport class FileProcessingWorkflow extends WorkflowEntrypoint<Env, FileProcessingParams> {\n  async run(event: WorkflowEvent<FileProcessingParams>, step: WorkflowStep): Promise<FileProcessingResult> {\n    const params = fileProcessingParamsSchema.parse(event.payload)\n    \n    // PDFも画像も同じ処理フローで統一\n    if (params.fileType === 'application/pdf' || params.fileType.startsWith('image/')) {\n      return await this.processFile(params, step)\n    }\n    \n    throw new Error(`Unsupported file type: ${params.fileType}`)\n  }\n\n  private async processFile(\n    params: FileProcessingParams,\n    step: WorkflowStep\n  ): Promise<FileProcessingResult> {\n    try {\n      const fileType = params.fileType === 'application/pdf' ? 'pdf' : 'image'\n      const fileBuffer = Uint8Array.from(atob(params.fileData), c => c.charCodeAt(0))\n      \n      // Step 1: Gemma-3-12b-itを使用してファイルを分析\n      const fileAnalysis = await step.do('analyze-file-with-gemma', async () => {\n        try {\n          // マルチモーダル入力でファイルを分析\n          const result = await this.env.AI.run(\n            this.env.DEFAULT_TEXT_GENERATION_MODEL as keyof AiModels,\n            {\n              messages: [\n                {\n                  role: 'user',\n                  content: [\n                    {\n                      type: 'image',\n                      image: [...fileBuffer]\n                    },\n                    {\n                      type: 'text',\n                      text: `Analyze this ${fileType} file and provide:\n1. A detailed description of all content\n2. Extract ALL text visible in the file (transcribe exactly)\n3. Identify key topics and themes\n4. Generate searchable keywords\n\nFormat your response as:\nDESCRIPTION: [detailed description]\nEXTRACTED_TEXT: [all visible text]\nTOPICS: [main topics]\nKEYWORDS: [searchable keywords]`\n                    }\n                  ]\n                }\n              ],\n              max_tokens: parseInt(this.env.TEXT_EXTRACTION_MAX_TOKENS) * 2\n            }\n          )\n          \n          const response = this.extractTextFromResult(result)\n          \n          // レスポンスをパース\n          const sections = this.parseAnalysisResponse(response)\n          \n          return {\n            description: sections.description || `${fileType} file: ${params.fileName}`,\n            extractedText: sections.extractedText || '',\n            topics: sections.topics || '',\n            keywords: sections.keywords || '',\n            hasText: (sections.extractedText || '').length > 0\n          }\n        } catch (error) {\n          console.error('Gemma analysis failed:', error)\n          return {\n            description: `${fileType} file: ${params.fileName}`,\n            extractedText: '',\n            topics: '',\n            keywords: '',\n            hasText: false\n          }\n        }\n      })\n\n      // Step 2: 分析結果をチャンクに分割（長いテキストの場合）\n      const chunks = await step.do('prepare-content-chunks', async () => {\n        const contentParts: Array<{ text: string; type: string }> = []\n        \n        // 説明を追加\n        if (fileAnalysis.description) {\n          contentParts.push({\n            text: fileAnalysis.description,\n            type: 'description'\n          })\n        }\n        \n        // 抽出されたテキストをチャンク分割\n        if (fileAnalysis.extractedText) {\n          const chunkSize = 1000\n          if (fileAnalysis.extractedText.length > chunkSize) {\n            for (let i = 0; i < fileAnalysis.extractedText.length; i += chunkSize) {\n              contentParts.push({\n                text: fileAnalysis.extractedText.slice(i, i + chunkSize),\n                type: 'extracted-text'\n              })\n            }\n          } else {\n            contentParts.push({\n              text: fileAnalysis.extractedText,\n              type: 'extracted-text'\n            })\n          }\n        }\n        \n        // トピックとキーワードを追加\n        if (fileAnalysis.topics || fileAnalysis.keywords) {\n          contentParts.push({\n            text: `Topics: ${fileAnalysis.topics}\\nKeywords: ${fileAnalysis.keywords}`,\n            type: 'metadata'\n          })\n        }\n        \n        return contentParts\n      })\n\n      // Step 3: 各チャンクをベクトル化\n      const vectorIds = await step.do('vectorize-content', async () => {\n        const ids: string[] = []\n        const timestamp = Date.now()\n        \n        for (let i = 0; i < chunks.length; i++) {\n          const chunk = chunks[i]\n          const vectorId = `${fileType}_${params.fileName}_${chunk.type}_${i}_${timestamp}`\n          \n          await this.env.VECTOR_OPERATIONS_WORKFLOW.create({\n            id: vectorId,\n            params: {\n              type: 'create',\n              text: chunk.text,\n              namespace: params.namespace || `${fileType}-uploads`,\n              metadata: {\n                ...params.metadata,\n                sourceType: fileType,\n                fileName: params.fileName,\n                fileType: params.fileType,\n                contentType: chunk.type,\n                chunkIndex: i,\n                totalChunks: chunks.length,\n                hasExtractedText: fileAnalysis.hasText,\n                analyzedAt: new Date().toISOString()\n              }\n            }\n          })\n          \n          ids.push(vectorId)\n        }\n        \n        return ids\n      })\n\n      return {\n        type: fileType as 'pdf' | 'image',\n        success: true,\n        content: {\n          text: fileAnalysis.extractedText,\n          description: fileAnalysis.description,\n          metadata: {\n            fileName: params.fileName,\n            fileType: params.fileType,\n            fileSize: params.fileSize,\n            hasExtractedText: fileAnalysis.hasText,\n            topics: fileAnalysis.topics,\n            keywords: fileAnalysis.keywords\n          }\n        },\n        vectorIds,\n        completedAt: new Date().toISOString()\n      }\n    } catch (error) {\n      const fileType = params.fileType === 'application/pdf' ? 'pdf' : 'image'\n      return {\n        type: fileType as 'pdf' | 'image',\n        success: false,\n        content: {},\n        vectorIds: [],\n        error: error instanceof Error ? error.message : 'File processing failed',\n        completedAt: new Date().toISOString()\n      }\n    }\n  }\n\n  private extractTextFromResult(result: any): string {\n    // AI結果からテキストを抽出する汎用メソッド\n    if (!result) return ''\n    \n    // テキストが直接返される場合\n    if (typeof result === 'string') {\n      return result\n    }\n    \n    // オブジェクトとして返される場合\n    if (typeof result === 'object') {\n      // response フィールドがある場合（Gemmaなど）\n      if ('response' in result && typeof result.response === 'string') {\n        return result.response\n      }\n      \n      // text フィールドがある場合\n      if ('text' in result && typeof result.text === 'string') {\n        return result.text\n      }\n      \n      // description フィールドがある場合（Visionモデル）\n      if ('description' in result && typeof result.description === 'string') {\n        return result.description\n      }\n      \n      // generated_text フィールドがある場合\n      if ('generated_text' in result && typeof result.generated_text === 'string') {\n        return result.generated_text\n      }\n      \n      // result フィールドがある場合\n      if ('result' in result && typeof result.result === 'string') {\n        return result.result\n      }\n    }\n    \n    return ''\n  }\n\n  private parseAnalysisResponse(response: string): {\n    description?: string\n    extractedText?: string\n    topics?: string\n    keywords?: string\n  } {\n    const sections: any = {}\n    \n    // 各セクションを抽出\n    const descMatch = response.match(/DESCRIPTION:\\s*([\\s\\S]*?)(?=EXTRACTED_TEXT:|TOPICS:|KEYWORDS:|$)/i)\n    const textMatch = response.match(/EXTRACTED_TEXT:\\s*([\\s\\S]*?)(?=DESCRIPTION:|TOPICS:|KEYWORDS:|$)/i)\n    const topicsMatch = response.match(/TOPICS:\\s*([\\s\\S]*?)(?=DESCRIPTION:|EXTRACTED_TEXT:|KEYWORDS:|$)/i)\n    const keywordsMatch = response.match(/KEYWORDS:\\s*([\\s\\S]*?)(?=DESCRIPTION:|EXTRACTED_TEXT:|TOPICS:|$)/i)\n    \n    if (descMatch) sections.description = descMatch[1].trim()\n    if (textMatch) sections.extractedText = textMatch[1].trim()\n    if (topicsMatch) sections.topics = topicsMatch[1].trim()\n    if (keywordsMatch) sections.keywords = keywordsMatch[1].trim()\n    \n    // セクションが見つからない場合は全体をdescriptionとして扱う\n    if (Object.keys(sections).length === 0) {\n      sections.description = response\n    }\n    \n    return sections\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7d4789ec63c673b57c88001f53368fa8fb1c01d0"}}