{"c:/Users/mtama/node/vector-db/src/schemas/vector.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/vector.schema.ts","statementMap":{"0":{"start":{"line":2,"column":36},"end":{"line":7,"column":16}},"1":{"start":{"line":8,"column":28},"end":{"line":28,"column":2}},"2":{"start":{"line":29,"column":34},"end":{"line":45,"column":2}},"3":{"start":{"line":46,"column":36},"end":{"line":50,"column":2}},"4":{"start":{"line":51,"column":40},"end":{"line":56,"column":2}},"5":{"start":{"line":57,"column":42},"end":{"line":61,"column":2}},"6":{"start":{"line":62,"column":50},"end":{"line":70,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/vector.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const VectorMetadataSchema = z.object({\n  title: z.string().optional(),\n  content: z.string().optional(),\n  url: z.string().url().optional(),\n  timestamp: z.string().datetime().optional(),\n}).passthrough()\n\nexport const VectorSchema = z.object({\n  id: z.string().min(1).openapi({\n    example: 'vec_123456',\n    description: 'ベクトルの一意識別子'\n  }),\n  values: z.union([\n    z.array(z.number()),\n    z.any() // VectorFloatArray (Float32Array)\n  ]).openapi({\n    example: [0.1, 0.2, 0.3],\n    description: 'ベクトルの数値配列またはFloat32Array'\n  }),\n  namespace: z.string().optional().openapi({\n    example: 'default',\n    description: 'ベクトルの名前空間'\n  }),\n  metadata: VectorMetadataSchema.optional().openapi({\n    description: 'ベクトルに関連付けられたメタデータ'\n  })\n})\n\nexport const CreateVectorSchema = z.object({\n  text: z.string().min(1).openapi({\n    example: 'これはサンプルテキストです',\n    description: 'ベクトル化するテキスト'\n  }),\n  model: z.string().optional().openapi({\n    example: '@cf/baai/bge-base-en-v1.5',\n    description: '使用するモデル名'\n  }),\n  namespace: z.string().optional().openapi({\n    example: 'default',\n    description: 'ベクトルの名前空間'\n  }),\n  metadata: VectorMetadataSchema.optional().openapi({\n    description: 'ベクトルに関連付けるメタデータ'\n  })\n})\n\nexport const VectorResponseSchema = z.object({\n  success: z.boolean(),\n  data: VectorSchema,\n  message: z.string().optional()\n})\n\nexport const VectorListResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.array(VectorSchema),\n  count: z.number(),\n  message: z.string().optional()\n})\n\nexport const DeleteVectorResponseSchema = z.object({\n  success: z.boolean(),\n  deletedCount: z.number(),\n  message: z.string().optional()\n})\n\n// 非同期操作レスポンススキーマ\nexport const AsyncVectorOperationResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    jobId: z.string(),\n    workflowId: z.string(),\n    status: z.string(),\n    message: z.string()\n  })\n})\n\nexport type Vector = z.infer<typeof VectorSchema>\nexport type CreateVector = z.infer<typeof CreateVectorSchema>\nexport type VectorResponse = z.infer<typeof VectorResponseSchema>\nexport type VectorListResponse = z.infer<typeof VectorListResponseSchema>\nexport type DeleteVectorResponse = z.infer<typeof DeleteVectorResponseSchema>\nexport type VectorMetadata = z.infer<typeof VectorMetadataSchema>\nexport type AsyncVectorOperationResponse = z.infer<typeof AsyncVectorOperationResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,EAC7B,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS;AAAA,EAC/B,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAC5C,CAAC,EAAE,YAAY;AAER,aAAM,eAAe,EAAE,OAAO;AAAA,EACnC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC5B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,QAAQ,EAAE,MAAM;AAAA,IACd,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,IAClB,EAAE,IAAI;AAAA;AAAA,EACR,CAAC,EAAE,QAAQ;AAAA,IACT,SAAS,CAAC,KAAK,KAAK,GAAG;AAAA,IACvB,aAAa;AAAA,EACf,CAAC;AAAA,EACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,UAAU,qBAAqB,SAAS,EAAE,QAAQ;AAAA,IAChD,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,qBAAqB,EAAE,OAAO;AAAA,EACzC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC9B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACnC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,UAAU,qBAAqB,SAAS,EAAE,QAAQ;AAAA,IAChD,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM;AAAA,EACN,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAEM,aAAM,2BAA2B,EAAE,OAAO;AAAA,EAC/C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,MAAM,YAAY;AAAA,EAC1B,OAAO,EAAE,OAAO;AAAA,EAChB,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAEM,aAAM,6BAA6B,EAAE,OAAO;AAAA,EACjD,SAAS,EAAE,QAAQ;AAAA,EACnB,cAAc,EAAE,OAAO;AAAA,EACvB,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAGM,aAAM,qCAAqC,EAAE,OAAO;AAAA,EACzD,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,OAAO,EAAE,OAAO;AAAA,IAChB,YAAY,EAAE,OAAO;AAAA,IACrB,QAAQ,EAAE,OAAO;AAAA,IACjB,SAAS,EAAE,OAAO;AAAA,EACpB,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2e3dc4b53178f16a9638cf10f62a78c104331f66"},"c:/Users/mtama/node/vector-db/src/schemas/search.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/search.schema.ts","statementMap":{"0":{"start":{"line":3,"column":33},"end":{"line":28,"column":2}},"1":{"start":{"line":29,"column":33},"end":{"line":37,"column":2}},"2":{"start":{"line":38,"column":36},"end":{"line":50,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/search.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\nimport { VectorSchema } from './vector.schema'\nimport { type VectorizeMatch } from './cloudflare.schema'\n\nexport const SearchQuerySchema = z.object({\n  query: z.string().min(1).openapi({\n    example: '検索クエリテキスト',\n    description: '検索するテキストクエリ'\n  }),\n  topK: z.number().int().min(1).max(100).default(10).openapi({\n    example: 10,\n    description: '返す結果の最大数'\n  }),\n  namespace: z.string().optional().openapi({\n    example: 'default',\n    description: '検索する名前空間'\n  }),\n  filter: z.record(z.string(), z.any()).optional().openapi({\n    example: { category: 'technology' },\n    description: 'メタデータフィルター'\n  }),\n  includeMetadata: z.boolean().default(true).openapi({\n    example: true,\n    description: 'メタデータを結果に含めるか'\n  }),\n  includeValues: z.boolean().default(false).openapi({\n    example: false,\n    description: 'ベクトル値を結果に含めるか'\n  })\n})\n\nexport const SearchMatchSchema = z.object({\n  id: z.string(),\n  score: z.number().min(0).max(1).openapi({\n    example: 0.95,\n    description: '類似度スコア（0-1）'\n  }),\n  vector: VectorSchema.optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n})\n\nexport const SearchResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    matches: z.array(SearchMatchSchema),\n    query: z.string(),\n    namespace: z.string().optional(),\n    processingTime: z.number().openapi({\n      example: 123.45,\n      description: '処理時間（ミリ秒）'\n    })\n  }),\n  message: z.string().optional()\n})\n\nexport type SearchQuery = z.infer<typeof SearchQuerySchema>\nexport type SearchMatch = z.infer<typeof SearchMatchSchema>\nexport type SearchResponse = z.infer<typeof SearchResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAClB,SAAS,oBAAoB;AAGtB,aAAM,oBAAoB,EAAE,OAAO;AAAA,EACxC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IAC/B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,QAAQ,EAAE,EAAE,QAAQ;AAAA,IACzD,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,QAAQ,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS,EAAE,QAAQ;AAAA,IACvD,SAAS,EAAE,UAAU,aAAa;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AAAA,EACD,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,IACjD,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,eAAe,EAAE,QAAQ,EAAE,QAAQ,KAAK,EAAE,QAAQ;AAAA,IAChD,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AACH,CAAC;AAEM,aAAM,oBAAoB,EAAE,OAAO;AAAA,EACxC,IAAI,EAAE,OAAO;AAAA,EACb,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,IACtC,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,QAAQ,aAAa,SAAS;AAAA,EAC9B,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,CAAC,EAAE,SAAS;AACnD,CAAC;AAEM,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,SAAS,EAAE,QAAQ;AAAA,EACnB,MAAM,EAAE,OAAO;AAAA,IACb,SAAS,EAAE,MAAM,iBAAiB;AAAA,IAClC,OAAO,EAAE,OAAO;AAAA,IAChB,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,IAC/B,gBAAgB,EAAE,OAAO,EAAE,QAAQ;AAAA,MACjC,SAAS;AAAA,MACT,aAAa;AAAA,IACf,CAAC;AAAA,EACH,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b22c0df2afba2a7d7c31e39c1717d5616f01c63f"},"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts":{"path":"c:/Users/mtama/node/vector-db/src/schemas/error.schema.ts","statementMap":{"0":{"start":{"line":2,"column":35},"end":{"line":15,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/schemas/error.schema.ts"],"sourcesContent":["import { z } from '@hono/zod-openapi'\n\nexport const ErrorResponseSchema = z.object({\n  success: z.literal(false),\n  error: z.string().openapi({\n    example: 'Bad Request',\n    description: 'エラーの種類'\n  }),\n  message: z.string().openapi({\n    example: '無効なリクエストパラメータです',\n    description: 'エラーの詳細メッセージ'\n  }),\n  details: z.any().optional().openapi({\n    description: 'エラーの詳細情報'\n  })\n})\n\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,SAAS,EAAE,QAAQ,KAAK;AAAA,EACxB,OAAO,EAAE,OAAO,EAAE,QAAQ;AAAA,IACxB,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,OAAO,EAAE,QAAQ;AAAA,IAC1B,SAAS;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAAA,EACD,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ;AAAA,IAClC,aAAa;AAAA,EACf,CAAC;AACH,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6a63d60aa5985710aa1a5dd58befc74fd0f881d"},"c:/Users/mtama/node/vector-db/src/services/index.ts":{"path":"c:/Users/mtama/node/vector-db/src/services/index.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/services/index.ts"],"sourcesContent":["export { VectorizeService } from './vectorize.service'"],"mappings":"AAAA,SAAS,wBAAwB;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"33bd27971c59391fb8b63f0ed73e8bafba247bc9"},"c:/Users/mtama/node/vector-db/src/services/vectorize.service.ts":{"path":"c:/Users/mtama/node/vector-db/src/services/vectorize.service.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":19}},"1":{"start":{"line":6,"column":4},"end":{"line":6,"column":51}},"2":{"start":{"line":9,"column":4},"end":{"line":9,"column":51}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":65}},"4":{"start":{"line":15,"column":4},"end":{"line":15,"column":56}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":59}},"6":{"start":{"line":21,"column":20},"end":{"line":21,"column":51}},"7":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"8":{"start":{"line":23,"column":6},"end":{"line":23,"column":54}},"9":{"start":{"line":25,"column":25},"end":{"line":30,"column":5}},"10":{"start":{"line":31,"column":20},"end":{"line":31,"column":69}},"11":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"12":{"start":{"line":33,"column":6},"end":{"line":33,"column":110}},"13":{"start":{"line":33,"column":58},"end":{"line":33,"column":79}},"14":{"start":{"line":35,"column":4},"end":{"line":35,"column":19}},"15":{"start":{"line":38,"column":22},"end":{"line":38,"column":32}},"16":{"start":{"line":39,"column":22},"end":{"line":39,"column":61}},"17":{"start":{"line":40,"column":4},"end":{"line":40,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":19},"end":{"line":4,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":24},"end":{"line":7,"column":3}},"line":5},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":2},"end":{"line":8,"column":3}},"loc":{"start":{"line":8,"column":24},"end":{"line":10,"column":3}},"line":8},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":31},"end":{"line":13,"column":3}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":22},"end":{"line":16,"column":3}},"line":14},"5":{"name":"(anonymous_5)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":3}},"loc":{"start":{"line":17,"column":25},"end":{"line":19,"column":3}},"line":17},"6":{"name":"(anonymous_6)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":39},"end":{"line":36,"column":3}},"line":20},"7":{"name":"(anonymous_7)","decl":{"start":{"line":33,"column":47},"end":{"line":33,"column":48}},"loc":{"start":{"line":33,"column":58},"end":{"line":33,"column":79}},"line":33},"8":{"name":"(anonymous_8)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":35},"end":{"line":41,"column":3}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},{"start":{},"end":{}}],"line":22},"1":{"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":40}},"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":16}},{"start":{"line":22,"column":20},"end":{"line":22,"column":40}}],"line":22},"2":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":81}},"type":"cond-expr","locations":[{"start":{"line":26,"column":35},"end":{"line":26,"column":59}},{"start":{"line":26,"column":62},"end":{"line":26,"column":81}}],"line":26},"3":{"loc":{"start":{"line":26,"column":36},"end":{"line":26,"column":54}},"type":"binary-expr","locations":[{"start":{"line":26,"column":36},"end":{"line":26,"column":48}},{"start":{"line":26,"column":52},"end":{"line":26,"column":54}}],"line":26},"4":{"loc":{"start":{"line":26,"column":62},"end":{"line":26,"column":81}},"type":"binary-expr","locations":[{"start":{"line":26,"column":62},"end":{"line":26,"column":75}},{"start":{"line":26,"column":79},"end":{"line":26,"column":81}}],"line":26},"5":{"loc":{"start":{"line":27,"column":17},"end":{"line":27,"column":59}},"type":"binary-expr","locations":[{"start":{"line":27,"column":17},"end":{"line":27,"column":35}},{"start":{"line":27,"column":39},"end":{"line":27,"column":59}}],"line":27},"6":{"loc":{"start":{"line":28,"column":22},"end":{"line":28,"column":53}},"type":"binary-expr","locations":[{"start":{"line":28,"column":22},"end":{"line":28,"column":45}},{"start":{"line":28,"column":49},"end":{"line":28,"column":53}}],"line":28},"7":{"loc":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},{"start":{},"end":{}}],"line":32},"8":{"loc":{"start":{"line":33,"column":90},"end":{"line":33,"column":108}},"type":"binary-expr","locations":[{"start":{"line":33,"column":90},"end":{"line":33,"column":102}},{"start":{"line":33,"column":106},"end":{"line":33,"column":108}}],"line":33},"9":{"loc":{"start":{"line":37,"column":19},"end":{"line":37,"column":33}},"type":"default-arg","locations":[{"start":{"line":37,"column":28},"end":{"line":37,"column":33}}],"line":37}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/services/vectorize.service.ts"],"sourcesContent":["export class VectorizeService {\n  constructor(\n    private env: Env\n  ) {}\n\n  async insert(vectors: VectorizeVector[]): Promise<void> {\n    await this.env.VECTORIZE_INDEX.insert(vectors)\n  }\n\n  async upsert(vectors: VectorizeVector[]): Promise<void> {\n    await this.env.VECTORIZE_INDEX.upsert(vectors)\n  }\n\n  async query(\n    vector: number[],\n    options?: VectorizeQueryOptions\n  ): Promise<VectorizeMatches> {\n    return await this.env.VECTORIZE_INDEX.query(vector, options)\n  }\n\n  async getByIds(ids: string[]): Promise<VectorizeVector[]> {\n    return await this.env.VECTORIZE_INDEX.getByIds(ids)\n  }\n\n  async deleteByIds(ids: string[]): Promise<{ count: number }> {\n    return await this.env.VECTORIZE_INDEX.deleteByIds(ids)\n  }\n\n  async findSimilar(\n    vectorId: string,\n    options?: VectorizeQueryOptions & { excludeSelf?: boolean }\n  ): Promise<VectorizeMatches> {\n    const vectors = await this.getByIds([vectorId])\n    if (!vectors || vectors.length === 0) {\n      throw new Error(`Vector ${vectorId} not found`)\n    }\n\n    const queryOptions: VectorizeQueryOptions = {\n      topK: options?.excludeSelf ? (options.topK || 10) + 1 : options?.topK || 10,\n      namespace: options?.namespace || vectors[0].namespace,\n      returnMetadata: options?.returnMetadata ?? true,\n      filter: options?.filter\n    }\n\n    const results = await this.query(vectors[0].values as number[], queryOptions)\n\n    if (options?.excludeSelf) {\n      results.matches = results.matches\n        .filter(match => match.id !== vectorId)\n        .slice(0, options.topK || 10)\n    }\n\n    return results\n  }\n\n  generateVectorId(prefix: string = 'vec'): string {\n    const timestamp = Date.now()\n    const randomStr = Math.random().toString(36).substr(2, 9)\n    return `${prefix}_${timestamp}_${randomStr}`\n  }\n}"],"mappings":"AAAO,aAAM,iBAAiB;AAAA,EAC5B,YACU,KACR;AADQ;AAAA,EACP;AAAA,EAEH,MAAM,OAAO,SAA2C;AACtD,UAAM,KAAK,IAAI,gBAAgB,OAAO,OAAO;AAAA,EAC/C;AAAA,EAEA,MAAM,OAAO,SAA2C;AACtD,UAAM,KAAK,IAAI,gBAAgB,OAAO,OAAO;AAAA,EAC/C;AAAA,EAEA,MAAM,MACJ,QACA,SAC2B;AAC3B,WAAO,MAAM,KAAK,IAAI,gBAAgB,MAAM,QAAQ,OAAO;AAAA,EAC7D;AAAA,EAEA,MAAM,SAAS,KAA2C;AACxD,WAAO,MAAM,KAAK,IAAI,gBAAgB,SAAS,GAAG;AAAA,EACpD;AAAA,EAEA,MAAM,YAAY,KAA2C;AAC3D,WAAO,MAAM,KAAK,IAAI,gBAAgB,YAAY,GAAG;AAAA,EACvD;AAAA,EAEA,MAAM,YACJ,UACA,SAC2B;AAC3B,UAAM,UAAU,MAAM,KAAK,SAAS,CAAC,QAAQ,CAAC;AAC9C,QAAI,CAAC,WAAW,QAAQ,WAAW,GAAG;AACpC,YAAM,IAAI,MAAM,UAAU,QAAQ,YAAY;AAAA,IAChD;AAEA,UAAM,eAAsC;AAAA,MAC1C,MAAM,SAAS,eAAe,QAAQ,QAAQ,MAAM,IAAI,SAAS,QAAQ;AAAA,MACzE,WAAW,SAAS,aAAa,QAAQ,CAAC,EAAE;AAAA,MAC5C,gBAAgB,SAAS,kBAAkB;AAAA,MAC3C,QAAQ,SAAS;AAAA,IACnB;AAEA,UAAM,UAAU,MAAM,KAAK,MAAM,QAAQ,CAAC,EAAE,QAAoB,YAAY;AAE5E,QAAI,SAAS,aAAa;AACxB,cAAQ,UAAU,QAAQ,QACvB,OAAO,WAAS,MAAM,OAAO,QAAQ,EACrC,MAAM,GAAG,QAAQ,QAAQ,EAAE;AAAA,IAChC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,iBAAiB,SAAiB,OAAe;AAC/C,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,YAAY,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AACxD,WAAO,GAAG,MAAM,IAAI,SAAS,IAAI,SAAS;AAAA,EAC5C;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e47a9f94def45419bccee3f206166ed2fc04d172"},"c:/Users/mtama/node/vector-db/src/routes/api/search/semantic.ts":{"path":"c:/Users/mtama/node/vector-db/src/routes/api/search/semantic.ts","statementMap":{"0":{"start":{"line":8,"column":35},"end":{"line":56,"column":2}},"1":{"start":{"line":17,"column":51},"end":{"line":17,"column":69}},"2":{"start":{"line":57,"column":37},"end":{"line":99,"column":1}},"3":{"start":{"line":58,"column":2},"end":{"line":98,"column":3}},"4":{"start":{"line":59,"column":22},"end":{"line":59,"column":32}},"5":{"start":{"line":60,"column":18},"end":{"line":60,"column":38}},"6":{"start":{"line":61,"column":29},"end":{"line":61,"column":56}},"7":{"start":{"line":62,"column":21},"end":{"line":62,"column":93}},"8":{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},"9":{"start":{"line":64,"column":6},"end":{"line":64,"column":64}},"10":{"start":{"line":66,"column":22},"end":{"line":66,"column":38}},"11":{"start":{"line":67,"column":26},"end":{"line":74,"column":5}},"12":{"start":{"line":75,"column":20},"end":{"line":79,"column":7}},"13":{"start":{"line":75,"column":58},"end":{"line":79,"column":5}},"14":{"start":{"line":80,"column":27},"end":{"line":80,"column":49}},"15":{"start":{"line":81,"column":4},"end":{"line":90,"column":12}},"16":{"start":{"line":92,"column":4},"end":{"line":92,"column":51}},"17":{"start":{"line":93,"column":4},"end":{"line":97,"column":12}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":44},"end":{"line":17,"column":45}},"loc":{"start":{"line":17,"column":51},"end":{"line":17,"column":69}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":57,"column":37},"end":{"line":57,"column":38}},"loc":{"start":{"line":57,"column":50},"end":{"line":99,"column":1}},"line":57},"2":{"name":"(anonymous_2)","decl":{"start":{"line":75,"column":46},"end":{"line":75,"column":47}},"loc":{"start":{"line":75,"column":58},"end":{"line":79,"column":5}},"line":75}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":51},"end":{"line":17,"column":69}},"type":"cond-expr","locations":[{"start":{"line":17,"column":55},"end":{"line":17,"column":64}},{"start":{"line":17,"column":67},"end":{"line":17,"column":69}}],"line":17},"1":{"loc":{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":65,"column":5}},{"start":{},"end":{}}],"line":63},"2":{"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":77}},"type":"binary-expr","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":29}},{"start":{"line":63,"column":33},"end":{"line":63,"column":47}},{"start":{"line":63,"column":51},"end":{"line":63,"column":77}}],"line":63},"3":{"loc":{"start":{"line":96,"column":15},"end":{"line":96,"column":72}},"type":"cond-expr","locations":[{"start":{"line":96,"column":40},"end":{"line":96,"column":53}},{"start":{"line":96,"column":56},"end":{"line":96,"column":72}}],"line":96}},"s":{"0":1,"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0,0],"3":[0,0]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/routes/api/search/semantic.ts"],"sourcesContent":["import { createRoute, RouteHandler } from '@hono/zod-openapi'\nimport { z } from '@hono/zod-openapi'\nimport {\n  SearchQuerySchema,\n  SearchResponseSchema,\n  type SearchResponse\n} from '../../../schemas/search.schema'\nimport { type VectorizeMatch } from '../../../schemas/cloudflare.schema'\nimport { ErrorResponseSchema, type ErrorResponse } from '../../../schemas/error.schema'\nimport { VectorizeService } from '../../../services'\n\n// 環境の型定義\ntype EnvType = {\n  Bindings: Env\n}\n\n// セマンティック検索ルート定義（GET版）\nexport const semanticSearchRoute = createRoute({\n  method: 'get',\n  path: '/search/semantic',\n  request: {\n    query: z.object({\n      query: z.string().min(1).openapi({\n        example: '検索クエリテキスト',\n        description: '検索するテキストクエリ'\n      }),\n      topK: z.string().optional().transform(v => v ? Number(v) : 10).pipe(z.number().int().min(1).max(100)).openapi({\n        example: '10',\n        description: '返す結果の最大数'\n      }),\n      namespace: z.string().optional().openapi({\n        example: 'default',\n        description: '検索する名前空間'\n      })\n    })\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: SearchResponseSchema\n        }\n      },\n      description: '検索結果'\n    },\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: '不正なリクエスト'\n    },\n    500: {\n      content: {\n        'application/json': {\n          schema: ErrorResponseSchema\n        }\n      },\n      description: 'サーバーエラー'\n    }\n  },\n  tags: ['Search'],\n  summary: 'セマンティック検索（GET）',\n  description: 'クエリパラメータを使用した簡易セマンティック検索'\n})\n\n// セマンティック検索ハンドラー\nexport const semanticSearchHandler: RouteHandler<typeof semanticSearchRoute, EnvType> = async (c) => {\n  try {\n    const startTime = Date.now()\n    const query = c.req.valid('query')\n\n    const vectorizeService = new VectorizeService(c.env)\n\n    // Workers AIを直接使用してクエリテキストをベクトル化（同期的）\n    const aiResult = await c.env.AI.run(c.env.DEFAULT_EMBEDDING_MODEL as keyof AiModels, { text: query.query })\n\n    if (!('data' in aiResult) || !aiResult.data || aiResult.data.length === 0) {\n      throw new Error('Failed to generate embedding for query')\n    }\n    const embedding = aiResult.data[0]\n\n    // Vectorizeで検索\n    const searchResults = await vectorizeService.query(\n      embedding,\n      {\n        topK: query.topK,\n        namespace: query.namespace,\n        returnMetadata: true\n      }\n    )\n\n    // 結果を整形\n    const matches = searchResults.matches.map((match: VectorizeMatch) => ({\n      id: match.id,\n      score: match.score,\n      metadata: match.metadata\n    }))\n\n    const processingTime = Date.now() - startTime\n\n    return c.json<SearchResponse, 200>({\n      success: true,\n      data: {\n        matches,\n        query: query.query,\n        namespace: query.namespace,\n        processingTime\n      },\n      message: `${matches.length}件の結果が見つかりました`\n    }, 200)\n  } catch (error) {\n    console.error('Semantic search error:', error)\n    return c.json<ErrorResponse, 500>({\n      success: false,\n      error: 'Internal Server Error',\n      message: error instanceof Error ? error.message : '検索中にエラーが発生しました'\n    }, 500)\n  }\n}"],"mappings":"AAAA,SAAS,mBAAiC;AAC1C,SAAS,SAAS;AAClB;AAAA,EAEE;AAAA,OAEK;AAEP,SAAS,2BAA+C;AACxD,SAAS,wBAAwB;AAQ1B,aAAM,sBAAsB,YAAY;AAAA,EAC7C,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,IACP,OAAO,EAAE,OAAO;AAAA,MACd,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,QAAQ;AAAA,QAC/B,SAAS;AAAA,QACT,aAAa;AAAA,MACf,CAAC;AAAA,MACD,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,OAAK,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,QAAQ;AAAA,QAC5G,SAAS;AAAA,QACT,aAAa;AAAA,MACf,CAAC;AAAA,MACD,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ;AAAA,QACvC,SAAS;AAAA,QACT,aAAa;AAAA,MACf,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAAA,IACT,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IACA,KAAK;AAAA,MACH,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,MAAM,CAAC,QAAQ;AAAA,EACf,SAAS;AAAA,EACT,aAAa;AACf,CAAC;AAGM,aAAM,wBAA2E,OAAO,MAAM;AACnG,MAAI;AACF,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,QAAQ,EAAE,IAAI,MAAM,OAAO;AAEjC,UAAM,mBAAmB,IAAI,iBAAiB,EAAE,GAAG;AAGnD,UAAM,WAAW,MAAM,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,yBAA2C,EAAE,MAAM,MAAM,MAAM,CAAC;AAE1G,QAAI,EAAE,UAAU,aAAa,CAAC,SAAS,QAAQ,SAAS,KAAK,WAAW,GAAG;AACzE,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,UAAM,YAAY,SAAS,KAAK,CAAC;AAGjC,UAAM,gBAAgB,MAAM,iBAAiB;AAAA,MAC3C;AAAA,MACA;AAAA,QACE,MAAM,MAAM;AAAA,QACZ,WAAW,MAAM;AAAA,QACjB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAGA,UAAM,UAAU,cAAc,QAAQ,IAAI,CAAC,WAA2B;AAAA,MACpE,IAAI,MAAM;AAAA,MACV,OAAO,MAAM;AAAA,MACb,UAAU,MAAM;AAAA,IAClB,EAAE;AAEF,UAAM,iBAAiB,KAAK,IAAI,IAAI;AAEpC,WAAO,EAAE,KAA0B;AAAA,MACjC,SAAS;AAAA,MACT,MAAM;AAAA,QACJ;AAAA,QACA,OAAO,MAAM;AAAA,QACb,WAAW,MAAM;AAAA,QACjB;AAAA,MACF;AAAA,MACA,SAAS,GAAG,QAAQ,MAAM;AAAA,IAC5B,GAAG,GAAG;AAAA,EACR,SAAS,OAAO;AACd,YAAQ,MAAM,0BAA0B,KAAK;AAC7C,WAAO,EAAE,KAAyB;AAAA,MAChC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,GAAG,GAAG;AAAA,EACR;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7b90bd4a8b58ba0247d14e0913e0db9b191562d5"}}