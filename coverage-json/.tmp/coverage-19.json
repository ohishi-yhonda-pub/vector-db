{"c:/Users/mtama/node/vector-db/src/durable-objects/ai-embeddings.ts":{"path":"c:/Users/mtama/node/vector-db/src/durable-objects/ai-embeddings.ts","statementMap":{"0":{"start":{"line":3,"column":17},"end":{"line":5,"column":3}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":20}},"2":{"start":{"line":10,"column":18},"end":{"line":10,"column":40}},"3":{"start":{"line":11,"column":21},"end":{"line":20,"column":6}},"4":{"start":{"line":21,"column":16},"end":{"line":27,"column":5}},"5":{"start":{"line":28,"column":4},"end":{"line":33,"column":7}},"6":{"start":{"line":34,"column":4},"end":{"line":34,"column":68}},"7":{"start":{"line":38,"column":18},"end":{"line":38,"column":39}},"8":{"start":{"line":39,"column":21},"end":{"line":47,"column":6}},"9":{"start":{"line":48,"column":16},"end":{"line":54,"column":5}},"10":{"start":{"line":55,"column":4},"end":{"line":60,"column":7}},"11":{"start":{"line":61,"column":4},"end":{"line":61,"column":93}},"12":{"start":{"line":64,"column":4},"end":{"line":64,"column":34}},"13":{"start":{"line":67,"column":21},"end":{"line":67,"column":77}},"14":{"start":{"line":68,"column":19},"end":{"line":68,"column":42}},"15":{"start":{"line":69,"column":4},"end":{"line":69,"column":18}},"16":{"start":{"line":72,"column":18},"end":{"line":72,"column":39}},"17":{"start":{"line":73,"column":21},"end":{"line":81,"column":6}},"18":{"start":{"line":82,"column":16},"end":{"line":88,"column":5}},"19":{"start":{"line":89,"column":4},"end":{"line":94,"column":7}},"20":{"start":{"line":95,"column":4},"end":{"line":95,"column":94}},"21":{"start":{"line":98,"column":4},"end":{"line":120,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":24},"end":{"line":8,"column":3}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":2},"end":{"line":9,"column":3}},"loc":{"start":{"line":9,"column":39},"end":{"line":35,"column":3}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":55},"end":{"line":62,"column":3}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":63,"column":2},"end":{"line":63,"column":3}},"loc":{"start":{"line":63,"column":28},"end":{"line":65,"column":3}},"line":63},"4":{"name":"(anonymous_4)","decl":{"start":{"line":66,"column":2},"end":{"line":66,"column":3}},"loc":{"start":{"line":66,"column":38},"end":{"line":70,"column":3}},"line":66},"5":{"name":"(anonymous_5)","decl":{"start":{"line":71,"column":2},"end":{"line":71,"column":3}},"loc":{"start":{"line":71,"column":55},"end":{"line":96,"column":3}},"line":71},"6":{"name":"(anonymous_6)","decl":{"start":{"line":97,"column":2},"end":{"line":97,"column":3}},"loc":{"start":{"line":97,"column":29},"end":{"line":121,"column":3}},"line":97}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":15},"end":{"line":16,"column":56}},"type":"binary-expr","locations":[{"start":{"line":16,"column":15},"end":{"line":16,"column":20}},{"start":{"line":16,"column":24},"end":{"line":16,"column":56}}],"line":16},"1":{"loc":{"start":{"line":43,"column":15},"end":{"line":43,"column":56}},"type":"binary-expr","locations":[{"start":{"line":43,"column":15},"end":{"line":43,"column":20}},{"start":{"line":43,"column":24},"end":{"line":43,"column":56}}],"line":43},"2":{"loc":{"start":{"line":44,"column":19},"end":{"line":44,"column":43}},"type":"binary-expr","locations":[{"start":{"line":44,"column":19},"end":{"line":44,"column":37}},{"start":{"line":44,"column":41},"end":{"line":44,"column":43}}],"line":44},"3":{"loc":{"start":{"line":45,"column":25},"end":{"line":45,"column":58}},"type":"binary-expr","locations":[{"start":{"line":45,"column":25},"end":{"line":45,"column":49}},{"start":{"line":45,"column":53},"end":{"line":45,"column":58}}],"line":45},"4":{"loc":{"start":{"line":77,"column":15},"end":{"line":77,"column":56}},"type":"binary-expr","locations":[{"start":{"line":77,"column":15},"end":{"line":77,"column":20}},{"start":{"line":77,"column":24},"end":{"line":77,"column":56}}],"line":77},"5":{"loc":{"start":{"line":78,"column":19},"end":{"line":78,"column":43}},"type":"binary-expr","locations":[{"start":{"line":78,"column":19},"end":{"line":78,"column":37}},{"start":{"line":78,"column":41},"end":{"line":78,"column":43}}],"line":78},"6":{"loc":{"start":{"line":79,"column":25},"end":{"line":79,"column":58}},"type":"binary-expr","locations":[{"start":{"line":79,"column":25},"end":{"line":79,"column":49}},{"start":{"line":79,"column":53},"end":{"line":79,"column":58}}],"line":79}},"s":{"0":11,"1":11,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":2,"17":2,"18":2,"19":2,"20":2,"21":1},"f":{"0":11,"1":2,"2":2,"3":2,"4":1,"5":2,"6":1},"b":{"0":[2,1],"1":[2,1],"2":[2,1],"3":[2,1],"4":[2,1],"5":[2,1],"6":[2,1]},"inputSourceMap":{"version":3,"sources":["C:/Users/mtama/node/vector-db/src/durable-objects/ai-embeddings.ts"],"sourcesContent":["import { Agent } from 'agents'\n\ninterface BatchJob {\n  texts: string[]\n  model?: string\n  options?: {\n    batchSize?: number\n    saveToVectorize?: boolean\n    delayMs?: number\n  }\n  status: 'pending' | 'completed' | 'failed'\n  createdAt: string\n  completedAt?: string\n  failedAt?: string\n  result?: BatchJobResult\n  error?: string\n}\n\ninterface BatchJobResult {\n  embeddings: Array<{\n    text: string\n    embedding: number[] | null\n    error: string | null\n  }>\n  failed: Array<{\n    text: string\n    embedding: null\n    error: string\n  }>\n  model: string\n  totalCount: number\n  successCount: number\n  failedCount: number\n}\n\ninterface AIEmbeddingsState {\n  jobs: Record<string, BatchJob>\n}\n\nexport class AIEmbeddings extends Agent<Env, AIEmbeddingsState> {\n  initialState: AIEmbeddingsState = {\n    jobs: {}\n  }\n\n  constructor(ctx: DurableObjectState, env: Env) {\n    super(ctx, env)\n  }\n\n\n  async generateEmbedding(text: string, model?: string): Promise<{ jobId: string; workflowId: string; status: string }> {\n    // BatchEmbeddingsWorkflowを使用して単一のテキストを非同期処理\n    const jobId = `single_${Date.now()}`\n    const workflow = await this.env.BATCH_EMBEDDINGS_WORKFLOW.create({\n      id: jobId,\n      params: {\n        texts: [text], // 単一のテキストを配列として渡す\n        model: model || this.env.DEFAULT_EMBEDDING_MODEL,\n        batchSize: 1,\n        saveToVectorize: false\n      }\n    })\n    \n    // ジョブの状態を保存\n    const job: BatchJob = {\n      texts: [text],\n      model,\n      options: { batchSize: 1, saveToVectorize: false },\n      status: 'pending',\n      createdAt: new Date().toISOString()\n    }\n    \n    this.setState({\n      jobs: {\n        ...this.state.jobs,\n        [jobId]: job\n      }\n    })\n    \n    // 非同期で結果を返す\n    return { jobId, workflowId: workflow.id, status: 'processing' }\n  }\n\n  // Agentのスケジューリング機能を使用したバッチ処理\n  async scheduleBatchEmbeddings(texts: string[], model?: string, options?: {\n    batchSize?: number\n    saveToVectorize?: boolean\n    delayMs?: number\n  }) {\n    const jobId = `batch_${Date.now()}`\n    \n    // Workflowを使用してバッチ処理を実行\n    const workflow = await this.env.BATCH_EMBEDDINGS_WORKFLOW.create({\n      id: jobId,\n      params: {\n        texts,\n        model: model || this.env.DEFAULT_EMBEDDING_MODEL,\n        batchSize: options?.batchSize || 10,\n        saveToVectorize: options?.saveToVectorize || false\n      }\n    })\n    \n    // ジョブの状態を保存\n    const job: BatchJob = {\n      texts,\n      model,\n      options,\n      status: 'pending',\n      createdAt: new Date().toISOString()\n    }\n    \n    this.setState({\n      jobs: {\n        ...this.state.jobs,\n        [jobId]: job\n      }\n    })\n    \n    return { jobId, workflowId: workflow.id, status: 'scheduled', textsCount: texts.length }\n  }\n\n\n  async getJobStatus(jobId: string): Promise<BatchJob | undefined> {\n    return this.state.jobs[jobId]\n  }\n\n  async getWorkflowStatus(workflowId: string) {\n    const workflow = await this.env.BATCH_EMBEDDINGS_WORKFLOW.get(workflowId)\n    const status = await workflow.status()\n    return status\n  }\n\n  async generateBatchEmbeddings(texts: string[], model?: string, options?: {\n    batchSize?: number\n    saveToVectorize?: boolean\n  }): Promise<{ jobId: string; workflowId: string; status: string; textsCount: number }> {\n    // 常にWorkflowを使用（非同期）\n    const jobId = `batch_${Date.now()}`\n    const workflow = await this.env.BATCH_EMBEDDINGS_WORKFLOW.create({\n      id: jobId,\n      params: {\n        texts,\n        model: model || this.env.DEFAULT_EMBEDDING_MODEL,\n        batchSize: options?.batchSize || 10,\n        saveToVectorize: options?.saveToVectorize || false\n      }\n    })\n    \n    // ジョブの状態を保存\n    const job: BatchJob = {\n      texts,\n      model,\n      options,\n      status: 'pending',\n      createdAt: new Date().toISOString()\n    }\n    \n    this.setState({\n      jobs: {\n        ...this.state.jobs,\n        [jobId]: job\n      }\n    })\n    \n    // 非同期で結果を返す\n    return { jobId, workflowId: workflow.id, status: 'processing', textsCount: texts.length }\n  }\n\n\n  async getAvailableModels(): Promise<Array<{\n    name: string\n    description: string\n    dimensions: number\n    maxTokens: number\n    recommended: boolean\n  }>> {\n    return [\n      {\n        name: '@cf/baai/bge-base-en-v1.5',\n        description: 'BAAI General Embedding - English v1.5',\n        dimensions: 768,\n        maxTokens: 512,\n        recommended: true\n      },\n      {\n        name: '@cf/baai/bge-small-en-v1.5',\n        description: 'BAAI General Embedding Small - English v1.5',\n        dimensions: 384,\n        maxTokens: 512,\n        recommended: false\n      },\n      {\n        name: '@cf/baai/bge-large-en-v1.5',\n        description: 'BAAI General Embedding Large - English v1.5',\n        dimensions: 1024,\n        maxTokens: 512,\n        recommended: false\n      }\n    ]\n  }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"78ec4f9a8039067d3e48c346957e30049460205a"}}